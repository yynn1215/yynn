
testadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b921  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002462  00000000  00000000  0002b9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003c4c  00000000  00000000  0002de23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  00031a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  00032270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000041d0  00000000  00000000  00032b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003023  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00039d3b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b14  00000000  00000000  00039db8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f18 	.word	0x08002f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002f18 	.word	0x08002f18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 fb46 	bl	8000c28 <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 fafa 	bl	8000ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 facb 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f001 fc38 	bl	8001e64 <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000098 	.word	0x20000098
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000098 	.word	0x20000098

08000620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000622:	4604      	mov	r4, r0
 8000624:	2800      	cmp	r0, #0
 8000626:	f000 809b 	beq.w	8000760 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800062a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800062c:	b925      	cbnz	r5, 8000638 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800062e:	f001 faef 	bl	8001c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000632:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000634:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800063a:	06db      	lsls	r3, r3, #27
 800063c:	f100 808e 	bmi.w	800075c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000646:	f023 0302 	bic.w	r3, r3, #2
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000650:	4b44      	ldr	r3, [pc, #272]	; (8000764 <HAL_ADC_Init+0x144>)
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000658:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	6861      	ldr	r1, [r4, #4]
 800065e:	430a      	orrs	r2, r1
 8000660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000662:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000664:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800066c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000676:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000678:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800067a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800067e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	430a      	orrs	r2, r1
 8000684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000686:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000688:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800068a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800068e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	430a      	orrs	r2, r1
 8000694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000696:	4934      	ldr	r1, [pc, #208]	; (8000768 <HAL_ADC_Init+0x148>)
 8000698:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800069a:	428a      	cmp	r2, r1
 800069c:	d052      	beq.n	8000744 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800069e:	6899      	ldr	r1, [r3, #8]
 80006a0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006a4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	430a      	orrs	r2, r1
 80006aa:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ac:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ba:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006bc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80006be:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006c0:	f022 0202 	bic.w	r2, r2, #2
 80006c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80006cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80006ce:	f894 2020 	ldrb.w	r2, [r4, #32]
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d03e      	beq.n	8000754 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006d6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	3901      	subs	r1, #1
 80006ec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006f0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006f4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fe:	3901      	subs	r1, #1
 8000700:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000706:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000708:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800070c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000718:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800071a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800071c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800071e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000724:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000726:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000728:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800072c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800072e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000732:	f023 0303 	bic.w	r3, r3, #3
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800073c:	2300      	movs	r3, #0
 800073e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000742:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800074a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000752:	e7b2      	b.n	80006ba <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800075a:	e7c9      	b.n	80006f0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800075c:	2001      	movs	r0, #1
 800075e:	e7ed      	b.n	800073c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000760:	2001      	movs	r0, #1
}
 8000762:	bd38      	pop	{r3, r4, r5, pc}
 8000764:	40012300 	.word	0x40012300
 8000768:	0f000001 	.word	0x0f000001

0800076c <HAL_ADC_Start_DMA>:
{
 800076c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800076e:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8000770:	2200      	movs	r2, #0
 8000772:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000774:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000778:	2a01      	cmp	r2, #1
{
 800077a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800077c:	d077      	beq.n	800086e <HAL_ADC_Start_DMA+0x102>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800077e:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8000780:	2201      	movs	r2, #1
 8000782:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000786:	68aa      	ldr	r2, [r5, #8]
 8000788:	07d0      	lsls	r0, r2, #31
 800078a:	d505      	bpl.n	8000798 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800078c:	68aa      	ldr	r2, [r5, #8]
 800078e:	07d2      	lsls	r2, r2, #31
 8000790:	d415      	bmi.n	80007be <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8000792:	2000      	movs	r0, #0
}
 8000794:	b003      	add	sp, #12
 8000796:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000798:	68aa      	ldr	r2, [r5, #8]
 800079a:	f042 0201 	orr.w	r2, r2, #1
 800079e:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007a0:	4a34      	ldr	r2, [pc, #208]	; (8000874 <HAL_ADC_Start_DMA+0x108>)
 80007a2:	6810      	ldr	r0, [r2, #0]
 80007a4:	4a34      	ldr	r2, [pc, #208]	; (8000878 <HAL_ADC_Start_DMA+0x10c>)
 80007a6:	fbb0 f0f2 	udiv	r0, r0, r2
 80007aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80007ae:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80007b0:	9a01      	ldr	r2, [sp, #4]
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d0ea      	beq.n	800078c <HAL_ADC_Start_DMA+0x20>
      counter--;
 80007b6:	9a01      	ldr	r2, [sp, #4]
 80007b8:	3a01      	subs	r2, #1
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	e7f8      	b.n	80007b0 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 80007be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80007c0:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80007c4:	f020 0001 	bic.w	r0, r0, #1
 80007c8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80007cc:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ce:	686a      	ldr	r2, [r5, #4]
 80007d0:	0550      	lsls	r0, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007d2:	bf41      	itttt	mi
 80007d4:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 80007d6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80007da:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80007de:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e8:	bf1c      	itt	ne
 80007ea:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80007ec:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80007f0:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80007f2:	2200      	movs	r2, #0
 80007f4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007f8:	4a20      	ldr	r2, [pc, #128]	; (800087c <HAL_ADC_Start_DMA+0x110>)
 80007fa:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <HAL_ADC_Start_DMA+0x114>)
 80007fe:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000800:	4a20      	ldr	r2, [pc, #128]	; (8000884 <HAL_ADC_Start_DMA+0x118>)
 8000802:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000808:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800080a:	686a      	ldr	r2, [r5, #4]
 800080c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000810:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000812:	68aa      	ldr	r2, [r5, #8]
 8000814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000818:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800081a:	460a      	mov	r2, r1
 800081c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000820:	f000 faac 	bl	8000d7c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000824:	4a18      	ldr	r2, [pc, #96]	; (8000888 <HAL_ADC_Start_DMA+0x11c>)
 8000826:	4919      	ldr	r1, [pc, #100]	; (800088c <HAL_ADC_Start_DMA+0x120>)
 8000828:	6853      	ldr	r3, [r2, #4]
 800082a:	f013 0f1f 	tst.w	r3, #31
 800082e:	6823      	ldr	r3, [r4, #0]
 8000830:	d11a      	bne.n	8000868 <HAL_ADC_Start_DMA+0xfc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000832:	428b      	cmp	r3, r1
 8000834:	d006      	beq.n	8000844 <HAL_ADC_Start_DMA+0xd8>
 8000836:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800083a:	428b      	cmp	r3, r1
 800083c:	d10b      	bne.n	8000856 <HAL_ADC_Start_DMA+0xea>
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	06d2      	lsls	r2, r2, #27
 8000842:	d1a6      	bne.n	8000792 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000844:	6898      	ldr	r0, [r3, #8]
 8000846:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800084a:	d1a2      	bne.n	8000792 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	e79e      	b.n	8000794 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <HAL_ADC_Start_DMA+0x124>)
 8000858:	428b      	cmp	r3, r1
 800085a:	d19a      	bne.n	8000792 <HAL_ADC_Start_DMA+0x26>
 800085c:	6852      	ldr	r2, [r2, #4]
 800085e:	f002 021f 	and.w	r2, r2, #31
 8000862:	2a0f      	cmp	r2, #15
 8000864:	d9ee      	bls.n	8000844 <HAL_ADC_Start_DMA+0xd8>
 8000866:	e794      	b.n	8000792 <HAL_ADC_Start_DMA+0x26>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000868:	428b      	cmp	r3, r1
 800086a:	d192      	bne.n	8000792 <HAL_ADC_Start_DMA+0x26>
 800086c:	e7ea      	b.n	8000844 <HAL_ADC_Start_DMA+0xd8>
  __HAL_LOCK(hadc);
 800086e:	2002      	movs	r0, #2
 8000870:	e790      	b.n	8000794 <HAL_ADC_Start_DMA+0x28>
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	000f4240 	.word	0x000f4240
 800087c:	080009e5 	.word	0x080009e5
 8000880:	08000899 	.word	0x08000899
 8000884:	080009cf 	.word	0x080009cf
 8000888:	40012300 	.word	0x40012300
 800088c:	40012000 	.word	0x40012000
 8000890:	40012200 	.word	0x40012200

08000894 <HAL_ADC_ConvCpltCallback>:
 8000894:	4770      	bx	lr

08000896 <HAL_ADC_ConvHalfCpltCallback>:
 8000896:	4770      	bx	lr

08000898 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000898:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800089a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800089c:	f7ff fffb 	bl	8000896 <HAL_ADC_ConvHalfCpltCallback>
 80008a0:	bd08      	pop	{r3, pc}

080008a2 <HAL_ADC_LevelOutOfWindowCallback>:
 80008a2:	4770      	bx	lr

080008a4 <HAL_ADC_ErrorCallback>:
{
 80008a4:	4770      	bx	lr

080008a6 <HAL_ADC_IRQHandler>:
{
 80008a6:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80008a8:	6803      	ldr	r3, [r0, #0]
 80008aa:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80008ac:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80008ae:	078d      	lsls	r5, r1, #30
{
 80008b0:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80008b2:	d52b      	bpl.n	800090c <HAL_ADC_IRQHandler+0x66>
 80008b4:	0690      	lsls	r0, r2, #26
 80008b6:	d529      	bpl.n	800090c <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008ba:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008bc:	bf5e      	ittt	pl
 80008be:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80008c0:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80008c4:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80008cc:	d117      	bne.n	80008fe <HAL_ADC_IRQHandler+0x58>
 80008ce:	7e22      	ldrb	r2, [r4, #24]
 80008d0:	b9aa      	cbnz	r2, 80008fe <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008d4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80008d8:	d002      	beq.n	80008e0 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008da:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008dc:	0552      	lsls	r2, r2, #21
 80008de:	d40e      	bmi.n	80008fe <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	f022 0220 	bic.w	r2, r2, #32
 80008e6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80008e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008ee:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008f2:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008f4:	bf5e      	ittt	pl
 80008f6:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80008f8:	f043 0301 	orrpl.w	r3, r3, #1
 80008fc:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80008fe:	4620      	mov	r0, r4
 8000900:	f7ff ffc8 	bl	8000894 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	f06f 0212 	mvn.w	r2, #18
 800090a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000910:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000912:	074d      	lsls	r5, r1, #29
 8000914:	d532      	bpl.n	800097c <HAL_ADC_IRQHandler+0xd6>
 8000916:	0610      	lsls	r0, r2, #24
 8000918:	d530      	bpl.n	800097c <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800091a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800091c:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800091e:	bf5e      	ittt	pl
 8000920:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000922:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000926:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800092e:	d11e      	bne.n	800096e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000932:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000936:	d002      	beq.n	800093e <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000938:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800093a:	0552      	lsls	r2, r2, #21
 800093c:	d417      	bmi.n	800096e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800093e:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000940:	0555      	lsls	r5, r2, #21
 8000942:	d414      	bmi.n	800096e <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000944:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000946:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800094a:	d110      	bne.n	800096e <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800094c:	7e22      	ldrb	r2, [r4, #24]
 800094e:	b972      	cbnz	r2, 800096e <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000956:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800095a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800095e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000962:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000964:	bf5e      	ittt	pl
 8000966:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000968:	f043 0301 	orrpl.w	r3, r3, #1
 800096c:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800096e:	4620      	mov	r0, r4
 8000970:	f000 f904 	bl	8000b7c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	f06f 020c 	mvn.w	r2, #12
 800097a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000980:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000982:	07c9      	lsls	r1, r1, #31
 8000984:	d50f      	bpl.n	80009a6 <HAL_ADC_IRQHandler+0x100>
 8000986:	0655      	lsls	r5, r2, #25
 8000988:	d50d      	bpl.n	80009a6 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	07d8      	lsls	r0, r3, #31
 800098e:	d50a      	bpl.n	80009a6 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000996:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000998:	4620      	mov	r0, r4
 800099a:	f7ff ff82 	bl	80008a2 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	f06f 0201 	mvn.w	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80009aa:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80009ac:	0689      	lsls	r1, r1, #26
 80009ae:	d50d      	bpl.n	80009cc <HAL_ADC_IRQHandler+0x126>
 80009b0:	0152      	lsls	r2, r2, #5
 80009b2:	d50b      	bpl.n	80009cc <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009b6:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009ba:	f042 0202 	orr.w	r2, r2, #2
 80009be:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80009c0:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009c2:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80009c4:	f7ff ff6e 	bl	80008a4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	601d      	str	r5, [r3, #0]
 80009cc:	bd38      	pop	{r3, r4, r5, pc}

080009ce <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80009d0:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80009d2:	2340      	movs	r3, #64	; 0x40
 80009d4:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80009d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80009de:	f7ff ff61 	bl	80008a4 <HAL_ADC_ErrorCallback>
 80009e2:	bd08      	pop	{r3, pc}

080009e4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80009e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80009ec:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80009f0:	d123      	bne.n	8000a3a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009f6:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	6891      	ldr	r1, [r2, #8]
 80009fc:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000a00:	d117      	bne.n	8000a32 <ADC_DMAConvCplt+0x4e>
 8000a02:	7e19      	ldrb	r1, [r3, #24]
 8000a04:	b9a9      	cbnz	r1, 8000a32 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a08:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000a0c:	d002      	beq.n	8000a14 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000a0e:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a10:	0548      	lsls	r0, r1, #21
 8000a12:	d40e      	bmi.n	8000a32 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a14:	6851      	ldr	r1, [r2, #4]
 8000a16:	f021 0120 	bic.w	r1, r1, #32
 8000a1a:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a22:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a26:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a28:	bf5e      	ittt	pl
 8000a2a:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8000a2c:	f042 0201 	orrpl.w	r2, r2, #1
 8000a30:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff2e 	bl	8000894 <HAL_ADC_ConvCpltCallback>
 8000a38:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000a3a:	06d2      	lsls	r2, r2, #27
 8000a3c:	d503      	bpl.n	8000a46 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff30 	bl	80008a4 <HAL_ADC_ErrorCallback>
 8000a44:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4718      	bx	r3

08000a50 <HAL_ADC_ConfigChannel>:
{
 8000a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000a56:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	f000 8083 	beq.w	8000b66 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a60:	680d      	ldr	r5, [r1, #0]
 8000a62:	6804      	ldr	r4, [r0, #0]
 8000a64:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000a66:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a68:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000a6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000a6e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a70:	d92a      	bls.n	8000ac8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a72:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000a76:	68e7      	ldr	r7, [r4, #12]
 8000a78:	3b1e      	subs	r3, #30
 8000a7a:	f04f 0e07 	mov.w	lr, #7
 8000a7e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a82:	ea27 070e 	bic.w	r7, r7, lr
 8000a86:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a88:	68e7      	ldr	r7, [r4, #12]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	433b      	orrs	r3, r7
 8000a90:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000a92:	684a      	ldr	r2, [r1, #4]
 8000a94:	2a06      	cmp	r2, #6
 8000a96:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000a9a:	d825      	bhi.n	8000ae8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a9c:	4413      	add	r3, r2
 8000a9e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000aa0:	1f59      	subs	r1, r3, #5
 8000aa2:	231f      	movs	r3, #31
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	ea27 0303 	bic.w	r3, r7, r3
 8000aaa:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000aac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000aae:	fa06 f101 	lsl.w	r1, r6, r1
 8000ab2:	4311      	orrs	r1, r2
 8000ab4:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_ADC_ConfigChannel+0x11c>)
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	d034      	beq.n	8000b26 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000abc:	2300      	movs	r3, #0
 8000abe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000ac2:	4618      	mov	r0, r3
}
 8000ac4:	b003      	add	sp, #12
 8000ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ac8:	6927      	ldr	r7, [r4, #16]
 8000aca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000ace:	f04f 0e07 	mov.w	lr, #7
 8000ad2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ad6:	ea27 070e 	bic.w	r7, r7, lr
 8000ada:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000adc:	6927      	ldr	r7, [r4, #16]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	433b      	orrs	r3, r7
 8000ae4:	6123      	str	r3, [r4, #16]
 8000ae6:	e7d4      	b.n	8000a92 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000ae8:	2a0c      	cmp	r2, #12
 8000aea:	d80e      	bhi.n	8000b0a <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000aec:	4413      	add	r3, r2
 8000aee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000af0:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000af4:	231f      	movs	r3, #31
 8000af6:	4093      	lsls	r3, r2
 8000af8:	ea21 0303 	bic.w	r3, r1, r3
 8000afc:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000afe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b00:	fa06 f202 	lsl.w	r2, r6, r2
 8000b04:	431a      	orrs	r2, r3
 8000b06:	6322      	str	r2, [r4, #48]	; 0x30
 8000b08:	e7d5      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b0a:	4413      	add	r3, r2
 8000b0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000b0e:	3b41      	subs	r3, #65	; 0x41
 8000b10:	221f      	movs	r2, #31
 8000b12:	409a      	lsls	r2, r3
 8000b14:	ea21 0202 	bic.w	r2, r1, r2
 8000b18:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b1c:	fa06 f103 	lsl.w	r1, r6, r3
 8000b20:	4311      	orrs	r1, r2
 8000b22:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000b24:	e7c7      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b26:	2d12      	cmp	r5, #18
 8000b28:	d104      	bne.n	8000b34 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <HAL_ADC_ConfigChannel+0x120>)
 8000b2c:	6853      	ldr	r3, [r2, #4]
 8000b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b32:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b34:	f1a5 0310 	sub.w	r3, r5, #16
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d8bf      	bhi.n	8000abc <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <HAL_ADC_ConfigChannel+0x120>)
 8000b3e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b40:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b46:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b48:	d1b8      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_ADC_ConfigChannel+0x124>)
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_ADC_ConfigChannel+0x128>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b54:	230a      	movs	r3, #10
 8000b56:	4353      	muls	r3, r2
        counter--;
 8000b58:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000b5a:	9b01      	ldr	r3, [sp, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0ad      	beq.n	8000abc <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	e7f8      	b.n	8000b58 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000b66:	2002      	movs	r0, #2
 8000b68:	e7ac      	b.n	8000ac4 <HAL_ADC_ConfigChannel+0x74>
 8000b6a:	bf00      	nop
 8000b6c:	40012000 	.word	0x40012000
 8000b70:	40012300 	.word	0x40012300
 8000b74:	20000008 	.word	0x20000008
 8000b78:	000f4240 	.word	0x000f4240

08000b7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b7c:	4770      	bx	lr
	...

08000b80 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b82:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b88:	041b      	lsls	r3, r3, #16
 8000b8a:	0c1b      	lsrs	r3, r3, #16
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	0200      	lsls	r0, r0, #8
 8000b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b9c:	60d3      	str	r3, [r2, #12]
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b530      	push	{r4, r5, lr}
 8000ba8:	68dc      	ldr	r4, [r3, #12]
 8000baa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	bf28      	it	cs
 8000bb8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 0501 	mov.w	r5, #1
 8000bc0:	fa05 f303 	lsl.w	r3, r5, r3
 8000bc4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc8:	bf8c      	ite	hi
 8000bca:	3c03      	subhi	r4, #3
 8000bcc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bce:	4019      	ands	r1, r3
 8000bd0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd2:	fa05 f404 	lsl.w	r4, r5, r4
 8000bd6:	3c01      	subs	r4, #1
 8000bd8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bda:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	ea42 0201 	orr.w	r2, r2, r1
 8000be0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	bfad      	iteet	ge
 8000be6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	f000 000f 	andlt.w	r0, r0, #15
 8000bee:	4b06      	ldrlt	r3, [pc, #24]	; (8000c08 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	bfb5      	itete	lt
 8000bf6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c00:	bd30      	pop	{r4, r5, pc}
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00
 8000c08:	e000ed14 	.word	0xe000ed14

08000c0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	db08      	blt.n	8000c22 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c10:	0942      	lsrs	r2, r0, #5
 8000c12:	2301      	movs	r3, #1
 8000c14:	f000 001f 	and.w	r0, r0, #31
 8000c18:	fa03 f000 	lsl.w	r0, r3, r0
 8000c1c:	4b01      	ldr	r3, [pc, #4]	; (8000c24 <HAL_NVIC_EnableIRQ+0x18>)
 8000c1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	3801      	subs	r0, #1
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d20a      	bcs.n	8000c46 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c34:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	21f0      	movs	r1, #240	; 0xf0
 8000c38:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c54:	6803      	ldr	r3, [r0, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000c5c:	f023 0303 	bic.w	r3, r3, #3
 8000c60:	2118      	movs	r1, #24
 8000c62:	3a10      	subs	r2, #16
 8000c64:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c68:	4904      	ldr	r1, [pc, #16]	; (8000c7c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000c6a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000c6c:	bf88      	it	hi
 8000c6e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c70:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000c72:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c74:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000c76:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	08002f30 	.word	0x08002f30

08000c80 <HAL_DMA_Init>:
{
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fcc6 	bl	8000614 <HAL_GetTick>
 8000c88:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d071      	beq.n	8000d72 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000c94:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000c9c:	6813      	ldr	r3, [r2, #0]
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ca4:	6821      	ldr	r1, [r4, #0]
 8000ca6:	680b      	ldr	r3, [r1, #0]
 8000ca8:	07d8      	lsls	r0, r3, #31
 8000caa:	d43c      	bmi.n	8000d26 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000cac:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cae:	4d32      	ldr	r5, [pc, #200]	; (8000d78 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cb4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb6:	68a3      	ldr	r3, [r4, #8]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	68e2      	ldr	r2, [r4, #12]
 8000cbc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbe:	6922      	ldr	r2, [r4, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6962      	ldr	r2, [r4, #20]
 8000cc4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc6:	69e2      	ldr	r2, [r4, #28]
 8000cc8:	4303      	orrs	r3, r0
 8000cca:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ccc:	6a22      	ldr	r2, [r4, #32]
 8000cce:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cd2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cd4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cd8:	bf01      	itttt	eq
 8000cda:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000cdc:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000cde:	4335      	orreq	r5, r6
 8000ce0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000ce2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000ce4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ce6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ce8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000cec:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cf0:	d10b      	bne.n	8000d0a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000cf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cf4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000cf6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cf8:	b13d      	cbz	r5, 8000d0a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000cfa:	b9f8      	cbnz	r0, 8000d3c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d02d      	beq.n	8000d5c <HAL_DMA_Init+0xdc>
 8000d00:	d301      	bcc.n	8000d06 <HAL_DMA_Init+0x86>
 8000d02:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d04:	d101      	bne.n	8000d0a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d06:	01ea      	lsls	r2, r5, #7
 8000d08:	d42b      	bmi.n	8000d62 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000d0a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff ffa1 	bl	8000c54 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d14:	233f      	movs	r3, #63	; 0x3f
 8000d16:	4093      	lsls	r3, r2
 8000d18:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000d1c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000d20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d26:	f7ff fc75 	bl	8000614 <HAL_GetTick>
 8000d2a:	1b40      	subs	r0, r0, r5
 8000d2c:	2805      	cmp	r0, #5
 8000d2e:	d9b9      	bls.n	8000ca4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d30:	2320      	movs	r3, #32
 8000d32:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d34:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000d36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d3c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000d40:	d113      	bne.n	8000d6a <HAL_DMA_Init+0xea>
    switch (tmp)
 8000d42:	2a03      	cmp	r2, #3
 8000d44:	d8e1      	bhi.n	8000d0a <HAL_DMA_Init+0x8a>
 8000d46:	a001      	add	r0, pc, #4	; (adr r0, 8000d4c <HAL_DMA_Init+0xcc>)
 8000d48:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000d4c:	08000d63 	.word	0x08000d63
 8000d50:	08000d07 	.word	0x08000d07
 8000d54:	08000d63 	.word	0x08000d63
 8000d58:	08000d5d 	.word	0x08000d5d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d5c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000d60:	d1d3      	bne.n	8000d0a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d62:	2340      	movs	r3, #64	; 0x40
 8000d64:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000d66:	2001      	movs	r0, #1
 8000d68:	e7e5      	b.n	8000d36 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000d6a:	2a02      	cmp	r2, #2
 8000d6c:	d9f9      	bls.n	8000d62 <HAL_DMA_Init+0xe2>
 8000d6e:	2a03      	cmp	r2, #3
 8000d70:	e7c8      	b.n	8000d04 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	bd70      	pop	{r4, r5, r6, pc}
 8000d76:	bf00      	nop
 8000d78:	f010803f 	.word	0xf010803f

08000d7c <HAL_DMA_Start_IT>:
{
 8000d7c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000d7e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000d82:	2c01      	cmp	r4, #1
 8000d84:	d036      	beq.n	8000df4 <HAL_DMA_Start_IT+0x78>
 8000d86:	2401      	movs	r4, #1
 8000d88:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d8c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d90:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d92:	2c01      	cmp	r4, #1
 8000d94:	f04f 0500 	mov.w	r5, #0
 8000d98:	f04f 0402 	mov.w	r4, #2
 8000d9c:	d128      	bne.n	8000df0 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d9e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000da2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000da4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000da6:	6825      	ldr	r5, [r4, #0]
 8000da8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000dac:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000dae:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000db0:	6883      	ldr	r3, [r0, #8]
 8000db2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000db4:	bf0e      	itee	eq
 8000db6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000db8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000dba:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dbc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000dbe:	bf08      	it	eq
 8000dc0:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dc2:	233f      	movs	r3, #63	; 0x3f
 8000dc4:	4093      	lsls	r3, r2
 8000dc6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	f043 0316 	orr.w	r3, r3, #22
 8000dce:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000dd0:	6963      	ldr	r3, [r4, #20]
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000dd8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000dda:	b11b      	cbz	r3, 8000de4 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dec:	2000      	movs	r0, #0
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000df0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000df4:	2002      	movs	r0, #2
}
 8000df6:	bd70      	pop	{r4, r5, r6, pc}

08000df8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d003      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
 8000e06:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000e08:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000e10:	6813      	ldr	r3, [r2, #0]
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000e18:	2000      	movs	r0, #0
}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_DMA_IRQHandler>:
{
 8000e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e22:	4b5a      	ldr	r3, [pc, #360]	; (8000f8c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e24:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e26:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e28:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000e2a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	4216      	tst	r6, r2
{
 8000e32:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e34:	d00c      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e36:	6801      	ldr	r1, [r0, #0]
 8000e38:	6808      	ldr	r0, [r1, #0]
 8000e3a:	0740      	lsls	r0, r0, #29
 8000e3c:	d508      	bpl.n	8000e50 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e3e:	6808      	ldr	r0, [r1, #0]
 8000e40:	f020 0004 	bic.w	r0, r0, #4
 8000e44:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e46:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e48:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e50:	2201      	movs	r2, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	4216      	tst	r6, r2
 8000e56:	d008      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e58:	6821      	ldr	r1, [r4, #0]
 8000e5a:	6949      	ldr	r1, [r1, #20]
 8000e5c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e5e:	bf41      	itttt	mi
 8000e60:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e62:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000e64:	f042 0202 	orrmi.w	r2, r2, #2
 8000e68:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	4216      	tst	r6, r2
 8000e70:	d008      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e72:	6821      	ldr	r1, [r4, #0]
 8000e74:	6809      	ldr	r1, [r1, #0]
 8000e76:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e78:	bf41      	itttt	mi
 8000e7a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e7c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000e7e:	f042 0204 	orrmi.w	r2, r2, #4
 8000e82:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000e84:	2210      	movs	r2, #16
 8000e86:	409a      	lsls	r2, r3
 8000e88:	4216      	tst	r6, r2
 8000e8a:	d010      	beq.n	8000eae <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	0709      	lsls	r1, r1, #28
 8000e92:	d50c      	bpl.n	8000eae <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e94:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	0350      	lsls	r0, r2, #13
 8000e9a:	d535      	bpl.n	8000f08 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	0319      	lsls	r1, r3, #12
 8000ea0:	d401      	bmi.n	8000ea6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea4:	e000      	b.n	8000ea8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ea6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000ea8:	b10b      	cbz	r3, 8000eae <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000eae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	408a      	lsls	r2, r1
 8000eb4:	4216      	tst	r6, r2
 8000eb6:	d038      	beq.n	8000f2a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	06c6      	lsls	r6, r0, #27
 8000ebe:	d534      	bpl.n	8000f2a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ec0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ec2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000ec6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000eca:	d125      	bne.n	8000f18 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ecc:	f022 0216 	bic.w	r2, r2, #22
 8000ed0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000edc:	b90a      	cbnz	r2, 8000ee2 <HAL_DMA_IRQHandler+0xc6>
 8000ede:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ee0:	b11a      	cbz	r2, 8000eea <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f022 0208 	bic.w	r2, r2, #8
 8000ee8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eea:	233f      	movs	r3, #63	; 0x3f
 8000eec:	408b      	lsls	r3, r1
 8000eee:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000efc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000efe:	b10b      	cbz	r3, 8000f04 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000f00:	4620      	mov	r0, r4
 8000f02:	4798      	blx	r3
}
 8000f04:	b003      	add	sp, #12
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f0c:	bf5e      	ittt	pl
 8000f0e:	681a      	ldrpl	r2, [r3, #0]
 8000f10:	f022 0208 	bicpl.w	r2, r2, #8
 8000f14:	601a      	strpl	r2, [r3, #0]
 8000f16:	e7c4      	b.n	8000ea2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f18:	0350      	lsls	r0, r2, #13
 8000f1a:	d528      	bpl.n	8000f6e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0319      	lsls	r1, r3, #12
 8000f20:	d432      	bmi.n	8000f88 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000f24:	b10b      	cbz	r3, 8000f2a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000f26:	4620      	mov	r0, r4
 8000f28:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000f2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0e9      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000f30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f32:	07da      	lsls	r2, r3, #31
 8000f34:	d519      	bpl.n	8000f6a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000f36:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000f38:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000f3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000f3e:	6813      	ldr	r3, [r2, #0]
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f46:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f4a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000f4e:	9b01      	ldr	r3, [sp, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	429f      	cmp	r7, r3
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	d302      	bcc.n	8000f5e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	07db      	lsls	r3, r3, #31
 8000f5c:	d4f7      	bmi.n	8000f4e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000f6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f6c:	e7c7      	b.n	8000efe <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000f74:	d108      	bne.n	8000f88 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	f021 0110 	bic.w	r1, r1, #16
 8000f7c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000f80:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000f84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000f88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f8a:	e7cb      	b.n	8000f24 <HAL_DMA_IRQHandler+0x108>
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f94:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001148 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9c:	4a68      	ldr	r2, [pc, #416]	; (8001140 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800114c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000fa6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000fac:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000fb4:	45b6      	cmp	lr, r6
 8000fb6:	f040 80ae 	bne.w	8001116 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fba:	684c      	ldr	r4, [r1, #4]
 8000fbc:	f024 0710 	bic.w	r7, r4, #16
 8000fc0:	2f02      	cmp	r7, #2
 8000fc2:	d116      	bne.n	8000ff2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000fc8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fcc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fd8:	f04f 0c0f 	mov.w	ip, #15
 8000fdc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000fe0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	690d      	ldr	r5, [r1, #16]
 8000fe6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fea:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000fee:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ff2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ff8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffc:	fa05 f50a 	lsl.w	r5, r5, sl
 8001000:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001002:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001006:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001014:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001016:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101a:	d811      	bhi.n	8001040 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800101c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	68cf      	ldr	r7, [r1, #12]
 8001024:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001028:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800102c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800102e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001034:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001038:	409f      	lsls	r7, r3
 800103a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800103e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001040:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001042:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	688f      	ldr	r7, [r1, #8]
 8001046:	fa07 f70a 	lsl.w	r7, r7, sl
 800104a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800104c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104e:	00e5      	lsls	r5, r4, #3
 8001050:	d561      	bpl.n	8001116 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	f04f 0b00 	mov.w	fp, #0
 8001056:	f8cd b00c 	str.w	fp, [sp, #12]
 800105a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	4d39      	ldr	r5, [pc, #228]	; (8001144 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001064:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001068:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800106c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001070:	9703      	str	r7, [sp, #12]
 8001072:	9f03      	ldr	r7, [sp, #12]
 8001074:	f023 0703 	bic.w	r7, r3, #3
 8001078:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800107c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001080:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001084:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800108c:	f04f 0e0f 	mov.w	lr, #15
 8001090:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001094:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001096:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	d043      	beq.n	8001124 <HAL_GPIO_Init+0x194>
 800109c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	d041      	beq.n	8001128 <HAL_GPIO_Init+0x198>
 80010a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d03f      	beq.n	800112c <HAL_GPIO_Init+0x19c>
 80010ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b0:	42a8      	cmp	r0, r5
 80010b2:	d03d      	beq.n	8001130 <HAL_GPIO_Init+0x1a0>
 80010b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b8:	42a8      	cmp	r0, r5
 80010ba:	d03b      	beq.n	8001134 <HAL_GPIO_Init+0x1a4>
 80010bc:	4548      	cmp	r0, r9
 80010be:	d03b      	beq.n	8001138 <HAL_GPIO_Init+0x1a8>
 80010c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80010c4:	42a8      	cmp	r0, r5
 80010c6:	d039      	beq.n	800113c <HAL_GPIO_Init+0x1ac>
 80010c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010cc:	42a8      	cmp	r0, r5
 80010ce:	bf14      	ite	ne
 80010d0:	2508      	movne	r5, #8
 80010d2:	2507      	moveq	r5, #7
 80010d4:	fa05 f50c 	lsl.w	r5, r5, ip
 80010d8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80010de:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80010e6:	bf0c      	ite	eq
 80010e8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010ea:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80010ec:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80010ee:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80010f4:	bf0c      	ite	eq
 80010f6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010f8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80010fa:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001102:	bf0c      	ite	eq
 8001104:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001106:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001108:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800110a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800110e:	bf54      	ite	pl
 8001110:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001112:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001114:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	3301      	adds	r3, #1
 8001118:	2b10      	cmp	r3, #16
 800111a:	f47f af44 	bne.w	8000fa6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800111e:	b005      	add	sp, #20
 8001120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001124:	465d      	mov	r5, fp
 8001126:	e7d5      	b.n	80010d4 <HAL_GPIO_Init+0x144>
 8001128:	2501      	movs	r5, #1
 800112a:	e7d3      	b.n	80010d4 <HAL_GPIO_Init+0x144>
 800112c:	2502      	movs	r5, #2
 800112e:	e7d1      	b.n	80010d4 <HAL_GPIO_Init+0x144>
 8001130:	2503      	movs	r5, #3
 8001132:	e7cf      	b.n	80010d4 <HAL_GPIO_Init+0x144>
 8001134:	2504      	movs	r5, #4
 8001136:	e7cd      	b.n	80010d4 <HAL_GPIO_Init+0x144>
 8001138:	2505      	movs	r5, #5
 800113a:	e7cb      	b.n	80010d4 <HAL_GPIO_Init+0x144>
 800113c:	2506      	movs	r5, #6
 800113e:	e7c9      	b.n	80010d4 <HAL_GPIO_Init+0x144>
 8001140:	40013c00 	.word	0x40013c00
 8001144:	40020000 	.word	0x40020000
 8001148:	40023800 	.word	0x40023800
 800114c:	40021400 	.word	0x40021400

08001150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001154:	4604      	mov	r4, r0
 8001156:	b918      	cbnz	r0, 8001160 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800115a:	b002      	add	sp, #8
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001160:	6803      	ldr	r3, [r0, #0]
 8001162:	07dd      	lsls	r5, r3, #31
 8001164:	d410      	bmi.n	8001188 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	0798      	lsls	r0, r3, #30
 800116a:	d458      	bmi.n	800121e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	071a      	lsls	r2, r3, #28
 8001170:	f100 809a 	bmi.w	80012a8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	075b      	lsls	r3, r3, #29
 8001178:	f100 80b8 	bmi.w	80012ec <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117c:	69a2      	ldr	r2, [r4, #24]
 800117e:	2a00      	cmp	r2, #0
 8001180:	f040 8119 	bne.w	80013b6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001184:	2000      	movs	r0, #0
 8001186:	e7e8      	b.n	800115a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001188:	4ba6      	ldr	r3, [pc, #664]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	f002 020c 	and.w	r2, r2, #12
 8001190:	2a04      	cmp	r2, #4
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119a:	2a08      	cmp	r2, #8
 800119c:	d10a      	bne.n	80011b4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	0259      	lsls	r1, r3, #9
 80011a2:	d507      	bpl.n	80011b4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b9f      	ldr	r3, [pc, #636]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	039a      	lsls	r2, r3, #14
 80011aa:	d5dc      	bpl.n	8001166 <HAL_RCC_OscConfig+0x16>
 80011ac:	6863      	ldr	r3, [r4, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1d9      	bne.n	8001166 <HAL_RCC_OscConfig+0x16>
 80011b2:	e7d1      	b.n	8001158 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	4d9b      	ldr	r5, [pc, #620]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d111      	bne.n	80011e2 <HAL_RCC_OscConfig+0x92>
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa25 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	4d96      	ldr	r5, [pc, #600]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	682b      	ldr	r3, [r5, #0]
 80011d0:	039b      	lsls	r3, r3, #14
 80011d2:	d4c8      	bmi.n	8001166 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fa1e 	bl	8000614 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2864      	cmp	r0, #100	; 0x64
 80011dc:	d9f7      	bls.n	80011ce <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
 80011e0:	e7bb      	b.n	800115a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e6:	d104      	bne.n	80011f2 <HAL_RCC_OscConfig+0xa2>
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ee:	602b      	str	r3, [r5, #0]
 80011f0:	e7e5      	b.n	80011be <HAL_RCC_OscConfig+0x6e>
 80011f2:	682a      	ldr	r2, [r5, #0]
 80011f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011f8:	602a      	str	r2, [r5, #0]
 80011fa:	682a      	ldr	r2, [r5, #0]
 80011fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001200:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1df      	bne.n	80011c6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001206:	f7ff fa05 	bl	8000614 <HAL_GetTick>
 800120a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	039f      	lsls	r7, r3, #14
 8001210:	d5a9      	bpl.n	8001166 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001212:	f7ff f9ff 	bl	8000614 <HAL_GetTick>
 8001216:	1b80      	subs	r0, r0, r6
 8001218:	2864      	cmp	r0, #100	; 0x64
 800121a:	d9f7      	bls.n	800120c <HAL_RCC_OscConfig+0xbc>
 800121c:	e7df      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121e:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	f012 0f0c 	tst.w	r2, #12
 8001226:	d007      	beq.n	8001238 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122e:	2a08      	cmp	r2, #8
 8001230:	d111      	bne.n	8001256 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	025e      	lsls	r6, r3, #9
 8001236:	d40e      	bmi.n	8001256 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001238:	4b7a      	ldr	r3, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	0795      	lsls	r5, r2, #30
 800123e:	d502      	bpl.n	8001246 <HAL_RCC_OscConfig+0xf6>
 8001240:	68e2      	ldr	r2, [r4, #12]
 8001242:	2a01      	cmp	r2, #1
 8001244:	d188      	bne.n	8001158 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	6921      	ldr	r1, [r4, #16]
 800124a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800124e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001252:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001254:	e78a      	b.n	800116c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001256:	68e2      	ldr	r2, [r4, #12]
 8001258:	4b73      	ldr	r3, [pc, #460]	; (8001428 <HAL_RCC_OscConfig+0x2d8>)
 800125a:	b1b2      	cbz	r2, 800128a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001260:	f7ff f9d8 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4d6f      	ldr	r5, [pc, #444]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001266:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	0798      	lsls	r0, r3, #30
 800126c:	d507      	bpl.n	800127e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	6922      	ldr	r2, [r4, #16]
 8001272:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001276:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800127a:	602b      	str	r3, [r5, #0]
 800127c:	e776      	b.n	800116c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff f9c9 	bl	8000614 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	2802      	cmp	r0, #2
 8001286:	d9ef      	bls.n	8001268 <HAL_RCC_OscConfig+0x118>
 8001288:	e7a9      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800128a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800128c:	f7ff f9c2 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001290:	4d64      	ldr	r5, [pc, #400]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001292:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	0799      	lsls	r1, r3, #30
 8001298:	f57f af68 	bpl.w	800116c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff f9ba 	bl	8000614 <HAL_GetTick>
 80012a0:	1b80      	subs	r0, r0, r6
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d9f6      	bls.n	8001294 <HAL_RCC_OscConfig+0x144>
 80012a6:	e79a      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012a8:	6962      	ldr	r2, [r4, #20]
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_RCC_OscConfig+0x2dc>)
 80012ac:	b17a      	cbz	r2, 80012ce <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012b2:	f7ff f9af 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4d5b      	ldr	r5, [pc, #364]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012bc:	079f      	lsls	r7, r3, #30
 80012be:	f53f af59 	bmi.w	8001174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff f9a7 	bl	8000614 <HAL_GetTick>
 80012c6:	1b80      	subs	r0, r0, r6
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d9f6      	bls.n	80012ba <HAL_RCC_OscConfig+0x16a>
 80012cc:	e787      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012d0:	f7ff f9a0 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	4d53      	ldr	r5, [pc, #332]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012da:	0798      	lsls	r0, r3, #30
 80012dc:	f57f af4a 	bpl.w	8001174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff f998 	bl	8000614 <HAL_GetTick>
 80012e4:	1b80      	subs	r0, r0, r6
 80012e6:	2802      	cmp	r0, #2
 80012e8:	d9f6      	bls.n	80012d8 <HAL_RCC_OscConfig+0x188>
 80012ea:	e778      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 80012ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80012f4:	d128      	bne.n	8001348 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800130a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4d48      	ldr	r5, [pc, #288]	; (8001430 <HAL_RCC_OscConfig+0x2e0>)
 800130e:	682b      	ldr	r3, [r5, #0]
 8001310:	05d9      	lsls	r1, r3, #23
 8001312:	d51b      	bpl.n	800134c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001314:	68a3      	ldr	r3, [r4, #8]
 8001316:	4d43      	ldr	r5, [pc, #268]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 8001318:	2b01      	cmp	r3, #1
 800131a:	d127      	bne.n	800136c <HAL_RCC_OscConfig+0x21c>
 800131c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001324:	f7ff f976 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	4d3e      	ldr	r5, [pc, #248]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800132a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001332:	079b      	lsls	r3, r3, #30
 8001334:	d539      	bpl.n	80013aa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001336:	2e00      	cmp	r6, #0
 8001338:	f43f af20 	beq.w	800117c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800133c:	4a39      	ldr	r2, [pc, #228]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 800133e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	e719      	b.n	800117c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001348:	2600      	movs	r6, #0
 800134a:	e7df      	b.n	800130c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001352:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001354:	f7ff f95e 	bl	8000614 <HAL_GetTick>
 8001358:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	05da      	lsls	r2, r3, #23
 800135e:	d4d9      	bmi.n	8001314 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001360:	f7ff f958 	bl	8000614 <HAL_GetTick>
 8001364:	1bc0      	subs	r0, r0, r7
 8001366:	2802      	cmp	r0, #2
 8001368:	d9f7      	bls.n	800135a <HAL_RCC_OscConfig+0x20a>
 800136a:	e738      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	2b05      	cmp	r3, #5
 800136e:	d104      	bne.n	800137a <HAL_RCC_OscConfig+0x22a>
 8001370:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	672b      	str	r3, [r5, #112]	; 0x70
 8001378:	e7d0      	b.n	800131c <HAL_RCC_OscConfig+0x1cc>
 800137a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	672a      	str	r2, [r5, #112]	; 0x70
 8001382:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001384:	f022 0204 	bic.w	r2, r2, #4
 8001388:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ca      	bne.n	8001324 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800138e:	f7ff f941 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001396:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800139a:	0798      	lsls	r0, r3, #30
 800139c:	d5cb      	bpl.n	8001336 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff f939 	bl	8000614 <HAL_GetTick>
 80013a2:	1bc0      	subs	r0, r0, r7
 80013a4:	4540      	cmp	r0, r8
 80013a6:	d9f7      	bls.n	8001398 <HAL_RCC_OscConfig+0x248>
 80013a8:	e719      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff f933 	bl	8000614 <HAL_GetTick>
 80013ae:	1bc0      	subs	r0, r0, r7
 80013b0:	4540      	cmp	r0, r8
 80013b2:	d9bd      	bls.n	8001330 <HAL_RCC_OscConfig+0x1e0>
 80013b4:	e713      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b6:	4d1b      	ldr	r5, [pc, #108]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
 80013b8:	68ab      	ldr	r3, [r5, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b08      	cmp	r3, #8
 80013c0:	f43f aeca 	beq.w	8001158 <HAL_RCC_OscConfig+0x8>
 80013c4:	4e1b      	ldr	r6, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x2e4>)
 80013c6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013ca:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013cc:	d134      	bne.n	8001438 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80013ce:	f7ff f921 	bl	8000614 <HAL_GetTick>
 80013d2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	0199      	lsls	r1, r3, #6
 80013d8:	d41e      	bmi.n	8001418 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013da:	6a22      	ldr	r2, [r4, #32]
 80013dc:	69e3      	ldr	r3, [r4, #28]
 80013de:	4313      	orrs	r3, r2
 80013e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4c0d      	ldr	r4, [pc, #52]	; (8001424 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f0:	0852      	lsrs	r2, r2, #1
 80013f2:	3a01      	subs	r2, #1
 80013f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013f8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013fa:	2301      	movs	r3, #1
 80013fc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013fe:	f7ff f909 	bl	8000614 <HAL_GetTick>
 8001402:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	019a      	lsls	r2, r3, #6
 8001408:	f53f aebc 	bmi.w	8001184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff f902 	bl	8000614 <HAL_GetTick>
 8001410:	1b40      	subs	r0, r0, r5
 8001412:	2802      	cmp	r0, #2
 8001414:	d9f6      	bls.n	8001404 <HAL_RCC_OscConfig+0x2b4>
 8001416:	e6e2      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff f8fc 	bl	8000614 <HAL_GetTick>
 800141c:	1bc0      	subs	r0, r0, r7
 800141e:	2802      	cmp	r0, #2
 8001420:	d9d8      	bls.n	80013d4 <HAL_RCC_OscConfig+0x284>
 8001422:	e6dc      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
 8001424:	40023800 	.word	0x40023800
 8001428:	42470000 	.word	0x42470000
 800142c:	42470e80 	.word	0x42470e80
 8001430:	40007000 	.word	0x40007000
 8001434:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001438:	f7ff f8ec 	bl	8000614 <HAL_GetTick>
 800143c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	f57f ae9f 	bpl.w	8001184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff f8e5 	bl	8000614 <HAL_GetTick>
 800144a:	1b00      	subs	r0, r0, r4
 800144c:	2802      	cmp	r0, #2
 800144e:	d9f6      	bls.n	800143e <HAL_RCC_OscConfig+0x2ee>
 8001450:	e6c5      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
 8001452:	bf00      	nop

08001454 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001454:	4913      	ldr	r1, [pc, #76]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001456:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001458:	688b      	ldr	r3, [r1, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d003      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x16>
 8001462:	2b08      	cmp	r3, #8
 8001464:	d003      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001466:	4810      	ldr	r0, [pc, #64]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001468:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <HAL_RCC_GetSysClockFreq+0x58>)
 800146c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001470:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001472:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001474:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001478:	bf14      	ite	ne
 800147a:	480c      	ldrne	r0, [pc, #48]	; (80014ac <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147c:	480a      	ldreq	r0, [pc, #40]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001482:	bf18      	it	ne
 8001484:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001486:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148a:	fba1 0100 	umull	r0, r1, r1, r0
 800148e:	f7fe feef 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800149a:	3301      	adds	r3, #1
 800149c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800149e:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a2:	bd08      	pop	{r3, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	00f42400 	.word	0x00f42400
 80014ac:	017d7840 	.word	0x017d7840

080014b0 <HAL_RCC_ClockConfig>:
{
 80014b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014b6:	4604      	mov	r4, r0
 80014b8:	b910      	cbnz	r0, 80014c0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014ba:	2001      	movs	r0, #1
 80014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c0:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HAL_RCC_ClockConfig+0x124>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f002 020f 	and.w	r2, r2, #15
 80014c8:	428a      	cmp	r2, r1
 80014ca:	d328      	bcc.n	800151e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014cc:	6821      	ldr	r1, [r4, #0]
 80014ce:	078f      	lsls	r7, r1, #30
 80014d0:	d42d      	bmi.n	800152e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d2:	07c8      	lsls	r0, r1, #31
 80014d4:	d440      	bmi.n	8001558 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d6:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <HAL_RCC_ClockConfig+0x124>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f002 020f 	and.w	r2, r2, #15
 80014de:	4295      	cmp	r5, r2
 80014e0:	d366      	bcc.n	80015b0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e2:	6822      	ldr	r2, [r4, #0]
 80014e4:	0751      	lsls	r1, r2, #29
 80014e6:	d46c      	bmi.n	80015c2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	0713      	lsls	r3, r2, #28
 80014ea:	d507      	bpl.n	80014fc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ec:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <HAL_RCC_ClockConfig+0x128>)
 80014ee:	6921      	ldr	r1, [r4, #16]
 80014f0:	6893      	ldr	r3, [r2, #8]
 80014f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014fa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014fc:	f7ff ffaa 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_RCC_ClockConfig+0x128>)
 8001502:	4a36      	ldr	r2, [pc, #216]	; (80015dc <HAL_RCC_ClockConfig+0x12c>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	40d8      	lsrs	r0, r3
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_ClockConfig+0x130>)
 8001510:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff f834 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8001518:	2000      	movs	r0, #0
 800151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4299      	cmp	r1, r3
 800152a:	d1c6      	bne.n	80014ba <HAL_RCC_ClockConfig+0xa>
 800152c:	e7ce      	b.n	80014cc <HAL_RCC_ClockConfig+0x1c>
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001534:	bf1e      	ittt	ne
 8001536:	689a      	ldrne	r2, [r3, #8]
 8001538:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800153c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	bf42      	ittt	mi
 8001542:	689a      	ldrmi	r2, [r3, #8]
 8001544:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001548:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	68a0      	ldr	r0, [r4, #8]
 800154e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001552:	4302      	orrs	r2, r0
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	e7bc      	b.n	80014d2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001558:	6862      	ldr	r2, [r4, #4]
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_RCC_ClockConfig+0x128>)
 800155c:	2a01      	cmp	r2, #1
 800155e:	d11d      	bne.n	800159c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	d0a8      	beq.n	80014ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001568:	4e1b      	ldr	r6, [pc, #108]	; (80015d8 <HAL_RCC_ClockConfig+0x128>)
 800156a:	68b3      	ldr	r3, [r6, #8]
 800156c:	f023 0303 	bic.w	r3, r3, #3
 8001570:	4313      	orrs	r3, r2
 8001572:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001574:	f7ff f84e 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800157c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	68b3      	ldr	r3, [r6, #8]
 8001580:	6862      	ldr	r2, [r4, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800158a:	d0a4      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff f842 	bl	8000614 <HAL_GetTick>
 8001590:	1bc0      	subs	r0, r0, r7
 8001592:	4540      	cmp	r0, r8
 8001594:	d9f3      	bls.n	800157e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001596:	2003      	movs	r0, #3
}
 8001598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159c:	1e91      	subs	r1, r2, #2
 800159e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a2:	d802      	bhi.n	80015aa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015a8:	e7dd      	b.n	8001566 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	f013 0f02 	tst.w	r3, #2
 80015ae:	e7da      	b.n	8001566 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b0:	b2ea      	uxtb	r2, r5
 80015b2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	429d      	cmp	r5, r3
 80015bc:	f47f af7d 	bne.w	80014ba <HAL_RCC_ClockConfig+0xa>
 80015c0:	e78f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c2:	4905      	ldr	r1, [pc, #20]	; (80015d8 <HAL_RCC_ClockConfig+0x128>)
 80015c4:	68e0      	ldr	r0, [r4, #12]
 80015c6:	688b      	ldr	r3, [r1, #8]
 80015c8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015cc:	4303      	orrs	r3, r0
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e78a      	b.n	80014e8 <HAL_RCC_ClockConfig+0x38>
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	08002f3c 	.word	0x08002f3c
 80015e0:	20000008 	.word	0x20000008

080015e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015f2:	6810      	ldr	r0, [r2, #0]
}
 80015f4:	40d8      	lsrs	r0, r3
 80015f6:	4770      	bx	lr
 80015f8:	40023800 	.word	0x40023800
 80015fc:	08002f4c 	.word	0x08002f4c
 8001600:	20000008 	.word	0x20000008

08001604 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	4a03      	ldr	r2, [pc, #12]	; (8001620 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001612:	6810      	ldr	r0, [r2, #0]
}
 8001614:	40d8      	lsrs	r0, r3
 8001616:	4770      	bx	lr
 8001618:	40023800 	.word	0x40023800
 800161c:	08002f4c 	.word	0x08002f4c
 8001620:	20000008 	.word	0x20000008

08001624 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001624:	6803      	ldr	r3, [r0, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800162c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001636:	2320      	movs	r3, #32
 8001638:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800163c:	4770      	bx	lr
	...

08001640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001644:	6806      	ldr	r6, [r0, #0]
 8001646:	68c2      	ldr	r2, [r0, #12]
 8001648:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800164a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800164c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001650:	4313      	orrs	r3, r2
 8001652:	6133      	str	r3, [r6, #16]
{
 8001654:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001656:	6883      	ldr	r3, [r0, #8]
 8001658:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800165a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800165c:	4303      	orrs	r3, r0
 800165e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001660:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001664:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001666:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800166a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 800166c:	4313      	orrs	r3, r2
 800166e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001670:	6973      	ldr	r3, [r6, #20]
 8001672:	69a2      	ldr	r2, [r4, #24]
 8001674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001678:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800167a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800167e:	6173      	str	r3, [r6, #20]
 8001680:	4b7a      	ldr	r3, [pc, #488]	; (800186c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001682:	d17c      	bne.n	800177e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001684:	429e      	cmp	r6, r3
 8001686:	d003      	beq.n	8001690 <UART_SetConfig+0x50>
 8001688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800168c:	429e      	cmp	r6, r3
 800168e:	d144      	bne.n	800171a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001690:	f7ff ffb8 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 8001694:	2519      	movs	r5, #25
 8001696:	fb05 f300 	mul.w	r3, r5, r0
 800169a:	6860      	ldr	r0, [r4, #4]
 800169c:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016a0:	0040      	lsls	r0, r0, #1
 80016a2:	fbb3 f3f0 	udiv	r3, r3, r0
 80016a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80016aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016ae:	f7ff ffa9 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 80016b2:	6863      	ldr	r3, [r4, #4]
 80016b4:	4368      	muls	r0, r5
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fbb0 f7f3 	udiv	r7, r0, r3
 80016bc:	f7ff ffa2 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 80016c0:	6863      	ldr	r3, [r4, #4]
 80016c2:	4368      	muls	r0, r5
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80016ce:	fb09 7313 	mls	r3, r9, r3, r7
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	3332      	adds	r3, #50	; 0x32
 80016d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80016e0:	f7ff ff90 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 80016e4:	6862      	ldr	r2, [r4, #4]
 80016e6:	4368      	muls	r0, r5
 80016e8:	0052      	lsls	r2, r2, #1
 80016ea:	fbb0 faf2 	udiv	sl, r0, r2
 80016ee:	f7ff ff89 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016f2:	6863      	ldr	r3, [r4, #4]
 80016f4:	4368      	muls	r0, r5
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001700:	fb09 a313 	mls	r3, r9, r3, sl
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	3332      	adds	r3, #50	; 0x32
 8001708:	fbb3 f3f9 	udiv	r3, r3, r9
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001712:	443b      	add	r3, r7
 8001714:	60b3      	str	r3, [r6, #8]
 8001716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800171a:	f7ff ff63 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800171e:	2519      	movs	r5, #25
 8001720:	fb05 f300 	mul.w	r3, r5, r0
 8001724:	6860      	ldr	r0, [r4, #4]
 8001726:	f04f 0964 	mov.w	r9, #100	; 0x64
 800172a:	0040      	lsls	r0, r0, #1
 800172c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001730:	fbb3 f3f9 	udiv	r3, r3, r9
 8001734:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001738:	f7ff ff54 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800173c:	6863      	ldr	r3, [r4, #4]
 800173e:	4368      	muls	r0, r5
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fbb0 f7f3 	udiv	r7, r0, r3
 8001746:	f7ff ff4d 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800174a:	6863      	ldr	r3, [r4, #4]
 800174c:	4368      	muls	r0, r5
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fbb0 f3f3 	udiv	r3, r0, r3
 8001754:	fbb3 f3f9 	udiv	r3, r3, r9
 8001758:	fb09 7313 	mls	r3, r9, r3, r7
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	3332      	adds	r3, #50	; 0x32
 8001760:	fbb3 f3f9 	udiv	r3, r3, r9
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800176a:	f7ff ff3b 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800176e:	6862      	ldr	r2, [r4, #4]
 8001770:	4368      	muls	r0, r5
 8001772:	0052      	lsls	r2, r2, #1
 8001774:	fbb0 faf2 	udiv	sl, r0, r2
 8001778:	f7ff ff34 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800177c:	e7b9      	b.n	80016f2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800177e:	429e      	cmp	r6, r3
 8001780:	d002      	beq.n	8001788 <UART_SetConfig+0x148>
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <UART_SetConfig+0x230>)
 8001784:	429e      	cmp	r6, r3
 8001786:	d140      	bne.n	800180a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001788:	f7ff ff3c 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 800178c:	6867      	ldr	r7, [r4, #4]
 800178e:	2519      	movs	r5, #25
 8001790:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001794:	fb05 f300 	mul.w	r3, r5, r0
 8001798:	00bf      	lsls	r7, r7, #2
 800179a:	fbb3 f3f7 	udiv	r3, r3, r7
 800179e:	fbb3 f3f9 	udiv	r3, r3, r9
 80017a2:	011f      	lsls	r7, r3, #4
 80017a4:	f7ff ff2e 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 80017a8:	6863      	ldr	r3, [r4, #4]
 80017aa:	4368      	muls	r0, r5
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	fbb0 f8f3 	udiv	r8, r0, r3
 80017b2:	f7ff ff27 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 80017b6:	6863      	ldr	r3, [r4, #4]
 80017b8:	4368      	muls	r0, r5
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80017c4:	fb09 8313 	mls	r3, r9, r3, r8
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	3332      	adds	r3, #50	; 0x32
 80017cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80017d0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80017d4:	f7ff ff16 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 80017d8:	6862      	ldr	r2, [r4, #4]
 80017da:	4368      	muls	r0, r5
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	fbb0 faf2 	udiv	sl, r0, r2
 80017e2:	f7ff ff0f 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017e6:	6863      	ldr	r3, [r4, #4]
 80017e8:	4368      	muls	r0, r5
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80017f4:	fb09 a313 	mls	r3, r9, r3, sl
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	3332      	adds	r3, #50	; 0x32
 80017fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	ea43 0308 	orr.w	r3, r3, r8
 8001808:	e783      	b.n	8001712 <UART_SetConfig+0xd2>
 800180a:	f7ff feeb 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800180e:	6867      	ldr	r7, [r4, #4]
 8001810:	2519      	movs	r5, #25
 8001812:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001816:	fb05 f300 	mul.w	r3, r5, r0
 800181a:	00bf      	lsls	r7, r7, #2
 800181c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001820:	fbb3 f3f9 	udiv	r3, r3, r9
 8001824:	011f      	lsls	r7, r3, #4
 8001826:	f7ff fedd 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800182a:	6863      	ldr	r3, [r4, #4]
 800182c:	4368      	muls	r0, r5
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fbb0 f8f3 	udiv	r8, r0, r3
 8001834:	f7ff fed6 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8001838:	6863      	ldr	r3, [r4, #4]
 800183a:	4368      	muls	r0, r5
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001842:	fbb3 f3f9 	udiv	r3, r3, r9
 8001846:	fb09 8313 	mls	r3, r9, r3, r8
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	3332      	adds	r3, #50	; 0x32
 800184e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001852:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001856:	f7ff fec5 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 800185a:	6862      	ldr	r2, [r4, #4]
 800185c:	4368      	muls	r0, r5
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	fbb0 faf2 	udiv	sl, r0, r2
 8001864:	f7ff febe 	bl	80015e4 <HAL_RCC_GetPCLK1Freq>
 8001868:	e7bd      	b.n	80017e6 <UART_SetConfig+0x1a6>
 800186a:	bf00      	nop
 800186c:	40011000 	.word	0x40011000
 8001870:	40011400 	.word	0x40011400

08001874 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	4604      	mov	r4, r0
 8001878:	460e      	mov	r6, r1
 800187a:	4617      	mov	r7, r2
 800187c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800187e:	6821      	ldr	r1, [r4, #0]
 8001880:	680b      	ldr	r3, [r1, #0]
 8001882:	ea36 0303 	bics.w	r3, r6, r3
 8001886:	d101      	bne.n	800188c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001888:	2000      	movs	r0, #0
}
 800188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800188c:	1c6b      	adds	r3, r5, #1
 800188e:	d0f7      	beq.n	8001880 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001890:	b995      	cbnz	r5, 80018b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800189a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80018a4:	2320      	movs	r3, #32
 80018a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80018ae:	2300      	movs	r3, #0
 80018b0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80018b4:	2003      	movs	r0, #3
 80018b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018b8:	f7fe feac 	bl	8000614 <HAL_GetTick>
 80018bc:	1bc0      	subs	r0, r0, r7
 80018be:	4285      	cmp	r5, r0
 80018c0:	d2dd      	bcs.n	800187e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80018c2:	e7e6      	b.n	8001892 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080018c4 <HAL_UART_Init>:
{
 80018c4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80018c6:	4604      	mov	r4, r0
 80018c8:	b340      	cbz	r0, 800191c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80018ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018d2:	b91b      	cbnz	r3, 80018dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80018d8:	f000 fb8a 	bl	8001ff0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80018dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80018de:	2324      	movs	r3, #36	; 0x24
 80018e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80018e4:	68d3      	ldr	r3, [r2, #12]
 80018e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018ea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff fea7 	bl	8001640 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001902:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800190a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800190e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001910:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001912:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001916:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800191a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
}
 800191e:	bd10      	pop	{r4, pc}

08001920 <HAL_UART_Transmit>:
{
 8001920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001924:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001926:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800192a:	2b20      	cmp	r3, #32
{
 800192c:	4604      	mov	r4, r0
 800192e:	460d      	mov	r5, r1
 8001930:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001932:	d14f      	bne.n	80019d4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001934:	2900      	cmp	r1, #0
 8001936:	d04a      	beq.n	80019ce <HAL_UART_Transmit+0xae>
 8001938:	2a00      	cmp	r2, #0
 800193a:	d048      	beq.n	80019ce <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800193c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001940:	2b01      	cmp	r3, #1
 8001942:	d047      	beq.n	80019d4 <HAL_UART_Transmit+0xb4>
 8001944:	2301      	movs	r3, #1
 8001946:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800194e:	2321      	movs	r3, #33	; 0x21
 8001950:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001954:	f7fe fe5e 	bl	8000614 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001958:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800195c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800195e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001962:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001964:	b29b      	uxth	r3, r3
 8001966:	b96b      	cbnz	r3, 8001984 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4632      	mov	r2, r6
 800196c:	2140      	movs	r1, #64	; 0x40
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff ff80 	bl	8001874 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001974:	b9b0      	cbnz	r0, 80019a4 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001976:	2320      	movs	r3, #32
 8001978:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800197c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001984:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001986:	3b01      	subs	r3, #1
 8001988:	b29b      	uxth	r3, r3
 800198a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001992:	4632      	mov	r2, r6
 8001994:	463b      	mov	r3, r7
 8001996:	f04f 0180 	mov.w	r1, #128	; 0x80
 800199a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800199c:	d10e      	bne.n	80019bc <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800199e:	f7ff ff69 	bl	8001874 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019a2:	b110      	cbz	r0, 80019aa <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80019a4:	2003      	movs	r0, #3
 80019a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019aa:	882b      	ldrh	r3, [r5, #0]
 80019ac:	6822      	ldr	r2, [r4, #0]
 80019ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019b4:	6923      	ldr	r3, [r4, #16]
 80019b6:	b943      	cbnz	r3, 80019ca <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80019b8:	3502      	adds	r5, #2
 80019ba:	e7d2      	b.n	8001962 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019bc:	f7ff ff5a 	bl	8001874 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d1ef      	bne.n	80019a4 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	782a      	ldrb	r2, [r5, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	3501      	adds	r5, #1
 80019cc:	e7c9      	b.n	8001962 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80019ce:	2001      	movs	r0, #1
 80019d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80019d4:	2002      	movs	r0, #2
}
 80019d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019da <HAL_UART_TxCpltCallback>:
 80019da:	4770      	bx	lr

080019dc <HAL_UART_RxCpltCallback>:
 80019dc:	4770      	bx	lr

080019de <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019de:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80019e2:	2b22      	cmp	r3, #34	; 0x22
{
 80019e4:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019e6:	d136      	bne.n	8001a56 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019e8:	6883      	ldr	r3, [r0, #8]
 80019ea:	6901      	ldr	r1, [r0, #16]
 80019ec:	6802      	ldr	r2, [r0, #0]
 80019ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019f4:	d123      	bne.n	8001a3e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019f6:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80019f8:	b9e9      	cbnz	r1, 8001a36 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019fe:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001a02:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001a04:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001a06:	3c01      	subs	r4, #1
 8001a08:	b2a4      	uxth	r4, r4
 8001a0a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001a0c:	b98c      	cbnz	r4, 8001a32 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	f022 0220 	bic.w	r2, r2, #32
 8001a16:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a1e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001a2e:	f7ff ffd5 	bl	80019dc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001a32:	2000      	movs	r0, #0
}
 8001a34:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f823 2b01 	strh.w	r2, [r3], #1
 8001a3c:	e7e1      	b.n	8001a02 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a3e:	b921      	cbnz	r1, 8001a4a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a40:	1c59      	adds	r1, r3, #1
 8001a42:	6852      	ldr	r2, [r2, #4]
 8001a44:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e7dc      	b.n	8001a04 <UART_Receive_IT+0x26>
 8001a4a:	6852      	ldr	r2, [r2, #4]
 8001a4c:	1c59      	adds	r1, r3, #1
 8001a4e:	6281      	str	r1, [r0, #40]	; 0x28
 8001a50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a54:	e7f7      	b.n	8001a46 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001a56:	2002      	movs	r0, #2
 8001a58:	bd10      	pop	{r4, pc}

08001a5a <HAL_UART_ErrorCallback>:
 8001a5a:	4770      	bx	lr

08001a5c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a60:	68d9      	ldr	r1, [r3, #12]
{
 8001a62:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001a64:	0716      	lsls	r6, r2, #28
{
 8001a66:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a68:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001a6a:	d107      	bne.n	8001a7c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a6c:	0696      	lsls	r6, r2, #26
 8001a6e:	d55a      	bpl.n	8001b26 <HAL_UART_IRQHandler+0xca>
 8001a70:	068d      	lsls	r5, r1, #26
 8001a72:	d558      	bpl.n	8001b26 <HAL_UART_IRQHandler+0xca>
}
 8001a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001a78:	f7ff bfb1 	b.w	80019de <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a7c:	f015 0501 	ands.w	r5, r5, #1
 8001a80:	d102      	bne.n	8001a88 <HAL_UART_IRQHandler+0x2c>
 8001a82:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001a86:	d04e      	beq.n	8001b26 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a88:	07d3      	lsls	r3, r2, #31
 8001a8a:	d505      	bpl.n	8001a98 <HAL_UART_IRQHandler+0x3c>
 8001a8c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a8e:	bf42      	ittt	mi
 8001a90:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001a92:	f043 0301 	orrmi.w	r3, r3, #1
 8001a96:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a98:	0750      	lsls	r0, r2, #29
 8001a9a:	d504      	bpl.n	8001aa6 <HAL_UART_IRQHandler+0x4a>
 8001a9c:	b11d      	cbz	r5, 8001aa6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aa6:	0793      	lsls	r3, r2, #30
 8001aa8:	d504      	bpl.n	8001ab4 <HAL_UART_IRQHandler+0x58>
 8001aaa:	b11d      	cbz	r5, 8001ab4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ab4:	0716      	lsls	r6, r2, #28
 8001ab6:	d504      	bpl.n	8001ac2 <HAL_UART_IRQHandler+0x66>
 8001ab8:	b11d      	cbz	r5, 8001ac2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001aba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d066      	beq.n	8001b96 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ac8:	0695      	lsls	r5, r2, #26
 8001aca:	d504      	bpl.n	8001ad6 <HAL_UART_IRQHandler+0x7a>
 8001acc:	0688      	lsls	r0, r1, #26
 8001ace:	d502      	bpl.n	8001ad6 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff ff84 	bl	80019de <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ada:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001adc:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001ade:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ae0:	d402      	bmi.n	8001ae8 <HAL_UART_IRQHandler+0x8c>
 8001ae2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001ae6:	d01a      	beq.n	8001b1e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001ae8:	f7ff fd9c 	bl	8001624 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	0652      	lsls	r2, r2, #25
 8001af2:	d510      	bpl.n	8001b16 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001af4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001af6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afc:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001afe:	b150      	cbz	r0, 8001b16 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_UART_IRQHandler+0x13c>)
 8001b02:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b04:	f7ff f978 	bl	8000df8 <HAL_DMA_Abort_IT>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d044      	beq.n	8001b96 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b14:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001b16:	4620      	mov	r0, r4
 8001b18:	f7ff ff9f 	bl	8001a5a <HAL_UART_ErrorCallback>
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b1e:	f7ff ff9c 	bl	8001a5a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b22:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b26:	0616      	lsls	r6, r2, #24
 8001b28:	d527      	bpl.n	8001b7a <HAL_UART_IRQHandler+0x11e>
 8001b2a:	060d      	lsls	r5, r1, #24
 8001b2c:	d525      	bpl.n	8001b7a <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b2e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001b32:	2a21      	cmp	r2, #33	; 0x21
 8001b34:	d12f      	bne.n	8001b96 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b36:	68a2      	ldr	r2, [r4, #8]
 8001b38:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001b3c:	6a22      	ldr	r2, [r4, #32]
 8001b3e:	d117      	bne.n	8001b70 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001b40:	8811      	ldrh	r1, [r2, #0]
 8001b42:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001b46:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b48:	6921      	ldr	r1, [r4, #16]
 8001b4a:	b979      	cbnz	r1, 8001b6c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001b4c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001b4e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001b50:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001b52:	3a01      	subs	r2, #1
 8001b54:	b292      	uxth	r2, r2
 8001b56:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001b58:	b9ea      	cbnz	r2, 8001b96 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b60:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001b6c:	3201      	adds	r2, #1
 8001b6e:	e7ee      	b.n	8001b4e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b70:	1c51      	adds	r1, r2, #1
 8001b72:	6221      	str	r1, [r4, #32]
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	e7ea      	b.n	8001b50 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b7a:	0650      	lsls	r0, r2, #25
 8001b7c:	d50b      	bpl.n	8001b96 <HAL_UART_IRQHandler+0x13a>
 8001b7e:	064a      	lsls	r2, r1, #25
 8001b80:	d509      	bpl.n	8001b96 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b88:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff ff22 	bl	80019da <HAL_UART_TxCpltCallback>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	08001b9d 	.word	0x08001b9d

08001b9c <UART_DMAAbortOnError>:
{
 8001b9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ba4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001ba6:	f7ff ff58 	bl	8001a5a <HAL_UART_ErrorCallback>
 8001baa:	bd08      	pop	{r3, pc}

08001bac <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bae:	2210      	movs	r2, #16
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4668      	mov	r0, sp
 8001bb4:	f000 fab0 	bl	8002118 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001bb8:	4812      	ldr	r0, [pc, #72]	; (8001c04 <MX_ADC3_Init+0x58>)
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_ADC3_Init+0x5c>)
 8001bbc:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ENABLE;
 8001bbe:	2401      	movs	r4, #1
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bc0:	2300      	movs	r3, #0
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <MX_ADC3_Init+0x60>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bc4:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc6:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001bc8:	6104      	str	r4, [r0, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001bca:	7604      	strb	r4, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001bcc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bd0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bd2:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd4:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001bd6:	61c4      	str	r4, [r0, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001bd8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bdc:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001bde:	f7fe fd1f 	bl	8000620 <HAL_ADC_Init>
 8001be2:	b108      	cbz	r0, 8001be8 <MX_ADC3_Init+0x3c>
  {
    Error_Handler();
 8001be4:	f000 f93c 	bl	8001e60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001be8:	230e      	movs	r3, #14
  sConfig.Rank = 1;
 8001bea:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bee:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001bf0:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bf2:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_ADC3_Init+0x58>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001bf4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bf6:	f7fe ff2b 	bl	8000a50 <HAL_ADC_ConfigChannel>
 8001bfa:	b108      	cbz	r0, 8001c00 <MX_ADC3_Init+0x54>
  {
    Error_Handler();
 8001bfc:	f000 f930 	bl	8001e60 <Error_Handler>
  }

}
 8001c00:	b004      	add	sp, #16
 8001c02:	bd10      	pop	{r4, pc}
 8001c04:	200000fc 	.word	0x200000fc
 8001c08:	40012200 	.word	0x40012200
 8001c0c:	0f000001 	.word	0x0f000001

08001c10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4606      	mov	r6, r0
 8001c14:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	2214      	movs	r2, #20
 8001c18:	2100      	movs	r1, #0
 8001c1a:	a803      	add	r0, sp, #12
 8001c1c:	f000 fa7c 	bl	8002118 <memset>
  if(adcHandle->Instance==ADC3)
 8001c20:	6832      	ldr	r2, [r6, #0]
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_ADC_MspInit+0xa8>)
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d144      	bne.n	8001cb2 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c28:	2500      	movs	r5, #0
 8001c2a:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8001c2e:	9501      	str	r5, [sp, #4]
 8001c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PF4     ------> ADC3_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c32:	4822      	ldr	r0, [pc, #136]	; (8001cbc <HAL_ADC_MspInit+0xac>)

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001c34:	4c22      	ldr	r4, [pc, #136]	; (8001cc0 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c3e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001c42:	9201      	str	r2, [sp, #4]
 8001c44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c46:	9502      	str	r5, [sp, #8]
 8001c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4a:	f042 0220 	orr.w	r2, r2, #32
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c60:	2303      	movs	r3, #3
 8001c62:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c64:	f7ff f994 	bl	8000f90 <HAL_GPIO_Init>
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_ADC_MspInit+0xb4>)
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c6a:	60a5      	str	r5, [r4, #8]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001c6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c70:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c78:	6123      	str	r3, [r4, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c7e:	6163      	str	r3, [r4, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	61a3      	str	r3, [r4, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001c86:	4620      	mov	r0, r4
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001c88:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8c:	60e5      	str	r5, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001c8e:	61e3      	str	r3, [r4, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c90:	6225      	str	r5, [r4, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c92:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001c94:	f7fe fff4 	bl	8000c80 <HAL_DMA_Init>
 8001c98:	b108      	cbz	r0, 8001c9e <HAL_ADC_MspInit+0x8e>
    {
      Error_Handler();
 8001c9a:	f000 f8e1 	bl	8001e60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001ca0:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ca2:	2012      	movs	r0, #18
 8001ca4:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001ca6:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ca8:	f7fe ff7c 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001cac:	2012      	movs	r0, #18
 8001cae:	f7fe ffad 	bl	8000c0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001cb2:	b008      	add	sp, #32
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40012200 	.word	0x40012200
 8001cbc:	40021400 	.word	0x40021400
 8001cc0:	2000009c 	.word	0x2000009c
 8001cc4:	40026410 	.word	0x40026410

08001cc8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001cc8:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_DMA_Init+0x30>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	9201      	str	r2, [sp, #4]
 8001cd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd2:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001cd6:	6319      	str	r1, [r3, #48]	; 0x30
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cde:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ce4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ce6:	f7fe ff5d 	bl	8000ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cea:	2038      	movs	r0, #56	; 0x38
 8001cec:	f7fe ff8e 	bl	8000c0c <HAL_NVIC_EnableIRQ>

}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cfc:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <MX_GPIO_Init+0x5c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d06:	f041 0104 	orr.w	r1, r1, #4
 8001d0a:	6319      	str	r1, [r3, #48]	; 0x30
 8001d0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d0e:	f001 0104 	and.w	r1, r1, #4
 8001d12:	9100      	str	r1, [sp, #0]
 8001d14:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d16:	9201      	str	r2, [sp, #4]
 8001d18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d1a:	f041 0120 	orr.w	r1, r1, #32
 8001d1e:	6319      	str	r1, [r3, #48]	; 0x30
 8001d20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d22:	f001 0120 	and.w	r1, r1, #32
 8001d26:	9101      	str	r1, [sp, #4]
 8001d28:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2a:	9202      	str	r2, [sp, #8]
 8001d2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d2e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001d32:	6319      	str	r1, [r3, #48]	; 0x30
 8001d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d36:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001d3a:	9102      	str	r1, [sp, #8]
 8001d3c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	9203      	str	r2, [sp, #12]
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	9303      	str	r3, [sp, #12]
 8001d50:	9b03      	ldr	r3, [sp, #12]

}
 8001d52:	b004      	add	sp, #16
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    /* Place your implementation of fputc here */
    /* e.g. write a character to the Debug USART and Loop until the end of transmission */

    if('\n' == ch)
 8001d5e:	280a      	cmp	r0, #10
{
 8001d60:	9001      	str	r0, [sp, #4]
    if('\n' == ch)
 8001d62:	d109      	bne.n	8001d78 <__io_putchar+0x1c>
    {
        int ch_tmp = '\r';
 8001d64:	a904      	add	r1, sp, #16
 8001d66:	230d      	movs	r3, #13
 8001d68:	f841 3d04 	str.w	r3, [r1, #-4]!

        /* Place your implementation of fputc here */
        /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch_tmp, 1, 0xFFFF);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <__io_putchar+0x34>)
 8001d74:	f7ff fdd4 	bl	8001920 <HAL_UART_Transmit>
    }

    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	a901      	add	r1, sp, #4
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <__io_putchar+0x34>)
 8001d82:	f7ff fdcd 	bl	8001920 <HAL_UART_Transmit>

    return ch;
}
 8001d86:	9801      	ldr	r0, [sp, #4]
 8001d88:	b005      	add	sp, #20
 8001d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d8e:	bf00      	nop
 8001d90:	20000144 	.word	0x20000144

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d98:	2230      	movs	r2, #48	; 0x30
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	a808      	add	r0, sp, #32
 8001d9e:	f000 f9bb 	bl	8002118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da2:	2100      	movs	r1, #0
 8001da4:	2214      	movs	r2, #20
 8001da6:	a803      	add	r0, sp, #12
 8001da8:	f000 f9b6 	bl	8002118 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	2400      	movs	r4, #0
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <SystemClock_Config+0x8c>)
 8001db0:	9401      	str	r4, [sp, #4]
 8001db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <SystemClock_Config+0x90>)
 8001dc6:	9402      	str	r4, [sp, #8]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dde:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001de4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001de6:	2319      	movs	r3, #25
 8001de8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001dea:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dec:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dee:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001df0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001df4:	2304      	movs	r3, #4
 8001df6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df8:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfa:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dfc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f7ff f9a7 	bl	8001150 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e02:	230f      	movs	r3, #15
 8001e04:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e0a:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e10:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e12:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e14:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e16:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e18:	f7ff fb4a 	bl	80014b0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001e1c:	b014      	add	sp, #80	; 0x50
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <main>:
{
 8001e28:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8001e2a:	f7fe fbcd 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8001e2e:	f7ff ffb1 	bl	8001d94 <SystemClock_Config>
  MX_GPIO_Init();
 8001e32:	f7ff ff63 	bl	8001cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8001e36:	f7ff ff47 	bl	8001cc8 <MX_DMA_Init>
  MX_ADC3_Init();
 8001e3a:	f7ff feb7 	bl	8001bac <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001e3e:	f000 f8bb 	bl	8001fb8 <MX_USART1_UART_Init>
  HAL_ADC_Start_DMA(&hadc3,&adcvalue[0],1 );
 8001e42:	2201      	movs	r2, #1
 8001e44:	a901      	add	r1, sp, #4
 8001e46:	4804      	ldr	r0, [pc, #16]	; (8001e58 <main+0x30>)
	printf("ab ");
 8001e48:	4c04      	ldr	r4, [pc, #16]	; (8001e5c <main+0x34>)
  HAL_ADC_Start_DMA(&hadc3,&adcvalue[0],1 );
 8001e4a:	f7fe fc8f 	bl	800076c <HAL_ADC_Start_DMA>
	printf("ab ");
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f000 f96a 	bl	8002128 <iprintf>
 8001e54:	e7fb      	b.n	8001e4e <main+0x26>
 8001e56:	bf00      	nop
 8001e58:	200000fc 	.word	0x200000fc
 8001e5c:	08002f38 	.word	0x08002f38

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e64:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	9200      	str	r2, [sp, #0]
 8001e6c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e6e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001e72:	6459      	str	r1, [r3, #68]	; 0x44
 8001e74:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e76:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001e7a:	9100      	str	r1, [sp, #0]
 8001e7c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	9201      	str	r2, [sp, #4]
 8001e80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e82:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001e86:	6419      	str	r1, [r3, #64]	; 0x40
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e90:	4611      	mov	r1, r2
 8001e92:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e96:	f7fe fe85 	bl	8000ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f7fe feb6 	bl	8000c0c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea0:	b003      	add	sp, #12
 8001ea2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800

08001eac <NMI_Handler>:
 8001eac:	4770      	bx	lr

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	e7fe      	b.n	8001eb0 <MemManage_Handler>

08001eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler>

08001eb6 <SVC_Handler>:
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ebc:	f7fe bb9e 	b.w	80005fc <HAL_IncTick>

08001ec0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ec0:	4770      	bx	lr
	...

08001ec4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001ec4:	4801      	ldr	r0, [pc, #4]	; (8001ecc <ADC_IRQHandler+0x8>)
 8001ec6:	f7fe bcee 	b.w	80008a6 <HAL_ADC_IRQHandler>
 8001eca:	bf00      	nop
 8001ecc:	200000fc 	.word	0x200000fc

08001ed0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed0:	4801      	ldr	r0, [pc, #4]	; (8001ed8 <USART1_IRQHandler+0x8>)
 8001ed2:	f7ff bdc3 	b.w	8001a5c <HAL_UART_IRQHandler>
 8001ed6:	bf00      	nop
 8001ed8:	20000144 	.word	0x20000144

08001edc <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001edc:	4801      	ldr	r0, [pc, #4]	; (8001ee4 <DMA2_Stream0_IRQHandler+0x8>)
 8001ede:	f7fe bf9d 	b.w	8000e1c <HAL_DMA_IRQHandler>
 8001ee2:	bf00      	nop
 8001ee4:	2000009c 	.word	0x2000009c

08001ee8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	460e      	mov	r6, r1
 8001eec:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	460c      	mov	r4, r1
 8001ef0:	1ba3      	subs	r3, r4, r6
 8001ef2:	429d      	cmp	r5, r3
 8001ef4:	dc01      	bgt.n	8001efa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001efa:	f3af 8000 	nop.w
 8001efe:	f804 0b01 	strb.w	r0, [r4], #1
 8001f02:	e7f5      	b.n	8001ef0 <_read+0x8>

08001f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	460e      	mov	r6, r1
 8001f08:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	1ba3      	subs	r3, r4, r6
 8001f0e:	429d      	cmp	r5, r3
 8001f10:	dc01      	bgt.n	8001f16 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001f12:	4628      	mov	r0, r5
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001f16:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001f1a:	f7ff ff1f 	bl	8001d5c <__io_putchar>
 8001f1e:	e7f5      	b.n	8001f0c <_write+0x8>

08001f20 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001f20:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <_sbrk+0x2c>)
 8001f24:	6819      	ldr	r1, [r3, #0]
{
 8001f26:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001f28:	b909      	cbnz	r1, 8001f2e <_sbrk+0xe>
		heap_end = &end;
 8001f2a:	4909      	ldr	r1, [pc, #36]	; (8001f50 <_sbrk+0x30>)
 8001f2c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001f2e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001f30:	4669      	mov	r1, sp
 8001f32:	4402      	add	r2, r0
 8001f34:	428a      	cmp	r2, r1
 8001f36:	d906      	bls.n	8001f46 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001f38:	f000 f8c4 	bl	80020c4 <__errno>
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001f46:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001f48:	bd08      	pop	{r3, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000008c 	.word	0x2000008c
 8001f50:	20000188 	.word	0x20000188

08001f54 <_close>:

int _close(int file)
{
	return -1;
}
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f60:	2000      	movs	r0, #0
 8001f62:	4770      	bx	lr

08001f64 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f64:	2001      	movs	r0, #1
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f68:	2000      	movs	r0, #0
 8001f6a:	4770      	bx	lr

08001f6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	490f      	ldr	r1, [pc, #60]	; (8001fac <SystemInit+0x40>)
 8001f6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <SystemInit+0x44>)
 8001f7c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f7e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001f86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <SystemInit+0x48>)
 8001f96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fa0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fa6:	608b      	str	r3, [r1, #8]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	24003010 	.word	0x24003010

08001fb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fb8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_USART1_UART_Init+0x34>)
 8001fbe:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001fc2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc6:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fce:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fd6:	f7ff fc75 	bl	80018c4 <HAL_UART_Init>
 8001fda:	b118      	cbz	r0, 8001fe4 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fe0:	f7ff bf3e 	b.w	8001e60 <Error_Handler>
 8001fe4:	bd08      	pop	{r3, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000144 	.word	0x20000144
 8001fec:	40011000 	.word	0x40011000

08001ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff6:	2214      	movs	r2, #20
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	a803      	add	r0, sp, #12
 8001ffc:	f000 f88c 	bl	8002118 <memset>
  if(uartHandle->Instance==USART1)
 8002000:	6822      	ldr	r2, [r4, #0]
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_UART_MspInit+0x78>)
 8002004:	429a      	cmp	r2, r3
 8002006:	d12d      	bne.n	8002064 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002008:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800200c:	2400      	movs	r4, #0
 800200e:	9401      	str	r4, [sp, #4]
 8002010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	4816      	ldr	r0, [pc, #88]	; (800206c <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002014:	f042 0210 	orr.w	r2, r2, #16
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
 800201a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800201c:	f002 0210 	and.w	r2, r2, #16
 8002020:	9201      	str	r2, [sp, #4]
 8002022:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	9402      	str	r4, [sp, #8]
 8002026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	9302      	str	r3, [sp, #8]
 8002036:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002038:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800203c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002042:	2301      	movs	r3, #1
 8002044:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800204c:	2307      	movs	r3, #7
 800204e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f7fe ff9e 	bl	8000f90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002054:	2025      	movs	r0, #37	; 0x25
 8002056:	4622      	mov	r2, r4
 8002058:	4621      	mov	r1, r4
 800205a:	f7fe fda3 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800205e:	2025      	movs	r0, #37	; 0x25
 8002060:	f7fe fdd4 	bl	8000c0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002064:	b008      	add	sp, #32
 8002066:	bd10      	pop	{r4, pc}
 8002068:	40011000 	.word	0x40011000
 800206c:	40020000 	.word	0x40020000

08002070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002074:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002076:	e003      	b.n	8002080 <LoopCopyDataInit>

08002078 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800207a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800207c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800207e:	3104      	adds	r1, #4

08002080 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002080:	480b      	ldr	r0, [pc, #44]	; (80020b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002084:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002086:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002088:	d3f6      	bcc.n	8002078 <CopyDataInit>
  ldr  r2, =_sbss
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800208c:	e002      	b.n	8002094 <LoopFillZerobss>

0800208e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800208e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002090:	f842 3b04 	str.w	r3, [r2], #4

08002094 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002096:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002098:	d3f9      	bcc.n	800208e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800209a:	f7ff ff67 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f000 f817 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7ff fec1 	bl	8001e28 <main>
  bx  lr    
 80020a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020ac:	08002ffc 	.word	0x08002ffc
  ldr  r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020b4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80020b8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80020bc:	20000188 	.word	0x20000188

080020c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <CAN1_RX0_IRQHandler>
	...

080020c4 <__errno>:
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <__errno+0x8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	4e0d      	ldr	r6, [pc, #52]	; (8002108 <__libc_init_array+0x38>)
 80020d4:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d6:	1ba4      	subs	r4, r4, r6
 80020d8:	10a4      	asrs	r4, r4, #2
 80020da:	2500      	movs	r5, #0
 80020dc:	42a5      	cmp	r5, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	4e0b      	ldr	r6, [pc, #44]	; (8002110 <__libc_init_array+0x40>)
 80020e2:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <__libc_init_array+0x44>)
 80020e4:	f000 ff18 	bl	8002f18 <_init>
 80020e8:	1ba4      	subs	r4, r4, r6
 80020ea:	10a4      	asrs	r4, r4, #2
 80020ec:	2500      	movs	r5, #0
 80020ee:	42a5      	cmp	r5, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020f8:	4798      	blx	r3
 80020fa:	3501      	adds	r5, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002102:	4798      	blx	r3
 8002104:	3501      	adds	r5, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	08002ff4 	.word	0x08002ff4
 800210c:	08002ff4 	.word	0x08002ff4
 8002110:	08002ff4 	.word	0x08002ff4
 8002114:	08002ff8 	.word	0x08002ff8

08002118 <memset>:
 8002118:	4402      	add	r2, r0
 800211a:	4603      	mov	r3, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <iprintf>:
 8002128:	b40f      	push	{r0, r1, r2, r3}
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <iprintf+0x2c>)
 800212c:	b513      	push	{r0, r1, r4, lr}
 800212e:	681c      	ldr	r4, [r3, #0]
 8002130:	b124      	cbz	r4, 800213c <iprintf+0x14>
 8002132:	69a3      	ldr	r3, [r4, #24]
 8002134:	b913      	cbnz	r3, 800213c <iprintf+0x14>
 8002136:	4620      	mov	r0, r4
 8002138:	f000 f84e 	bl	80021d8 <__sinit>
 800213c:	ab05      	add	r3, sp, #20
 800213e:	9a04      	ldr	r2, [sp, #16]
 8002140:	68a1      	ldr	r1, [r4, #8]
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	4620      	mov	r0, r4
 8002146:	f000 f959 	bl	80023fc <_vfiprintf_r>
 800214a:	b002      	add	sp, #8
 800214c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002150:	b004      	add	sp, #16
 8002152:	4770      	bx	lr
 8002154:	2000000c 	.word	0x2000000c

08002158 <_cleanup_r>:
 8002158:	4901      	ldr	r1, [pc, #4]	; (8002160 <_cleanup_r+0x8>)
 800215a:	f000 b8a9 	b.w	80022b0 <_fwalk_reent>
 800215e:	bf00      	nop
 8002160:	08002cd1 	.word	0x08002cd1

08002164 <std.isra.0>:
 8002164:	2300      	movs	r3, #0
 8002166:	b510      	push	{r4, lr}
 8002168:	4604      	mov	r4, r0
 800216a:	6003      	str	r3, [r0, #0]
 800216c:	6043      	str	r3, [r0, #4]
 800216e:	6083      	str	r3, [r0, #8]
 8002170:	8181      	strh	r1, [r0, #12]
 8002172:	6643      	str	r3, [r0, #100]	; 0x64
 8002174:	81c2      	strh	r2, [r0, #14]
 8002176:	6103      	str	r3, [r0, #16]
 8002178:	6143      	str	r3, [r0, #20]
 800217a:	6183      	str	r3, [r0, #24]
 800217c:	4619      	mov	r1, r3
 800217e:	2208      	movs	r2, #8
 8002180:	305c      	adds	r0, #92	; 0x5c
 8002182:	f7ff ffc9 	bl	8002118 <memset>
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <std.isra.0+0x38>)
 8002188:	6263      	str	r3, [r4, #36]	; 0x24
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <std.isra.0+0x3c>)
 800218c:	62a3      	str	r3, [r4, #40]	; 0x28
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <std.isra.0+0x40>)
 8002190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <std.isra.0+0x44>)
 8002194:	6224      	str	r4, [r4, #32]
 8002196:	6323      	str	r3, [r4, #48]	; 0x30
 8002198:	bd10      	pop	{r4, pc}
 800219a:	bf00      	nop
 800219c:	08002975 	.word	0x08002975
 80021a0:	08002997 	.word	0x08002997
 80021a4:	080029cf 	.word	0x080029cf
 80021a8:	080029f3 	.word	0x080029f3

080021ac <__sfmoreglue>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	1e4a      	subs	r2, r1, #1
 80021b0:	2568      	movs	r5, #104	; 0x68
 80021b2:	4355      	muls	r5, r2
 80021b4:	460e      	mov	r6, r1
 80021b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021ba:	f000 f897 	bl	80022ec <_malloc_r>
 80021be:	4604      	mov	r4, r0
 80021c0:	b140      	cbz	r0, 80021d4 <__sfmoreglue+0x28>
 80021c2:	2100      	movs	r1, #0
 80021c4:	e880 0042 	stmia.w	r0, {r1, r6}
 80021c8:	300c      	adds	r0, #12
 80021ca:	60a0      	str	r0, [r4, #8]
 80021cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021d0:	f7ff ffa2 	bl	8002118 <memset>
 80021d4:	4620      	mov	r0, r4
 80021d6:	bd70      	pop	{r4, r5, r6, pc}

080021d8 <__sinit>:
 80021d8:	6983      	ldr	r3, [r0, #24]
 80021da:	b510      	push	{r4, lr}
 80021dc:	4604      	mov	r4, r0
 80021de:	bb33      	cbnz	r3, 800222e <__sinit+0x56>
 80021e0:	6483      	str	r3, [r0, #72]	; 0x48
 80021e2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80021e4:	6503      	str	r3, [r0, #80]	; 0x50
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <__sinit+0x58>)
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <__sinit+0x5c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6282      	str	r2, [r0, #40]	; 0x28
 80021ee:	4298      	cmp	r0, r3
 80021f0:	bf04      	itt	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	6183      	streq	r3, [r0, #24]
 80021f6:	f000 f81f 	bl	8002238 <__sfp>
 80021fa:	6060      	str	r0, [r4, #4]
 80021fc:	4620      	mov	r0, r4
 80021fe:	f000 f81b 	bl	8002238 <__sfp>
 8002202:	60a0      	str	r0, [r4, #8]
 8002204:	4620      	mov	r0, r4
 8002206:	f000 f817 	bl	8002238 <__sfp>
 800220a:	2200      	movs	r2, #0
 800220c:	60e0      	str	r0, [r4, #12]
 800220e:	2104      	movs	r1, #4
 8002210:	6860      	ldr	r0, [r4, #4]
 8002212:	f7ff ffa7 	bl	8002164 <std.isra.0>
 8002216:	2201      	movs	r2, #1
 8002218:	2109      	movs	r1, #9
 800221a:	68a0      	ldr	r0, [r4, #8]
 800221c:	f7ff ffa2 	bl	8002164 <std.isra.0>
 8002220:	2202      	movs	r2, #2
 8002222:	2112      	movs	r1, #18
 8002224:	68e0      	ldr	r0, [r4, #12]
 8002226:	f7ff ff9d 	bl	8002164 <std.isra.0>
 800222a:	2301      	movs	r3, #1
 800222c:	61a3      	str	r3, [r4, #24]
 800222e:	bd10      	pop	{r4, pc}
 8002230:	08002f54 	.word	0x08002f54
 8002234:	08002159 	.word	0x08002159

08002238 <__sfp>:
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <__sfp+0x74>)
 800223c:	681e      	ldr	r6, [r3, #0]
 800223e:	69b3      	ldr	r3, [r6, #24]
 8002240:	4607      	mov	r7, r0
 8002242:	b913      	cbnz	r3, 800224a <__sfp+0x12>
 8002244:	4630      	mov	r0, r6
 8002246:	f7ff ffc7 	bl	80021d8 <__sinit>
 800224a:	3648      	adds	r6, #72	; 0x48
 800224c:	68b4      	ldr	r4, [r6, #8]
 800224e:	6873      	ldr	r3, [r6, #4]
 8002250:	3b01      	subs	r3, #1
 8002252:	d503      	bpl.n	800225c <__sfp+0x24>
 8002254:	6833      	ldr	r3, [r6, #0]
 8002256:	b133      	cbz	r3, 8002266 <__sfp+0x2e>
 8002258:	6836      	ldr	r6, [r6, #0]
 800225a:	e7f7      	b.n	800224c <__sfp+0x14>
 800225c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002260:	b16d      	cbz	r5, 800227e <__sfp+0x46>
 8002262:	3468      	adds	r4, #104	; 0x68
 8002264:	e7f4      	b.n	8002250 <__sfp+0x18>
 8002266:	2104      	movs	r1, #4
 8002268:	4638      	mov	r0, r7
 800226a:	f7ff ff9f 	bl	80021ac <__sfmoreglue>
 800226e:	6030      	str	r0, [r6, #0]
 8002270:	2800      	cmp	r0, #0
 8002272:	d1f1      	bne.n	8002258 <__sfp+0x20>
 8002274:	230c      	movs	r3, #12
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4604      	mov	r4, r0
 800227a:	4620      	mov	r0, r4
 800227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800227e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002282:	81e3      	strh	r3, [r4, #14]
 8002284:	2301      	movs	r3, #1
 8002286:	81a3      	strh	r3, [r4, #12]
 8002288:	6665      	str	r5, [r4, #100]	; 0x64
 800228a:	6025      	str	r5, [r4, #0]
 800228c:	60a5      	str	r5, [r4, #8]
 800228e:	6065      	str	r5, [r4, #4]
 8002290:	6125      	str	r5, [r4, #16]
 8002292:	6165      	str	r5, [r4, #20]
 8002294:	61a5      	str	r5, [r4, #24]
 8002296:	2208      	movs	r2, #8
 8002298:	4629      	mov	r1, r5
 800229a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800229e:	f7ff ff3b 	bl	8002118 <memset>
 80022a2:	6365      	str	r5, [r4, #52]	; 0x34
 80022a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80022a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80022a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80022aa:	e7e6      	b.n	800227a <__sfp+0x42>
 80022ac:	08002f54 	.word	0x08002f54

080022b0 <_fwalk_reent>:
 80022b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022b4:	4680      	mov	r8, r0
 80022b6:	4689      	mov	r9, r1
 80022b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022bc:	2600      	movs	r6, #0
 80022be:	b914      	cbnz	r4, 80022c6 <_fwalk_reent+0x16>
 80022c0:	4630      	mov	r0, r6
 80022c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022c6:	68a5      	ldr	r5, [r4, #8]
 80022c8:	6867      	ldr	r7, [r4, #4]
 80022ca:	3f01      	subs	r7, #1
 80022cc:	d501      	bpl.n	80022d2 <_fwalk_reent+0x22>
 80022ce:	6824      	ldr	r4, [r4, #0]
 80022d0:	e7f5      	b.n	80022be <_fwalk_reent+0xe>
 80022d2:	89ab      	ldrh	r3, [r5, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d907      	bls.n	80022e8 <_fwalk_reent+0x38>
 80022d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022dc:	3301      	adds	r3, #1
 80022de:	d003      	beq.n	80022e8 <_fwalk_reent+0x38>
 80022e0:	4629      	mov	r1, r5
 80022e2:	4640      	mov	r0, r8
 80022e4:	47c8      	blx	r9
 80022e6:	4306      	orrs	r6, r0
 80022e8:	3568      	adds	r5, #104	; 0x68
 80022ea:	e7ee      	b.n	80022ca <_fwalk_reent+0x1a>

080022ec <_malloc_r>:
 80022ec:	b570      	push	{r4, r5, r6, lr}
 80022ee:	1ccd      	adds	r5, r1, #3
 80022f0:	f025 0503 	bic.w	r5, r5, #3
 80022f4:	3508      	adds	r5, #8
 80022f6:	2d0c      	cmp	r5, #12
 80022f8:	bf38      	it	cc
 80022fa:	250c      	movcc	r5, #12
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	4606      	mov	r6, r0
 8002300:	db01      	blt.n	8002306 <_malloc_r+0x1a>
 8002302:	42a9      	cmp	r1, r5
 8002304:	d903      	bls.n	800230e <_malloc_r+0x22>
 8002306:	230c      	movs	r3, #12
 8002308:	6033      	str	r3, [r6, #0]
 800230a:	2000      	movs	r0, #0
 800230c:	bd70      	pop	{r4, r5, r6, pc}
 800230e:	f000 fd7f 	bl	8002e10 <__malloc_lock>
 8002312:	4a23      	ldr	r2, [pc, #140]	; (80023a0 <_malloc_r+0xb4>)
 8002314:	6814      	ldr	r4, [r2, #0]
 8002316:	4621      	mov	r1, r4
 8002318:	b991      	cbnz	r1, 8002340 <_malloc_r+0x54>
 800231a:	4c22      	ldr	r4, [pc, #136]	; (80023a4 <_malloc_r+0xb8>)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	b91b      	cbnz	r3, 8002328 <_malloc_r+0x3c>
 8002320:	4630      	mov	r0, r6
 8002322:	f000 fb17 	bl	8002954 <_sbrk_r>
 8002326:	6020      	str	r0, [r4, #0]
 8002328:	4629      	mov	r1, r5
 800232a:	4630      	mov	r0, r6
 800232c:	f000 fb12 	bl	8002954 <_sbrk_r>
 8002330:	1c43      	adds	r3, r0, #1
 8002332:	d126      	bne.n	8002382 <_malloc_r+0x96>
 8002334:	230c      	movs	r3, #12
 8002336:	6033      	str	r3, [r6, #0]
 8002338:	4630      	mov	r0, r6
 800233a:	f000 fd6a 	bl	8002e12 <__malloc_unlock>
 800233e:	e7e4      	b.n	800230a <_malloc_r+0x1e>
 8002340:	680b      	ldr	r3, [r1, #0]
 8002342:	1b5b      	subs	r3, r3, r5
 8002344:	d41a      	bmi.n	800237c <_malloc_r+0x90>
 8002346:	2b0b      	cmp	r3, #11
 8002348:	d90f      	bls.n	800236a <_malloc_r+0x7e>
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	50cd      	str	r5, [r1, r3]
 800234e:	18cc      	adds	r4, r1, r3
 8002350:	4630      	mov	r0, r6
 8002352:	f000 fd5e 	bl	8002e12 <__malloc_unlock>
 8002356:	f104 000b 	add.w	r0, r4, #11
 800235a:	1d23      	adds	r3, r4, #4
 800235c:	f020 0007 	bic.w	r0, r0, #7
 8002360:	1ac3      	subs	r3, r0, r3
 8002362:	d01b      	beq.n	800239c <_malloc_r+0xb0>
 8002364:	425a      	negs	r2, r3
 8002366:	50e2      	str	r2, [r4, r3]
 8002368:	bd70      	pop	{r4, r5, r6, pc}
 800236a:	428c      	cmp	r4, r1
 800236c:	bf0d      	iteet	eq
 800236e:	6863      	ldreq	r3, [r4, #4]
 8002370:	684b      	ldrne	r3, [r1, #4]
 8002372:	6063      	strne	r3, [r4, #4]
 8002374:	6013      	streq	r3, [r2, #0]
 8002376:	bf18      	it	ne
 8002378:	460c      	movne	r4, r1
 800237a:	e7e9      	b.n	8002350 <_malloc_r+0x64>
 800237c:	460c      	mov	r4, r1
 800237e:	6849      	ldr	r1, [r1, #4]
 8002380:	e7ca      	b.n	8002318 <_malloc_r+0x2c>
 8002382:	1cc4      	adds	r4, r0, #3
 8002384:	f024 0403 	bic.w	r4, r4, #3
 8002388:	42a0      	cmp	r0, r4
 800238a:	d005      	beq.n	8002398 <_malloc_r+0xac>
 800238c:	1a21      	subs	r1, r4, r0
 800238e:	4630      	mov	r0, r6
 8002390:	f000 fae0 	bl	8002954 <_sbrk_r>
 8002394:	3001      	adds	r0, #1
 8002396:	d0cd      	beq.n	8002334 <_malloc_r+0x48>
 8002398:	6025      	str	r5, [r4, #0]
 800239a:	e7d9      	b.n	8002350 <_malloc_r+0x64>
 800239c:	bd70      	pop	{r4, r5, r6, pc}
 800239e:	bf00      	nop
 80023a0:	20000090 	.word	0x20000090
 80023a4:	20000094 	.word	0x20000094

080023a8 <__sfputc_r>:
 80023a8:	6893      	ldr	r3, [r2, #8]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	b410      	push	{r4}
 80023b0:	6093      	str	r3, [r2, #8]
 80023b2:	da09      	bge.n	80023c8 <__sfputc_r+0x20>
 80023b4:	6994      	ldr	r4, [r2, #24]
 80023b6:	42a3      	cmp	r3, r4
 80023b8:	db02      	blt.n	80023c0 <__sfputc_r+0x18>
 80023ba:	b2cb      	uxtb	r3, r1
 80023bc:	2b0a      	cmp	r3, #10
 80023be:	d103      	bne.n	80023c8 <__sfputc_r+0x20>
 80023c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023c4:	f000 bb1a 	b.w	80029fc <__swbuf_r>
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	1c58      	adds	r0, r3, #1
 80023cc:	6010      	str	r0, [r2, #0]
 80023ce:	7019      	strb	r1, [r3, #0]
 80023d0:	b2c8      	uxtb	r0, r1
 80023d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <__sfputs_r>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	4606      	mov	r6, r0
 80023dc:	460f      	mov	r7, r1
 80023de:	4614      	mov	r4, r2
 80023e0:	18d5      	adds	r5, r2, r3
 80023e2:	42ac      	cmp	r4, r5
 80023e4:	d101      	bne.n	80023ea <__sfputs_r+0x12>
 80023e6:	2000      	movs	r0, #0
 80023e8:	e007      	b.n	80023fa <__sfputs_r+0x22>
 80023ea:	463a      	mov	r2, r7
 80023ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023f0:	4630      	mov	r0, r6
 80023f2:	f7ff ffd9 	bl	80023a8 <__sfputc_r>
 80023f6:	1c43      	adds	r3, r0, #1
 80023f8:	d1f3      	bne.n	80023e2 <__sfputs_r+0xa>
 80023fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023fc <_vfiprintf_r>:
 80023fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002400:	b09d      	sub	sp, #116	; 0x74
 8002402:	460c      	mov	r4, r1
 8002404:	4617      	mov	r7, r2
 8002406:	9303      	str	r3, [sp, #12]
 8002408:	4606      	mov	r6, r0
 800240a:	b118      	cbz	r0, 8002414 <_vfiprintf_r+0x18>
 800240c:	6983      	ldr	r3, [r0, #24]
 800240e:	b90b      	cbnz	r3, 8002414 <_vfiprintf_r+0x18>
 8002410:	f7ff fee2 	bl	80021d8 <__sinit>
 8002414:	4b7c      	ldr	r3, [pc, #496]	; (8002608 <_vfiprintf_r+0x20c>)
 8002416:	429c      	cmp	r4, r3
 8002418:	d157      	bne.n	80024ca <_vfiprintf_r+0xce>
 800241a:	6874      	ldr	r4, [r6, #4]
 800241c:	89a3      	ldrh	r3, [r4, #12]
 800241e:	0718      	lsls	r0, r3, #28
 8002420:	d55d      	bpl.n	80024de <_vfiprintf_r+0xe2>
 8002422:	6923      	ldr	r3, [r4, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05a      	beq.n	80024de <_vfiprintf_r+0xe2>
 8002428:	2300      	movs	r3, #0
 800242a:	9309      	str	r3, [sp, #36]	; 0x24
 800242c:	2320      	movs	r3, #32
 800242e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002432:	2330      	movs	r3, #48	; 0x30
 8002434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002438:	f04f 0b01 	mov.w	fp, #1
 800243c:	46b8      	mov	r8, r7
 800243e:	4645      	mov	r5, r8
 8002440:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d155      	bne.n	80024f4 <_vfiprintf_r+0xf8>
 8002448:	ebb8 0a07 	subs.w	sl, r8, r7
 800244c:	d00b      	beq.n	8002466 <_vfiprintf_r+0x6a>
 800244e:	4653      	mov	r3, sl
 8002450:	463a      	mov	r2, r7
 8002452:	4621      	mov	r1, r4
 8002454:	4630      	mov	r0, r6
 8002456:	f7ff ffbf 	bl	80023d8 <__sfputs_r>
 800245a:	3001      	adds	r0, #1
 800245c:	f000 80c4 	beq.w	80025e8 <_vfiprintf_r+0x1ec>
 8002460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002462:	4453      	add	r3, sl
 8002464:	9309      	str	r3, [sp, #36]	; 0x24
 8002466:	f898 3000 	ldrb.w	r3, [r8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80bc 	beq.w	80025e8 <_vfiprintf_r+0x1ec>
 8002470:	2300      	movs	r3, #0
 8002472:	f04f 32ff 	mov.w	r2, #4294967295
 8002476:	9304      	str	r3, [sp, #16]
 8002478:	9307      	str	r3, [sp, #28]
 800247a:	9205      	str	r2, [sp, #20]
 800247c:	9306      	str	r3, [sp, #24]
 800247e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002482:	931a      	str	r3, [sp, #104]	; 0x68
 8002484:	2205      	movs	r2, #5
 8002486:	7829      	ldrb	r1, [r5, #0]
 8002488:	4860      	ldr	r0, [pc, #384]	; (800260c <_vfiprintf_r+0x210>)
 800248a:	f7fd fea1 	bl	80001d0 <memchr>
 800248e:	f105 0801 	add.w	r8, r5, #1
 8002492:	9b04      	ldr	r3, [sp, #16]
 8002494:	2800      	cmp	r0, #0
 8002496:	d131      	bne.n	80024fc <_vfiprintf_r+0x100>
 8002498:	06d9      	lsls	r1, r3, #27
 800249a:	bf44      	itt	mi
 800249c:	2220      	movmi	r2, #32
 800249e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024a2:	071a      	lsls	r2, r3, #28
 80024a4:	bf44      	itt	mi
 80024a6:	222b      	movmi	r2, #43	; 0x2b
 80024a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024ac:	782a      	ldrb	r2, [r5, #0]
 80024ae:	2a2a      	cmp	r2, #42	; 0x2a
 80024b0:	d02c      	beq.n	800250c <_vfiprintf_r+0x110>
 80024b2:	9a07      	ldr	r2, [sp, #28]
 80024b4:	2100      	movs	r1, #0
 80024b6:	200a      	movs	r0, #10
 80024b8:	46a8      	mov	r8, r5
 80024ba:	3501      	adds	r5, #1
 80024bc:	f898 3000 	ldrb.w	r3, [r8]
 80024c0:	3b30      	subs	r3, #48	; 0x30
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	d96d      	bls.n	80025a2 <_vfiprintf_r+0x1a6>
 80024c6:	b371      	cbz	r1, 8002526 <_vfiprintf_r+0x12a>
 80024c8:	e026      	b.n	8002518 <_vfiprintf_r+0x11c>
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <_vfiprintf_r+0x214>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d101      	bne.n	80024d4 <_vfiprintf_r+0xd8>
 80024d0:	68b4      	ldr	r4, [r6, #8]
 80024d2:	e7a3      	b.n	800241c <_vfiprintf_r+0x20>
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <_vfiprintf_r+0x218>)
 80024d6:	429c      	cmp	r4, r3
 80024d8:	bf08      	it	eq
 80024da:	68f4      	ldreq	r4, [r6, #12]
 80024dc:	e79e      	b.n	800241c <_vfiprintf_r+0x20>
 80024de:	4621      	mov	r1, r4
 80024e0:	4630      	mov	r0, r6
 80024e2:	f000 faef 	bl	8002ac4 <__swsetup_r>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d09e      	beq.n	8002428 <_vfiprintf_r+0x2c>
 80024ea:	f04f 30ff 	mov.w	r0, #4294967295
 80024ee:	b01d      	add	sp, #116	; 0x74
 80024f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f4:	2b25      	cmp	r3, #37	; 0x25
 80024f6:	d0a7      	beq.n	8002448 <_vfiprintf_r+0x4c>
 80024f8:	46a8      	mov	r8, r5
 80024fa:	e7a0      	b.n	800243e <_vfiprintf_r+0x42>
 80024fc:	4a43      	ldr	r2, [pc, #268]	; (800260c <_vfiprintf_r+0x210>)
 80024fe:	1a80      	subs	r0, r0, r2
 8002500:	fa0b f000 	lsl.w	r0, fp, r0
 8002504:	4318      	orrs	r0, r3
 8002506:	9004      	str	r0, [sp, #16]
 8002508:	4645      	mov	r5, r8
 800250a:	e7bb      	b.n	8002484 <_vfiprintf_r+0x88>
 800250c:	9a03      	ldr	r2, [sp, #12]
 800250e:	1d11      	adds	r1, r2, #4
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	9103      	str	r1, [sp, #12]
 8002514:	2a00      	cmp	r2, #0
 8002516:	db01      	blt.n	800251c <_vfiprintf_r+0x120>
 8002518:	9207      	str	r2, [sp, #28]
 800251a:	e004      	b.n	8002526 <_vfiprintf_r+0x12a>
 800251c:	4252      	negs	r2, r2
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	9207      	str	r2, [sp, #28]
 8002524:	9304      	str	r3, [sp, #16]
 8002526:	f898 3000 	ldrb.w	r3, [r8]
 800252a:	2b2e      	cmp	r3, #46	; 0x2e
 800252c:	d110      	bne.n	8002550 <_vfiprintf_r+0x154>
 800252e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002532:	2b2a      	cmp	r3, #42	; 0x2a
 8002534:	f108 0101 	add.w	r1, r8, #1
 8002538:	d137      	bne.n	80025aa <_vfiprintf_r+0x1ae>
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	9203      	str	r2, [sp, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	bfb8      	it	lt
 8002546:	f04f 33ff 	movlt.w	r3, #4294967295
 800254a:	f108 0802 	add.w	r8, r8, #2
 800254e:	9305      	str	r3, [sp, #20]
 8002550:	4d31      	ldr	r5, [pc, #196]	; (8002618 <_vfiprintf_r+0x21c>)
 8002552:	f898 1000 	ldrb.w	r1, [r8]
 8002556:	2203      	movs	r2, #3
 8002558:	4628      	mov	r0, r5
 800255a:	f7fd fe39 	bl	80001d0 <memchr>
 800255e:	b140      	cbz	r0, 8002572 <_vfiprintf_r+0x176>
 8002560:	2340      	movs	r3, #64	; 0x40
 8002562:	1b40      	subs	r0, r0, r5
 8002564:	fa03 f000 	lsl.w	r0, r3, r0
 8002568:	9b04      	ldr	r3, [sp, #16]
 800256a:	4303      	orrs	r3, r0
 800256c:	9304      	str	r3, [sp, #16]
 800256e:	f108 0801 	add.w	r8, r8, #1
 8002572:	f898 1000 	ldrb.w	r1, [r8]
 8002576:	4829      	ldr	r0, [pc, #164]	; (800261c <_vfiprintf_r+0x220>)
 8002578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800257c:	2206      	movs	r2, #6
 800257e:	f108 0701 	add.w	r7, r8, #1
 8002582:	f7fd fe25 	bl	80001d0 <memchr>
 8002586:	2800      	cmp	r0, #0
 8002588:	d034      	beq.n	80025f4 <_vfiprintf_r+0x1f8>
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <_vfiprintf_r+0x224>)
 800258c:	bb03      	cbnz	r3, 80025d0 <_vfiprintf_r+0x1d4>
 800258e:	9b03      	ldr	r3, [sp, #12]
 8002590:	3307      	adds	r3, #7
 8002592:	f023 0307 	bic.w	r3, r3, #7
 8002596:	3308      	adds	r3, #8
 8002598:	9303      	str	r3, [sp, #12]
 800259a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800259c:	444b      	add	r3, r9
 800259e:	9309      	str	r3, [sp, #36]	; 0x24
 80025a0:	e74c      	b.n	800243c <_vfiprintf_r+0x40>
 80025a2:	fb00 3202 	mla	r2, r0, r2, r3
 80025a6:	2101      	movs	r1, #1
 80025a8:	e786      	b.n	80024b8 <_vfiprintf_r+0xbc>
 80025aa:	2300      	movs	r3, #0
 80025ac:	9305      	str	r3, [sp, #20]
 80025ae:	4618      	mov	r0, r3
 80025b0:	250a      	movs	r5, #10
 80025b2:	4688      	mov	r8, r1
 80025b4:	3101      	adds	r1, #1
 80025b6:	f898 2000 	ldrb.w	r2, [r8]
 80025ba:	3a30      	subs	r2, #48	; 0x30
 80025bc:	2a09      	cmp	r2, #9
 80025be:	d903      	bls.n	80025c8 <_vfiprintf_r+0x1cc>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0c5      	beq.n	8002550 <_vfiprintf_r+0x154>
 80025c4:	9005      	str	r0, [sp, #20]
 80025c6:	e7c3      	b.n	8002550 <_vfiprintf_r+0x154>
 80025c8:	fb05 2000 	mla	r0, r5, r0, r2
 80025cc:	2301      	movs	r3, #1
 80025ce:	e7f0      	b.n	80025b2 <_vfiprintf_r+0x1b6>
 80025d0:	ab03      	add	r3, sp, #12
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	4622      	mov	r2, r4
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <_vfiprintf_r+0x228>)
 80025d8:	a904      	add	r1, sp, #16
 80025da:	4630      	mov	r0, r6
 80025dc:	f3af 8000 	nop.w
 80025e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025e4:	4681      	mov	r9, r0
 80025e6:	d1d8      	bne.n	800259a <_vfiprintf_r+0x19e>
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	065b      	lsls	r3, r3, #25
 80025ec:	f53f af7d 	bmi.w	80024ea <_vfiprintf_r+0xee>
 80025f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025f2:	e77c      	b.n	80024ee <_vfiprintf_r+0xf2>
 80025f4:	ab03      	add	r3, sp, #12
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4622      	mov	r2, r4
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <_vfiprintf_r+0x228>)
 80025fc:	a904      	add	r1, sp, #16
 80025fe:	4630      	mov	r0, r6
 8002600:	f000 f888 	bl	8002714 <_printf_i>
 8002604:	e7ec      	b.n	80025e0 <_vfiprintf_r+0x1e4>
 8002606:	bf00      	nop
 8002608:	08002f78 	.word	0x08002f78
 800260c:	08002fb8 	.word	0x08002fb8
 8002610:	08002f98 	.word	0x08002f98
 8002614:	08002f58 	.word	0x08002f58
 8002618:	08002fbe 	.word	0x08002fbe
 800261c:	08002fc2 	.word	0x08002fc2
 8002620:	00000000 	.word	0x00000000
 8002624:	080023d9 	.word	0x080023d9

08002628 <_printf_common>:
 8002628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800262c:	4691      	mov	r9, r2
 800262e:	461f      	mov	r7, r3
 8002630:	688a      	ldr	r2, [r1, #8]
 8002632:	690b      	ldr	r3, [r1, #16]
 8002634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002638:	4293      	cmp	r3, r2
 800263a:	bfb8      	it	lt
 800263c:	4613      	movlt	r3, r2
 800263e:	f8c9 3000 	str.w	r3, [r9]
 8002642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002646:	4606      	mov	r6, r0
 8002648:	460c      	mov	r4, r1
 800264a:	b112      	cbz	r2, 8002652 <_printf_common+0x2a>
 800264c:	3301      	adds	r3, #1
 800264e:	f8c9 3000 	str.w	r3, [r9]
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	0699      	lsls	r1, r3, #26
 8002656:	bf42      	ittt	mi
 8002658:	f8d9 3000 	ldrmi.w	r3, [r9]
 800265c:	3302      	addmi	r3, #2
 800265e:	f8c9 3000 	strmi.w	r3, [r9]
 8002662:	6825      	ldr	r5, [r4, #0]
 8002664:	f015 0506 	ands.w	r5, r5, #6
 8002668:	d107      	bne.n	800267a <_printf_common+0x52>
 800266a:	f104 0a19 	add.w	sl, r4, #25
 800266e:	68e3      	ldr	r3, [r4, #12]
 8002670:	f8d9 2000 	ldr.w	r2, [r9]
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	429d      	cmp	r5, r3
 8002678:	db29      	blt.n	80026ce <_printf_common+0xa6>
 800267a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	3300      	adds	r3, #0
 8002682:	bf18      	it	ne
 8002684:	2301      	movne	r3, #1
 8002686:	0692      	lsls	r2, r2, #26
 8002688:	d42e      	bmi.n	80026e8 <_printf_common+0xc0>
 800268a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800268e:	4639      	mov	r1, r7
 8002690:	4630      	mov	r0, r6
 8002692:	47c0      	blx	r8
 8002694:	3001      	adds	r0, #1
 8002696:	d021      	beq.n	80026dc <_printf_common+0xb4>
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	68e5      	ldr	r5, [r4, #12]
 800269c:	f8d9 2000 	ldr.w	r2, [r9]
 80026a0:	f003 0306 	and.w	r3, r3, #6
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	bf08      	it	eq
 80026a8:	1aad      	subeq	r5, r5, r2
 80026aa:	68a3      	ldr	r3, [r4, #8]
 80026ac:	6922      	ldr	r2, [r4, #16]
 80026ae:	bf0c      	ite	eq
 80026b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026b4:	2500      	movne	r5, #0
 80026b6:	4293      	cmp	r3, r2
 80026b8:	bfc4      	itt	gt
 80026ba:	1a9b      	subgt	r3, r3, r2
 80026bc:	18ed      	addgt	r5, r5, r3
 80026be:	f04f 0900 	mov.w	r9, #0
 80026c2:	341a      	adds	r4, #26
 80026c4:	454d      	cmp	r5, r9
 80026c6:	d11b      	bne.n	8002700 <_printf_common+0xd8>
 80026c8:	2000      	movs	r0, #0
 80026ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ce:	2301      	movs	r3, #1
 80026d0:	4652      	mov	r2, sl
 80026d2:	4639      	mov	r1, r7
 80026d4:	4630      	mov	r0, r6
 80026d6:	47c0      	blx	r8
 80026d8:	3001      	adds	r0, #1
 80026da:	d103      	bne.n	80026e4 <_printf_common+0xbc>
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e4:	3501      	adds	r5, #1
 80026e6:	e7c2      	b.n	800266e <_printf_common+0x46>
 80026e8:	18e1      	adds	r1, r4, r3
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	2030      	movs	r0, #48	; 0x30
 80026ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026f2:	4422      	add	r2, r4
 80026f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026fc:	3302      	adds	r3, #2
 80026fe:	e7c4      	b.n	800268a <_printf_common+0x62>
 8002700:	2301      	movs	r3, #1
 8002702:	4622      	mov	r2, r4
 8002704:	4639      	mov	r1, r7
 8002706:	4630      	mov	r0, r6
 8002708:	47c0      	blx	r8
 800270a:	3001      	adds	r0, #1
 800270c:	d0e6      	beq.n	80026dc <_printf_common+0xb4>
 800270e:	f109 0901 	add.w	r9, r9, #1
 8002712:	e7d7      	b.n	80026c4 <_printf_common+0x9c>

08002714 <_printf_i>:
 8002714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002718:	4617      	mov	r7, r2
 800271a:	7e0a      	ldrb	r2, [r1, #24]
 800271c:	b085      	sub	sp, #20
 800271e:	2a6e      	cmp	r2, #110	; 0x6e
 8002720:	4698      	mov	r8, r3
 8002722:	4606      	mov	r6, r0
 8002724:	460c      	mov	r4, r1
 8002726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002728:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800272c:	f000 80bc 	beq.w	80028a8 <_printf_i+0x194>
 8002730:	d81a      	bhi.n	8002768 <_printf_i+0x54>
 8002732:	2a63      	cmp	r2, #99	; 0x63
 8002734:	d02e      	beq.n	8002794 <_printf_i+0x80>
 8002736:	d80a      	bhi.n	800274e <_printf_i+0x3a>
 8002738:	2a00      	cmp	r2, #0
 800273a:	f000 80c8 	beq.w	80028ce <_printf_i+0x1ba>
 800273e:	2a58      	cmp	r2, #88	; 0x58
 8002740:	f000 808a 	beq.w	8002858 <_printf_i+0x144>
 8002744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002748:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800274c:	e02a      	b.n	80027a4 <_printf_i+0x90>
 800274e:	2a64      	cmp	r2, #100	; 0x64
 8002750:	d001      	beq.n	8002756 <_printf_i+0x42>
 8002752:	2a69      	cmp	r2, #105	; 0x69
 8002754:	d1f6      	bne.n	8002744 <_printf_i+0x30>
 8002756:	6821      	ldr	r1, [r4, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800275e:	d023      	beq.n	80027a8 <_printf_i+0x94>
 8002760:	1d11      	adds	r1, r2, #4
 8002762:	6019      	str	r1, [r3, #0]
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	e027      	b.n	80027b8 <_printf_i+0xa4>
 8002768:	2a73      	cmp	r2, #115	; 0x73
 800276a:	f000 80b4 	beq.w	80028d6 <_printf_i+0x1c2>
 800276e:	d808      	bhi.n	8002782 <_printf_i+0x6e>
 8002770:	2a6f      	cmp	r2, #111	; 0x6f
 8002772:	d02a      	beq.n	80027ca <_printf_i+0xb6>
 8002774:	2a70      	cmp	r2, #112	; 0x70
 8002776:	d1e5      	bne.n	8002744 <_printf_i+0x30>
 8002778:	680a      	ldr	r2, [r1, #0]
 800277a:	f042 0220 	orr.w	r2, r2, #32
 800277e:	600a      	str	r2, [r1, #0]
 8002780:	e003      	b.n	800278a <_printf_i+0x76>
 8002782:	2a75      	cmp	r2, #117	; 0x75
 8002784:	d021      	beq.n	80027ca <_printf_i+0xb6>
 8002786:	2a78      	cmp	r2, #120	; 0x78
 8002788:	d1dc      	bne.n	8002744 <_printf_i+0x30>
 800278a:	2278      	movs	r2, #120	; 0x78
 800278c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002790:	496e      	ldr	r1, [pc, #440]	; (800294c <_printf_i+0x238>)
 8002792:	e064      	b.n	800285e <_printf_i+0x14a>
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800279a:	1d11      	adds	r1, r2, #4
 800279c:	6019      	str	r1, [r3, #0]
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0a3      	b.n	80028f0 <_printf_i+0x1dc>
 80027a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80027ac:	f102 0104 	add.w	r1, r2, #4
 80027b0:	6019      	str	r1, [r3, #0]
 80027b2:	d0d7      	beq.n	8002764 <_printf_i+0x50>
 80027b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	da03      	bge.n	80027c4 <_printf_i+0xb0>
 80027bc:	222d      	movs	r2, #45	; 0x2d
 80027be:	425b      	negs	r3, r3
 80027c0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027c4:	4962      	ldr	r1, [pc, #392]	; (8002950 <_printf_i+0x23c>)
 80027c6:	220a      	movs	r2, #10
 80027c8:	e017      	b.n	80027fa <_printf_i+0xe6>
 80027ca:	6820      	ldr	r0, [r4, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80027d2:	d003      	beq.n	80027dc <_printf_i+0xc8>
 80027d4:	1d08      	adds	r0, r1, #4
 80027d6:	6018      	str	r0, [r3, #0]
 80027d8:	680b      	ldr	r3, [r1, #0]
 80027da:	e006      	b.n	80027ea <_printf_i+0xd6>
 80027dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027e0:	f101 0004 	add.w	r0, r1, #4
 80027e4:	6018      	str	r0, [r3, #0]
 80027e6:	d0f7      	beq.n	80027d8 <_printf_i+0xc4>
 80027e8:	880b      	ldrh	r3, [r1, #0]
 80027ea:	4959      	ldr	r1, [pc, #356]	; (8002950 <_printf_i+0x23c>)
 80027ec:	2a6f      	cmp	r2, #111	; 0x6f
 80027ee:	bf14      	ite	ne
 80027f0:	220a      	movne	r2, #10
 80027f2:	2208      	moveq	r2, #8
 80027f4:	2000      	movs	r0, #0
 80027f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80027fa:	6865      	ldr	r5, [r4, #4]
 80027fc:	60a5      	str	r5, [r4, #8]
 80027fe:	2d00      	cmp	r5, #0
 8002800:	f2c0 809c 	blt.w	800293c <_printf_i+0x228>
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	f020 0004 	bic.w	r0, r0, #4
 800280a:	6020      	str	r0, [r4, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d13f      	bne.n	8002890 <_printf_i+0x17c>
 8002810:	2d00      	cmp	r5, #0
 8002812:	f040 8095 	bne.w	8002940 <_printf_i+0x22c>
 8002816:	4675      	mov	r5, lr
 8002818:	2a08      	cmp	r2, #8
 800281a:	d10b      	bne.n	8002834 <_printf_i+0x120>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	07da      	lsls	r2, r3, #31
 8002820:	d508      	bpl.n	8002834 <_printf_i+0x120>
 8002822:	6923      	ldr	r3, [r4, #16]
 8002824:	6862      	ldr	r2, [r4, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	bfde      	ittt	le
 800282a:	2330      	movle	r3, #48	; 0x30
 800282c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002830:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002834:	ebae 0305 	sub.w	r3, lr, r5
 8002838:	6123      	str	r3, [r4, #16]
 800283a:	f8cd 8000 	str.w	r8, [sp]
 800283e:	463b      	mov	r3, r7
 8002840:	aa03      	add	r2, sp, #12
 8002842:	4621      	mov	r1, r4
 8002844:	4630      	mov	r0, r6
 8002846:	f7ff feef 	bl	8002628 <_printf_common>
 800284a:	3001      	adds	r0, #1
 800284c:	d155      	bne.n	80028fa <_printf_i+0x1e6>
 800284e:	f04f 30ff 	mov.w	r0, #4294967295
 8002852:	b005      	add	sp, #20
 8002854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002858:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800285c:	493c      	ldr	r1, [pc, #240]	; (8002950 <_printf_i+0x23c>)
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002866:	f100 0504 	add.w	r5, r0, #4
 800286a:	601d      	str	r5, [r3, #0]
 800286c:	d001      	beq.n	8002872 <_printf_i+0x15e>
 800286e:	6803      	ldr	r3, [r0, #0]
 8002870:	e002      	b.n	8002878 <_printf_i+0x164>
 8002872:	0655      	lsls	r5, r2, #25
 8002874:	d5fb      	bpl.n	800286e <_printf_i+0x15a>
 8002876:	8803      	ldrh	r3, [r0, #0]
 8002878:	07d0      	lsls	r0, r2, #31
 800287a:	bf44      	itt	mi
 800287c:	f042 0220 	orrmi.w	r2, r2, #32
 8002880:	6022      	strmi	r2, [r4, #0]
 8002882:	b91b      	cbnz	r3, 800288c <_printf_i+0x178>
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	f022 0220 	bic.w	r2, r2, #32
 800288a:	6022      	str	r2, [r4, #0]
 800288c:	2210      	movs	r2, #16
 800288e:	e7b1      	b.n	80027f4 <_printf_i+0xe0>
 8002890:	4675      	mov	r5, lr
 8002892:	fbb3 f0f2 	udiv	r0, r3, r2
 8002896:	fb02 3310 	mls	r3, r2, r0, r3
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80028a0:	4603      	mov	r3, r0
 80028a2:	2800      	cmp	r0, #0
 80028a4:	d1f5      	bne.n	8002892 <_printf_i+0x17e>
 80028a6:	e7b7      	b.n	8002818 <_printf_i+0x104>
 80028a8:	6808      	ldr	r0, [r1, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	6949      	ldr	r1, [r1, #20]
 80028ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028b2:	d004      	beq.n	80028be <_printf_i+0x1aa>
 80028b4:	1d10      	adds	r0, r2, #4
 80028b6:	6018      	str	r0, [r3, #0]
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	6019      	str	r1, [r3, #0]
 80028bc:	e007      	b.n	80028ce <_printf_i+0x1ba>
 80028be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028c2:	f102 0004 	add.w	r0, r2, #4
 80028c6:	6018      	str	r0, [r3, #0]
 80028c8:	6813      	ldr	r3, [r2, #0]
 80028ca:	d0f6      	beq.n	80028ba <_printf_i+0x1a6>
 80028cc:	8019      	strh	r1, [r3, #0]
 80028ce:	2300      	movs	r3, #0
 80028d0:	6123      	str	r3, [r4, #16]
 80028d2:	4675      	mov	r5, lr
 80028d4:	e7b1      	b.n	800283a <_printf_i+0x126>
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	1d11      	adds	r1, r2, #4
 80028da:	6019      	str	r1, [r3, #0]
 80028dc:	6815      	ldr	r5, [r2, #0]
 80028de:	6862      	ldr	r2, [r4, #4]
 80028e0:	2100      	movs	r1, #0
 80028e2:	4628      	mov	r0, r5
 80028e4:	f7fd fc74 	bl	80001d0 <memchr>
 80028e8:	b108      	cbz	r0, 80028ee <_printf_i+0x1da>
 80028ea:	1b40      	subs	r0, r0, r5
 80028ec:	6060      	str	r0, [r4, #4]
 80028ee:	6863      	ldr	r3, [r4, #4]
 80028f0:	6123      	str	r3, [r4, #16]
 80028f2:	2300      	movs	r3, #0
 80028f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028f8:	e79f      	b.n	800283a <_printf_i+0x126>
 80028fa:	6923      	ldr	r3, [r4, #16]
 80028fc:	462a      	mov	r2, r5
 80028fe:	4639      	mov	r1, r7
 8002900:	4630      	mov	r0, r6
 8002902:	47c0      	blx	r8
 8002904:	3001      	adds	r0, #1
 8002906:	d0a2      	beq.n	800284e <_printf_i+0x13a>
 8002908:	6823      	ldr	r3, [r4, #0]
 800290a:	079b      	lsls	r3, r3, #30
 800290c:	d507      	bpl.n	800291e <_printf_i+0x20a>
 800290e:	2500      	movs	r5, #0
 8002910:	f104 0919 	add.w	r9, r4, #25
 8002914:	68e3      	ldr	r3, [r4, #12]
 8002916:	9a03      	ldr	r2, [sp, #12]
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	429d      	cmp	r5, r3
 800291c:	db05      	blt.n	800292a <_printf_i+0x216>
 800291e:	68e0      	ldr	r0, [r4, #12]
 8002920:	9b03      	ldr	r3, [sp, #12]
 8002922:	4298      	cmp	r0, r3
 8002924:	bfb8      	it	lt
 8002926:	4618      	movlt	r0, r3
 8002928:	e793      	b.n	8002852 <_printf_i+0x13e>
 800292a:	2301      	movs	r3, #1
 800292c:	464a      	mov	r2, r9
 800292e:	4639      	mov	r1, r7
 8002930:	4630      	mov	r0, r6
 8002932:	47c0      	blx	r8
 8002934:	3001      	adds	r0, #1
 8002936:	d08a      	beq.n	800284e <_printf_i+0x13a>
 8002938:	3501      	adds	r5, #1
 800293a:	e7eb      	b.n	8002914 <_printf_i+0x200>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1a7      	bne.n	8002890 <_printf_i+0x17c>
 8002940:	780b      	ldrb	r3, [r1, #0]
 8002942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002946:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800294a:	e765      	b.n	8002818 <_printf_i+0x104>
 800294c:	08002fda 	.word	0x08002fda
 8002950:	08002fc9 	.word	0x08002fc9

08002954 <_sbrk_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4c06      	ldr	r4, [pc, #24]	; (8002970 <_sbrk_r+0x1c>)
 8002958:	2300      	movs	r3, #0
 800295a:	4605      	mov	r5, r0
 800295c:	4608      	mov	r0, r1
 800295e:	6023      	str	r3, [r4, #0]
 8002960:	f7ff fade 	bl	8001f20 <_sbrk>
 8002964:	1c43      	adds	r3, r0, #1
 8002966:	d102      	bne.n	800296e <_sbrk_r+0x1a>
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	b103      	cbz	r3, 800296e <_sbrk_r+0x1a>
 800296c:	602b      	str	r3, [r5, #0]
 800296e:	bd38      	pop	{r3, r4, r5, pc}
 8002970:	20000184 	.word	0x20000184

08002974 <__sread>:
 8002974:	b510      	push	{r4, lr}
 8002976:	460c      	mov	r4, r1
 8002978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800297c:	f000 fa98 	bl	8002eb0 <_read_r>
 8002980:	2800      	cmp	r0, #0
 8002982:	bfab      	itete	ge
 8002984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002986:	89a3      	ldrhlt	r3, [r4, #12]
 8002988:	181b      	addge	r3, r3, r0
 800298a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800298e:	bfac      	ite	ge
 8002990:	6563      	strge	r3, [r4, #84]	; 0x54
 8002992:	81a3      	strhlt	r3, [r4, #12]
 8002994:	bd10      	pop	{r4, pc}

08002996 <__swrite>:
 8002996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800299a:	461f      	mov	r7, r3
 800299c:	898b      	ldrh	r3, [r1, #12]
 800299e:	05db      	lsls	r3, r3, #23
 80029a0:	4605      	mov	r5, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	4616      	mov	r6, r2
 80029a6:	d505      	bpl.n	80029b4 <__swrite+0x1e>
 80029a8:	2302      	movs	r3, #2
 80029aa:	2200      	movs	r2, #0
 80029ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b0:	f000 f9b8 	bl	8002d24 <_lseek_r>
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029be:	81a3      	strh	r3, [r4, #12]
 80029c0:	4632      	mov	r2, r6
 80029c2:	463b      	mov	r3, r7
 80029c4:	4628      	mov	r0, r5
 80029c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029ca:	f000 b869 	b.w	8002aa0 <_write_r>

080029ce <__sseek>:
 80029ce:	b510      	push	{r4, lr}
 80029d0:	460c      	mov	r4, r1
 80029d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d6:	f000 f9a5 	bl	8002d24 <_lseek_r>
 80029da:	1c43      	adds	r3, r0, #1
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	bf15      	itete	ne
 80029e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80029e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029ea:	81a3      	strheq	r3, [r4, #12]
 80029ec:	bf18      	it	ne
 80029ee:	81a3      	strhne	r3, [r4, #12]
 80029f0:	bd10      	pop	{r4, pc}

080029f2 <__sclose>:
 80029f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f6:	f000 b8d3 	b.w	8002ba0 <_close_r>
	...

080029fc <__swbuf_r>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	460e      	mov	r6, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	4605      	mov	r5, r0
 8002a04:	b118      	cbz	r0, 8002a0e <__swbuf_r+0x12>
 8002a06:	6983      	ldr	r3, [r0, #24]
 8002a08:	b90b      	cbnz	r3, 8002a0e <__swbuf_r+0x12>
 8002a0a:	f7ff fbe5 	bl	80021d8 <__sinit>
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <__swbuf_r+0x98>)
 8002a10:	429c      	cmp	r4, r3
 8002a12:	d12a      	bne.n	8002a6a <__swbuf_r+0x6e>
 8002a14:	686c      	ldr	r4, [r5, #4]
 8002a16:	69a3      	ldr	r3, [r4, #24]
 8002a18:	60a3      	str	r3, [r4, #8]
 8002a1a:	89a3      	ldrh	r3, [r4, #12]
 8002a1c:	071a      	lsls	r2, r3, #28
 8002a1e:	d52e      	bpl.n	8002a7e <__swbuf_r+0x82>
 8002a20:	6923      	ldr	r3, [r4, #16]
 8002a22:	b363      	cbz	r3, 8002a7e <__swbuf_r+0x82>
 8002a24:	6923      	ldr	r3, [r4, #16]
 8002a26:	6820      	ldr	r0, [r4, #0]
 8002a28:	1ac0      	subs	r0, r0, r3
 8002a2a:	6963      	ldr	r3, [r4, #20]
 8002a2c:	b2f6      	uxtb	r6, r6
 8002a2e:	4298      	cmp	r0, r3
 8002a30:	4637      	mov	r7, r6
 8002a32:	db04      	blt.n	8002a3e <__swbuf_r+0x42>
 8002a34:	4621      	mov	r1, r4
 8002a36:	4628      	mov	r0, r5
 8002a38:	f000 f94a 	bl	8002cd0 <_fflush_r>
 8002a3c:	bb28      	cbnz	r0, 8002a8a <__swbuf_r+0x8e>
 8002a3e:	68a3      	ldr	r3, [r4, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60a3      	str	r3, [r4, #8]
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	6022      	str	r2, [r4, #0]
 8002a4a:	701e      	strb	r6, [r3, #0]
 8002a4c:	6963      	ldr	r3, [r4, #20]
 8002a4e:	3001      	adds	r0, #1
 8002a50:	4298      	cmp	r0, r3
 8002a52:	d004      	beq.n	8002a5e <__swbuf_r+0x62>
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	07db      	lsls	r3, r3, #31
 8002a58:	d519      	bpl.n	8002a8e <__swbuf_r+0x92>
 8002a5a:	2e0a      	cmp	r6, #10
 8002a5c:	d117      	bne.n	8002a8e <__swbuf_r+0x92>
 8002a5e:	4621      	mov	r1, r4
 8002a60:	4628      	mov	r0, r5
 8002a62:	f000 f935 	bl	8002cd0 <_fflush_r>
 8002a66:	b190      	cbz	r0, 8002a8e <__swbuf_r+0x92>
 8002a68:	e00f      	b.n	8002a8a <__swbuf_r+0x8e>
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <__swbuf_r+0x9c>)
 8002a6c:	429c      	cmp	r4, r3
 8002a6e:	d101      	bne.n	8002a74 <__swbuf_r+0x78>
 8002a70:	68ac      	ldr	r4, [r5, #8]
 8002a72:	e7d0      	b.n	8002a16 <__swbuf_r+0x1a>
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <__swbuf_r+0xa0>)
 8002a76:	429c      	cmp	r4, r3
 8002a78:	bf08      	it	eq
 8002a7a:	68ec      	ldreq	r4, [r5, #12]
 8002a7c:	e7cb      	b.n	8002a16 <__swbuf_r+0x1a>
 8002a7e:	4621      	mov	r1, r4
 8002a80:	4628      	mov	r0, r5
 8002a82:	f000 f81f 	bl	8002ac4 <__swsetup_r>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d0cc      	beq.n	8002a24 <__swbuf_r+0x28>
 8002a8a:	f04f 37ff 	mov.w	r7, #4294967295
 8002a8e:	4638      	mov	r0, r7
 8002a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	08002f78 	.word	0x08002f78
 8002a98:	08002f98 	.word	0x08002f98
 8002a9c:	08002f58 	.word	0x08002f58

08002aa0 <_write_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4c07      	ldr	r4, [pc, #28]	; (8002ac0 <_write_r+0x20>)
 8002aa4:	4605      	mov	r5, r0
 8002aa6:	4608      	mov	r0, r1
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	2200      	movs	r2, #0
 8002aac:	6022      	str	r2, [r4, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f7ff fa28 	bl	8001f04 <_write>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	d102      	bne.n	8002abe <_write_r+0x1e>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	b103      	cbz	r3, 8002abe <_write_r+0x1e>
 8002abc:	602b      	str	r3, [r5, #0]
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
 8002ac0:	20000184 	.word	0x20000184

08002ac4 <__swsetup_r>:
 8002ac4:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <__swsetup_r+0xcc>)
 8002ac6:	b570      	push	{r4, r5, r6, lr}
 8002ac8:	681d      	ldr	r5, [r3, #0]
 8002aca:	4606      	mov	r6, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	b125      	cbz	r5, 8002ada <__swsetup_r+0x16>
 8002ad0:	69ab      	ldr	r3, [r5, #24]
 8002ad2:	b913      	cbnz	r3, 8002ada <__swsetup_r+0x16>
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f7ff fb7f 	bl	80021d8 <__sinit>
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <__swsetup_r+0xd0>)
 8002adc:	429c      	cmp	r4, r3
 8002ade:	d10f      	bne.n	8002b00 <__swsetup_r+0x3c>
 8002ae0:	686c      	ldr	r4, [r5, #4]
 8002ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	0715      	lsls	r5, r2, #28
 8002aea:	d42c      	bmi.n	8002b46 <__swsetup_r+0x82>
 8002aec:	06d0      	lsls	r0, r2, #27
 8002aee:	d411      	bmi.n	8002b14 <__swsetup_r+0x50>
 8002af0:	2209      	movs	r2, #9
 8002af2:	6032      	str	r2, [r6, #0]
 8002af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af8:	81a3      	strh	r3, [r4, #12]
 8002afa:	f04f 30ff 	mov.w	r0, #4294967295
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <__swsetup_r+0xd4>)
 8002b02:	429c      	cmp	r4, r3
 8002b04:	d101      	bne.n	8002b0a <__swsetup_r+0x46>
 8002b06:	68ac      	ldr	r4, [r5, #8]
 8002b08:	e7eb      	b.n	8002ae2 <__swsetup_r+0x1e>
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <__swsetup_r+0xd8>)
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	bf08      	it	eq
 8002b10:	68ec      	ldreq	r4, [r5, #12]
 8002b12:	e7e6      	b.n	8002ae2 <__swsetup_r+0x1e>
 8002b14:	0751      	lsls	r1, r2, #29
 8002b16:	d512      	bpl.n	8002b3e <__swsetup_r+0x7a>
 8002b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b1a:	b141      	cbz	r1, 8002b2e <__swsetup_r+0x6a>
 8002b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b20:	4299      	cmp	r1, r3
 8002b22:	d002      	beq.n	8002b2a <__swsetup_r+0x66>
 8002b24:	4630      	mov	r0, r6
 8002b26:	f000 f975 	bl	8002e14 <_free_r>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	6063      	str	r3, [r4, #4]
 8002b3a:	6923      	ldr	r3, [r4, #16]
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	89a3      	ldrh	r3, [r4, #12]
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	81a3      	strh	r3, [r4, #12]
 8002b46:	6923      	ldr	r3, [r4, #16]
 8002b48:	b94b      	cbnz	r3, 8002b5e <__swsetup_r+0x9a>
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d003      	beq.n	8002b5e <__swsetup_r+0x9a>
 8002b56:	4621      	mov	r1, r4
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f000 f919 	bl	8002d90 <__smakebuf_r>
 8002b5e:	89a2      	ldrh	r2, [r4, #12]
 8002b60:	f012 0301 	ands.w	r3, r2, #1
 8002b64:	d00c      	beq.n	8002b80 <__swsetup_r+0xbc>
 8002b66:	2300      	movs	r3, #0
 8002b68:	60a3      	str	r3, [r4, #8]
 8002b6a:	6963      	ldr	r3, [r4, #20]
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	61a3      	str	r3, [r4, #24]
 8002b70:	6923      	ldr	r3, [r4, #16]
 8002b72:	b953      	cbnz	r3, 8002b8a <__swsetup_r+0xc6>
 8002b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b7c:	d1ba      	bne.n	8002af4 <__swsetup_r+0x30>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	0792      	lsls	r2, r2, #30
 8002b82:	bf58      	it	pl
 8002b84:	6963      	ldrpl	r3, [r4, #20]
 8002b86:	60a3      	str	r3, [r4, #8]
 8002b88:	e7f2      	b.n	8002b70 <__swsetup_r+0xac>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	e7f7      	b.n	8002b7e <__swsetup_r+0xba>
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	08002f78 	.word	0x08002f78
 8002b98:	08002f98 	.word	0x08002f98
 8002b9c:	08002f58 	.word	0x08002f58

08002ba0 <_close_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4c06      	ldr	r4, [pc, #24]	; (8002bbc <_close_r+0x1c>)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	4608      	mov	r0, r1
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	f7ff f9d2 	bl	8001f54 <_close>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	d102      	bne.n	8002bba <_close_r+0x1a>
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	b103      	cbz	r3, 8002bba <_close_r+0x1a>
 8002bb8:	602b      	str	r3, [r5, #0]
 8002bba:	bd38      	pop	{r3, r4, r5, pc}
 8002bbc:	20000184 	.word	0x20000184

08002bc0 <__sflush_r>:
 8002bc0:	898a      	ldrh	r2, [r1, #12]
 8002bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	0710      	lsls	r0, r2, #28
 8002bca:	460c      	mov	r4, r1
 8002bcc:	d45a      	bmi.n	8002c84 <__sflush_r+0xc4>
 8002bce:	684b      	ldr	r3, [r1, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	dc05      	bgt.n	8002be0 <__sflush_r+0x20>
 8002bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	dc02      	bgt.n	8002be0 <__sflush_r+0x20>
 8002bda:	2000      	movs	r0, #0
 8002bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002be2:	2e00      	cmp	r6, #0
 8002be4:	d0f9      	beq.n	8002bda <__sflush_r+0x1a>
 8002be6:	2300      	movs	r3, #0
 8002be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bec:	682f      	ldr	r7, [r5, #0]
 8002bee:	602b      	str	r3, [r5, #0]
 8002bf0:	d033      	beq.n	8002c5a <__sflush_r+0x9a>
 8002bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	075a      	lsls	r2, r3, #29
 8002bf8:	d505      	bpl.n	8002c06 <__sflush_r+0x46>
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	1ac0      	subs	r0, r0, r3
 8002bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c00:	b10b      	cbz	r3, 8002c06 <__sflush_r+0x46>
 8002c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c04:	1ac0      	subs	r0, r0, r3
 8002c06:	2300      	movs	r3, #0
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c0c:	6a21      	ldr	r1, [r4, #32]
 8002c0e:	4628      	mov	r0, r5
 8002c10:	47b0      	blx	r6
 8002c12:	1c43      	adds	r3, r0, #1
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	d106      	bne.n	8002c26 <__sflush_r+0x66>
 8002c18:	6829      	ldr	r1, [r5, #0]
 8002c1a:	291d      	cmp	r1, #29
 8002c1c:	d84b      	bhi.n	8002cb6 <__sflush_r+0xf6>
 8002c1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ccc <__sflush_r+0x10c>)
 8002c20:	40ca      	lsrs	r2, r1
 8002c22:	07d6      	lsls	r6, r2, #31
 8002c24:	d547      	bpl.n	8002cb6 <__sflush_r+0xf6>
 8002c26:	2200      	movs	r2, #0
 8002c28:	6062      	str	r2, [r4, #4]
 8002c2a:	04d9      	lsls	r1, r3, #19
 8002c2c:	6922      	ldr	r2, [r4, #16]
 8002c2e:	6022      	str	r2, [r4, #0]
 8002c30:	d504      	bpl.n	8002c3c <__sflush_r+0x7c>
 8002c32:	1c42      	adds	r2, r0, #1
 8002c34:	d101      	bne.n	8002c3a <__sflush_r+0x7a>
 8002c36:	682b      	ldr	r3, [r5, #0]
 8002c38:	b903      	cbnz	r3, 8002c3c <__sflush_r+0x7c>
 8002c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8002c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c3e:	602f      	str	r7, [r5, #0]
 8002c40:	2900      	cmp	r1, #0
 8002c42:	d0ca      	beq.n	8002bda <__sflush_r+0x1a>
 8002c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c48:	4299      	cmp	r1, r3
 8002c4a:	d002      	beq.n	8002c52 <__sflush_r+0x92>
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 f8e1 	bl	8002e14 <_free_r>
 8002c52:	2000      	movs	r0, #0
 8002c54:	6360      	str	r0, [r4, #52]	; 0x34
 8002c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c5a:	6a21      	ldr	r1, [r4, #32]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	4628      	mov	r0, r5
 8002c60:	47b0      	blx	r6
 8002c62:	1c41      	adds	r1, r0, #1
 8002c64:	d1c6      	bne.n	8002bf4 <__sflush_r+0x34>
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0c3      	beq.n	8002bf4 <__sflush_r+0x34>
 8002c6c:	2b1d      	cmp	r3, #29
 8002c6e:	d001      	beq.n	8002c74 <__sflush_r+0xb4>
 8002c70:	2b16      	cmp	r3, #22
 8002c72:	d101      	bne.n	8002c78 <__sflush_r+0xb8>
 8002c74:	602f      	str	r7, [r5, #0]
 8002c76:	e7b0      	b.n	8002bda <__sflush_r+0x1a>
 8002c78:	89a3      	ldrh	r3, [r4, #12]
 8002c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7e:	81a3      	strh	r3, [r4, #12]
 8002c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c84:	690f      	ldr	r7, [r1, #16]
 8002c86:	2f00      	cmp	r7, #0
 8002c88:	d0a7      	beq.n	8002bda <__sflush_r+0x1a>
 8002c8a:	0793      	lsls	r3, r2, #30
 8002c8c:	680e      	ldr	r6, [r1, #0]
 8002c8e:	bf08      	it	eq
 8002c90:	694b      	ldreq	r3, [r1, #20]
 8002c92:	600f      	str	r7, [r1, #0]
 8002c94:	bf18      	it	ne
 8002c96:	2300      	movne	r3, #0
 8002c98:	eba6 0807 	sub.w	r8, r6, r7
 8002c9c:	608b      	str	r3, [r1, #8]
 8002c9e:	f1b8 0f00 	cmp.w	r8, #0
 8002ca2:	dd9a      	ble.n	8002bda <__sflush_r+0x1a>
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	463a      	mov	r2, r7
 8002ca8:	6a21      	ldr	r1, [r4, #32]
 8002caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cac:	4628      	mov	r0, r5
 8002cae:	47b0      	blx	r6
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	dc07      	bgt.n	8002cc4 <__sflush_r+0x104>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cc4:	4407      	add	r7, r0
 8002cc6:	eba8 0800 	sub.w	r8, r8, r0
 8002cca:	e7e8      	b.n	8002c9e <__sflush_r+0xde>
 8002ccc:	20400001 	.word	0x20400001

08002cd0 <_fflush_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	690b      	ldr	r3, [r1, #16]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	b1db      	cbz	r3, 8002d12 <_fflush_r+0x42>
 8002cda:	b118      	cbz	r0, 8002ce4 <_fflush_r+0x14>
 8002cdc:	6983      	ldr	r3, [r0, #24]
 8002cde:	b90b      	cbnz	r3, 8002ce4 <_fflush_r+0x14>
 8002ce0:	f7ff fa7a 	bl	80021d8 <__sinit>
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <_fflush_r+0x48>)
 8002ce6:	429c      	cmp	r4, r3
 8002ce8:	d109      	bne.n	8002cfe <_fflush_r+0x2e>
 8002cea:	686c      	ldr	r4, [r5, #4]
 8002cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cf0:	b17b      	cbz	r3, 8002d12 <_fflush_r+0x42>
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cfa:	f7ff bf61 	b.w	8002bc0 <__sflush_r>
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <_fflush_r+0x4c>)
 8002d00:	429c      	cmp	r4, r3
 8002d02:	d101      	bne.n	8002d08 <_fflush_r+0x38>
 8002d04:	68ac      	ldr	r4, [r5, #8]
 8002d06:	e7f1      	b.n	8002cec <_fflush_r+0x1c>
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <_fflush_r+0x50>)
 8002d0a:	429c      	cmp	r4, r3
 8002d0c:	bf08      	it	eq
 8002d0e:	68ec      	ldreq	r4, [r5, #12]
 8002d10:	e7ec      	b.n	8002cec <_fflush_r+0x1c>
 8002d12:	2000      	movs	r0, #0
 8002d14:	bd38      	pop	{r3, r4, r5, pc}
 8002d16:	bf00      	nop
 8002d18:	08002f78 	.word	0x08002f78
 8002d1c:	08002f98 	.word	0x08002f98
 8002d20:	08002f58 	.word	0x08002f58

08002d24 <_lseek_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4c07      	ldr	r4, [pc, #28]	; (8002d44 <_lseek_r+0x20>)
 8002d28:	4605      	mov	r5, r0
 8002d2a:	4608      	mov	r0, r1
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	6022      	str	r2, [r4, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7ff f918 	bl	8001f68 <_lseek>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d102      	bne.n	8002d42 <_lseek_r+0x1e>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	b103      	cbz	r3, 8002d42 <_lseek_r+0x1e>
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	20000184 	.word	0x20000184

08002d48 <__swhatbuf_r>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	460e      	mov	r6, r1
 8002d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d50:	2900      	cmp	r1, #0
 8002d52:	b090      	sub	sp, #64	; 0x40
 8002d54:	4614      	mov	r4, r2
 8002d56:	461d      	mov	r5, r3
 8002d58:	da07      	bge.n	8002d6a <__swhatbuf_r+0x22>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	602b      	str	r3, [r5, #0]
 8002d5e:	89b3      	ldrh	r3, [r6, #12]
 8002d60:	061a      	lsls	r2, r3, #24
 8002d62:	d410      	bmi.n	8002d86 <__swhatbuf_r+0x3e>
 8002d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d68:	e00e      	b.n	8002d88 <__swhatbuf_r+0x40>
 8002d6a:	aa01      	add	r2, sp, #4
 8002d6c:	f000 f8b2 	bl	8002ed4 <_fstat_r>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	dbf2      	blt.n	8002d5a <__swhatbuf_r+0x12>
 8002d74:	9a02      	ldr	r2, [sp, #8]
 8002d76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d7e:	425a      	negs	r2, r3
 8002d80:	415a      	adcs	r2, r3
 8002d82:	602a      	str	r2, [r5, #0]
 8002d84:	e7ee      	b.n	8002d64 <__swhatbuf_r+0x1c>
 8002d86:	2340      	movs	r3, #64	; 0x40
 8002d88:	2000      	movs	r0, #0
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	b010      	add	sp, #64	; 0x40
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}

08002d90 <__smakebuf_r>:
 8002d90:	898b      	ldrh	r3, [r1, #12]
 8002d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d94:	079d      	lsls	r5, r3, #30
 8002d96:	4606      	mov	r6, r0
 8002d98:	460c      	mov	r4, r1
 8002d9a:	d507      	bpl.n	8002dac <__smakebuf_r+0x1c>
 8002d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	6123      	str	r3, [r4, #16]
 8002da4:	2301      	movs	r3, #1
 8002da6:	6163      	str	r3, [r4, #20]
 8002da8:	b002      	add	sp, #8
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	ab01      	add	r3, sp, #4
 8002dae:	466a      	mov	r2, sp
 8002db0:	f7ff ffca 	bl	8002d48 <__swhatbuf_r>
 8002db4:	9900      	ldr	r1, [sp, #0]
 8002db6:	4605      	mov	r5, r0
 8002db8:	4630      	mov	r0, r6
 8002dba:	f7ff fa97 	bl	80022ec <_malloc_r>
 8002dbe:	b948      	cbnz	r0, 8002dd4 <__smakebuf_r+0x44>
 8002dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc4:	059a      	lsls	r2, r3, #22
 8002dc6:	d4ef      	bmi.n	8002da8 <__smakebuf_r+0x18>
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	81a3      	strh	r3, [r4, #12]
 8002dd2:	e7e3      	b.n	8002d9c <__smakebuf_r+0xc>
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <__smakebuf_r+0x7c>)
 8002dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	6020      	str	r0, [r4, #0]
 8002ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de0:	81a3      	strh	r3, [r4, #12]
 8002de2:	9b00      	ldr	r3, [sp, #0]
 8002de4:	6163      	str	r3, [r4, #20]
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	6120      	str	r0, [r4, #16]
 8002dea:	b15b      	cbz	r3, 8002e04 <__smakebuf_r+0x74>
 8002dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002df0:	4630      	mov	r0, r6
 8002df2:	f000 f881 	bl	8002ef8 <_isatty_r>
 8002df6:	b128      	cbz	r0, 8002e04 <__smakebuf_r+0x74>
 8002df8:	89a3      	ldrh	r3, [r4, #12]
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	81a3      	strh	r3, [r4, #12]
 8002e04:	89a3      	ldrh	r3, [r4, #12]
 8002e06:	431d      	orrs	r5, r3
 8002e08:	81a5      	strh	r5, [r4, #12]
 8002e0a:	e7cd      	b.n	8002da8 <__smakebuf_r+0x18>
 8002e0c:	08002159 	.word	0x08002159

08002e10 <__malloc_lock>:
 8002e10:	4770      	bx	lr

08002e12 <__malloc_unlock>:
 8002e12:	4770      	bx	lr

08002e14 <_free_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	4605      	mov	r5, r0
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d045      	beq.n	8002ea8 <_free_r+0x94>
 8002e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e20:	1f0c      	subs	r4, r1, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bfb8      	it	lt
 8002e26:	18e4      	addlt	r4, r4, r3
 8002e28:	f7ff fff2 	bl	8002e10 <__malloc_lock>
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <_free_r+0x98>)
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	4610      	mov	r0, r2
 8002e32:	b933      	cbnz	r3, 8002e42 <_free_r+0x2e>
 8002e34:	6063      	str	r3, [r4, #4]
 8002e36:	6014      	str	r4, [r2, #0]
 8002e38:	4628      	mov	r0, r5
 8002e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e3e:	f7ff bfe8 	b.w	8002e12 <__malloc_unlock>
 8002e42:	42a3      	cmp	r3, r4
 8002e44:	d90c      	bls.n	8002e60 <_free_r+0x4c>
 8002e46:	6821      	ldr	r1, [r4, #0]
 8002e48:	1862      	adds	r2, r4, r1
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	bf04      	itt	eq
 8002e4e:	681a      	ldreq	r2, [r3, #0]
 8002e50:	685b      	ldreq	r3, [r3, #4]
 8002e52:	6063      	str	r3, [r4, #4]
 8002e54:	bf04      	itt	eq
 8002e56:	1852      	addeq	r2, r2, r1
 8002e58:	6022      	streq	r2, [r4, #0]
 8002e5a:	6004      	str	r4, [r0, #0]
 8002e5c:	e7ec      	b.n	8002e38 <_free_r+0x24>
 8002e5e:	4613      	mov	r3, r2
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	b10a      	cbz	r2, 8002e68 <_free_r+0x54>
 8002e64:	42a2      	cmp	r2, r4
 8002e66:	d9fa      	bls.n	8002e5e <_free_r+0x4a>
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	1858      	adds	r0, r3, r1
 8002e6c:	42a0      	cmp	r0, r4
 8002e6e:	d10b      	bne.n	8002e88 <_free_r+0x74>
 8002e70:	6820      	ldr	r0, [r4, #0]
 8002e72:	4401      	add	r1, r0
 8002e74:	1858      	adds	r0, r3, r1
 8002e76:	4282      	cmp	r2, r0
 8002e78:	6019      	str	r1, [r3, #0]
 8002e7a:	d1dd      	bne.n	8002e38 <_free_r+0x24>
 8002e7c:	6810      	ldr	r0, [r2, #0]
 8002e7e:	6852      	ldr	r2, [r2, #4]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	4401      	add	r1, r0
 8002e84:	6019      	str	r1, [r3, #0]
 8002e86:	e7d7      	b.n	8002e38 <_free_r+0x24>
 8002e88:	d902      	bls.n	8002e90 <_free_r+0x7c>
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	602b      	str	r3, [r5, #0]
 8002e8e:	e7d3      	b.n	8002e38 <_free_r+0x24>
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	1821      	adds	r1, r4, r0
 8002e94:	428a      	cmp	r2, r1
 8002e96:	bf04      	itt	eq
 8002e98:	6811      	ldreq	r1, [r2, #0]
 8002e9a:	6852      	ldreq	r2, [r2, #4]
 8002e9c:	6062      	str	r2, [r4, #4]
 8002e9e:	bf04      	itt	eq
 8002ea0:	1809      	addeq	r1, r1, r0
 8002ea2:	6021      	streq	r1, [r4, #0]
 8002ea4:	605c      	str	r4, [r3, #4]
 8002ea6:	e7c7      	b.n	8002e38 <_free_r+0x24>
 8002ea8:	bd38      	pop	{r3, r4, r5, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000090 	.word	0x20000090

08002eb0 <_read_r>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	4c07      	ldr	r4, [pc, #28]	; (8002ed0 <_read_r+0x20>)
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	4608      	mov	r0, r1
 8002eb8:	4611      	mov	r1, r2
 8002eba:	2200      	movs	r2, #0
 8002ebc:	6022      	str	r2, [r4, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f7ff f812 	bl	8001ee8 <_read>
 8002ec4:	1c43      	adds	r3, r0, #1
 8002ec6:	d102      	bne.n	8002ece <_read_r+0x1e>
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	b103      	cbz	r3, 8002ece <_read_r+0x1e>
 8002ecc:	602b      	str	r3, [r5, #0]
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	20000184 	.word	0x20000184

08002ed4 <_fstat_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	4c07      	ldr	r4, [pc, #28]	; (8002ef4 <_fstat_r+0x20>)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	4605      	mov	r5, r0
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	f7ff f83a 	bl	8001f5a <_fstat>
 8002ee6:	1c43      	adds	r3, r0, #1
 8002ee8:	d102      	bne.n	8002ef0 <_fstat_r+0x1c>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	b103      	cbz	r3, 8002ef0 <_fstat_r+0x1c>
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	bd38      	pop	{r3, r4, r5, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000184 	.word	0x20000184

08002ef8 <_isatty_r>:
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4c06      	ldr	r4, [pc, #24]	; (8002f14 <_isatty_r+0x1c>)
 8002efc:	2300      	movs	r3, #0
 8002efe:	4605      	mov	r5, r0
 8002f00:	4608      	mov	r0, r1
 8002f02:	6023      	str	r3, [r4, #0]
 8002f04:	f7ff f82e 	bl	8001f64 <_isatty>
 8002f08:	1c43      	adds	r3, r0, #1
 8002f0a:	d102      	bne.n	8002f12 <_isatty_r+0x1a>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	b103      	cbz	r3, 8002f12 <_isatty_r+0x1a>
 8002f10:	602b      	str	r3, [r5, #0]
 8002f12:	bd38      	pop	{r3, r4, r5, pc}
 8002f14:	20000184 	.word	0x20000184

08002f18 <_init>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr

08002f24 <_fini>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr
