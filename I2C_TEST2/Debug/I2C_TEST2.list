
I2C_TEST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08007198  08007198  00017198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08007508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  8 .bss          000001a8  200001e0  200001e0  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000388  20000388  000201e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001022e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002977  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006a2c  00000000  00000000  00032db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005920  00000000  00000000  0003acf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000038da  00000000  00000000  00040610  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00043eea  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a54  00000000  00000000  00043f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007180 	.word	0x08007180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007180 	.word	0x08007180

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_InitTick+0x3c>)
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_InitTick+0x40>)
{
 8000f56:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	7818      	ldrb	r0, [r3, #0]
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f62:	6810      	ldr	r0, [r2, #0]
 8000f64:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f68:	f000 f8aa 	bl	80010c0 <HAL_SYSTICK_Config>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	b958      	cbnz	r0, 8000f88 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	2d0f      	cmp	r5, #15
 8000f72:	d809      	bhi.n	8000f88 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	4602      	mov	r2, r0
 8000f76:	4629      	mov	r1, r5
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f85e 	bl	800103c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_InitTick+0x44>)
 8000f82:	4620      	mov	r0, r4
 8000f84:	601d      	str	r5, [r3, #0]
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_Init>:
{
 8000f98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x30>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000faa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f82f 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ffc8 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000fc0:	f002 fbe0 	bl	8003784 <HAL_MspInit>
}
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	bd08      	pop	{r3, pc}
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x10>)
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_IncTick+0x14>)
 8000fd0:	6811      	ldr	r1, [r2, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	440b      	add	r3, r1
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000208 	.word	0x20000208
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <HAL_GetTick+0x8>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000208 	.word	0x20000208

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fff6 	bl	8000fe4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	bf1c      	itt	ne
 8000ffc:	4b05      	ldrne	r3, [pc, #20]	; (8001014 <HAL_Delay+0x24>)
 8000ffe:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001000:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001002:	bf18      	it	ne
 8001004:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	f7ff ffed 	bl	8000fe4 <HAL_GetTick>
 800100a:	1b40      	subs	r0, r0, r5
 800100c:	4284      	cmp	r4, r0
 800100e:	d8fa      	bhi.n	8001006 <HAL_Delay+0x16>
  {
  }
}
 8001010:	bd38      	pop	{r3, r4, r5, pc}
 8001012:	bf00      	nop
 8001014:	20000000 	.word	0x20000000

08001018 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800101a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001020:	041b      	lsls	r3, r3, #16
 8001022:	0c1b      	lsrs	r3, r3, #16
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	0200      	lsls	r0, r0, #8
 800102a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001032:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001034:	60d3      	str	r3, [r2, #12]
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b530      	push	{r4, r5, lr}
 8001040:	68dc      	ldr	r4, [r3, #12]
 8001042:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001046:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	2b04      	cmp	r3, #4
 800104e:	bf28      	it	cs
 8001050:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 0501 	mov.w	r5, #1
 8001058:	fa05 f303 	lsl.w	r3, r5, r3
 800105c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001060:	bf8c      	ite	hi
 8001062:	3c03      	subhi	r4, #3
 8001064:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001066:	4019      	ands	r1, r3
 8001068:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106a:	fa05 f404 	lsl.w	r4, r5, r4
 800106e:	3c01      	subs	r4, #1
 8001070:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001072:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	ea42 0201 	orr.w	r2, r2, r1
 8001078:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	bfad      	iteet	ge
 800107e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	f000 000f 	andlt.w	r0, r0, #15
 8001086:	4b06      	ldrlt	r3, [pc, #24]	; (80010a0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	bfb5      	itete	lt
 800108e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001098:	bd30      	pop	{r4, r5, pc}
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	e000ed14 	.word	0xe000ed14

080010a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010a4:	2800      	cmp	r0, #0
 80010a6:	db08      	blt.n	80010ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a8:	0942      	lsrs	r2, r0, #5
 80010aa:	2301      	movs	r3, #1
 80010ac:	f000 001f 	and.w	r0, r0, #31
 80010b0:	fa03 f000 	lsl.w	r0, r3, r0
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <HAL_NVIC_EnableIRQ+0x18>)
 80010b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	3801      	subs	r0, #1
 80010c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010c6:	d20a      	bcs.n	80010de <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010cc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	21f0      	movs	r1, #240	; 0xf0
 80010d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d003      	beq.n	80010fc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
 80010fa:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80010fe:	2305      	movs	r3, #5
 8001100:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001104:	6813      	ldr	r3, [r2, #0]
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800110c:	2000      	movs	r0, #0
}
 800110e:	4770      	bx	lr

08001110 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8001110:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001114:	4770      	bx	lr
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80012d0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001124:	4a68      	ldr	r2, [pc, #416]	; (80012c8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80012d4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800112e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001134:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001138:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800113c:	45b6      	cmp	lr, r6
 800113e:	f040 80ae 	bne.w	800129e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001142:	684c      	ldr	r4, [r1, #4]
 8001144:	f024 0710 	bic.w	r7, r4, #16
 8001148:	2f02      	cmp	r7, #2
 800114a:	d116      	bne.n	800117a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800114c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001150:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001154:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001158:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001160:	f04f 0c0f 	mov.w	ip, #15
 8001164:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001168:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	690d      	ldr	r5, [r1, #16]
 800116e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001172:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	f8ca 5020 	str.w	r5, [sl, #32]
 800117a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001180:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001184:	fa05 f50a 	lsl.w	r5, r5, sl
 8001188:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001192:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800119c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800119e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a2:	d811      	bhi.n	80011c8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80011a4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011aa:	68cf      	ldr	r7, [r1, #12]
 80011ac:	fa07 fc0a 	lsl.w	ip, r7, sl
 80011b0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80011b4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011b6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011bc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80011c0:	409f      	lsls	r7, r3
 80011c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011c6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011c8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	688f      	ldr	r7, [r1, #8]
 80011ce:	fa07 f70a 	lsl.w	r7, r7, sl
 80011d2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80011d4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d6:	00e5      	lsls	r5, r4, #3
 80011d8:	d561      	bpl.n	800129e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	f04f 0b00 	mov.w	fp, #0
 80011de:	f8cd b00c 	str.w	fp, [sp, #12]
 80011e2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	4d39      	ldr	r5, [pc, #228]	; (80012cc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011ec:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011f0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011f4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011f8:	9703      	str	r7, [sp, #12]
 80011fa:	9f03      	ldr	r7, [sp, #12]
 80011fc:	f023 0703 	bic.w	r7, r3, #3
 8001200:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001204:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001208:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800120c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001214:	f04f 0e0f 	mov.w	lr, #15
 8001218:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001222:	d043      	beq.n	80012ac <HAL_GPIO_Init+0x194>
 8001224:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001228:	42a8      	cmp	r0, r5
 800122a:	d041      	beq.n	80012b0 <HAL_GPIO_Init+0x198>
 800122c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001230:	42a8      	cmp	r0, r5
 8001232:	d03f      	beq.n	80012b4 <HAL_GPIO_Init+0x19c>
 8001234:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001238:	42a8      	cmp	r0, r5
 800123a:	d03d      	beq.n	80012b8 <HAL_GPIO_Init+0x1a0>
 800123c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001240:	42a8      	cmp	r0, r5
 8001242:	d03b      	beq.n	80012bc <HAL_GPIO_Init+0x1a4>
 8001244:	4548      	cmp	r0, r9
 8001246:	d03b      	beq.n	80012c0 <HAL_GPIO_Init+0x1a8>
 8001248:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800124c:	42a8      	cmp	r0, r5
 800124e:	d039      	beq.n	80012c4 <HAL_GPIO_Init+0x1ac>
 8001250:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001254:	42a8      	cmp	r0, r5
 8001256:	bf14      	ite	ne
 8001258:	2508      	movne	r5, #8
 800125a:	2507      	moveq	r5, #7
 800125c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001260:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001264:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001266:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001268:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800126e:	bf0c      	ite	eq
 8001270:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001272:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001274:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001276:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001278:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800127c:	bf0c      	ite	eq
 800127e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001280:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001282:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001284:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001286:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800128a:	bf0c      	ite	eq
 800128c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800128e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001290:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001292:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001294:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001296:	bf54      	ite	pl
 8001298:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800129a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800129c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	3301      	adds	r3, #1
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	f47f af44 	bne.w	800112e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80012a6:	b005      	add	sp, #20
 80012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ac:	465d      	mov	r5, fp
 80012ae:	e7d5      	b.n	800125c <HAL_GPIO_Init+0x144>
 80012b0:	2501      	movs	r5, #1
 80012b2:	e7d3      	b.n	800125c <HAL_GPIO_Init+0x144>
 80012b4:	2502      	movs	r5, #2
 80012b6:	e7d1      	b.n	800125c <HAL_GPIO_Init+0x144>
 80012b8:	2503      	movs	r5, #3
 80012ba:	e7cf      	b.n	800125c <HAL_GPIO_Init+0x144>
 80012bc:	2504      	movs	r5, #4
 80012be:	e7cd      	b.n	800125c <HAL_GPIO_Init+0x144>
 80012c0:	2505      	movs	r5, #5
 80012c2:	e7cb      	b.n	800125c <HAL_GPIO_Init+0x144>
 80012c4:	2506      	movs	r5, #6
 80012c6:	e7c9      	b.n	800125c <HAL_GPIO_Init+0x144>
 80012c8:	40013c00 	.word	0x40013c00
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40021400 	.word	0x40021400

080012d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	b10a      	cbz	r2, 80012de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012da:	6181      	str	r1, [r0, #24]
 80012dc:	4770      	bx	lr
 80012de:	0409      	lsls	r1, r1, #16
 80012e0:	e7fb      	b.n	80012da <HAL_GPIO_WritePin+0x2>

080012e2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012e2:	6801      	ldr	r1, [r0, #0]
 80012e4:	694b      	ldr	r3, [r1, #20]
 80012e6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	d010      	beq.n	8001312 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012f0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012f4:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80012f6:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80012f8:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80012fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012fe:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001302:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001304:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800130e:	2001      	movs	r0, #1
 8001310:	4770      	bx	lr
  }
  return HAL_OK;
 8001312:	4618      	mov	r0, r3
}
 8001314:	4770      	bx	lr

08001316 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001316:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800131a:	4604      	mov	r4, r0
 800131c:	4617      	mov	r7, r2
 800131e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001320:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001324:	b28e      	uxth	r6, r1
 8001326:	6825      	ldr	r5, [r4, #0]
 8001328:	f1b8 0f01 	cmp.w	r8, #1
 800132c:	bf0c      	ite	eq
 800132e:	696b      	ldreq	r3, [r5, #20]
 8001330:	69ab      	ldrne	r3, [r5, #24]
 8001332:	ea36 0303 	bics.w	r3, r6, r3
 8001336:	bf14      	ite	ne
 8001338:	2001      	movne	r0, #1
 800133a:	2000      	moveq	r0, #0
 800133c:	b908      	cbnz	r0, 8001342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800133e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001342:	696b      	ldr	r3, [r5, #20]
 8001344:	055a      	lsls	r2, r3, #21
 8001346:	d516      	bpl.n	8001376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001350:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001354:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001356:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001358:	2300      	movs	r3, #0
 800135a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800135c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001360:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001364:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001366:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800136a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800136c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
 8001372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001376:	1c7b      	adds	r3, r7, #1
 8001378:	d0d5      	beq.n	8001326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800137a:	f7ff fe33 	bl	8000fe4 <HAL_GetTick>
 800137e:	eba0 0009 	sub.w	r0, r0, r9
 8001382:	4287      	cmp	r7, r0
 8001384:	d301      	bcc.n	800138a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001386:	2f00      	cmp	r7, #0
 8001388:	d1cd      	bne.n	8001326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800138a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800138c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800138e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001390:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001394:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001398:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	e7e4      	b.n	800136a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080013a0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	075b      	lsls	r3, r3, #29
 80013ae:	d501      	bpl.n	80013b4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80013b0:	2000      	movs	r0, #0
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff ff94 	bl	80012e2 <I2C_IsAcknowledgeFailed>
 80013ba:	b9a8      	cbnz	r0, 80013e8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80013bc:	1c6a      	adds	r2, r5, #1
 80013be:	d0f3      	beq.n	80013a8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c0:	f7ff fe10 	bl	8000fe4 <HAL_GetTick>
 80013c4:	1b80      	subs	r0, r0, r6
 80013c6:	4285      	cmp	r5, r0
 80013c8:	d301      	bcc.n	80013ce <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80013ca:	2d00      	cmp	r5, #0
 80013cc:	d1ec      	bne.n	80013a8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013ce:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80013d0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013d2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013e2:	f042 0220 	orr.w	r2, r2, #32
 80013e6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}

080013ec <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	4604      	mov	r4, r0
 80013f0:	460d      	mov	r5, r1
 80013f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	6943      	ldr	r3, [r0, #20]
 80013f8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80013fc:	d001      	beq.n	8001402 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80013fe:	2000      	movs	r0, #0
}
 8001400:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001402:	6942      	ldr	r2, [r0, #20]
 8001404:	06d2      	lsls	r2, r2, #27
 8001406:	d50e      	bpl.n	8001426 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001408:	f06f 0210 	mvn.w	r2, #16
 800140c:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800140e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001410:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001412:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001416:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800141a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800141c:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800141e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001422:	2001      	movs	r0, #1
 8001424:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001426:	f7ff fddd 	bl	8000fe4 <HAL_GetTick>
 800142a:	1b80      	subs	r0, r0, r6
 800142c:	42a8      	cmp	r0, r5
 800142e:	d801      	bhi.n	8001434 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001430:	2d00      	cmp	r5, #0
 8001432:	d1df      	bne.n	80013f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001434:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001436:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001438:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800143a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800143e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001442:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	e7e8      	b.n	800141c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800144a <I2C_WaitOnFlagUntilTimeout>:
{
 800144a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800144e:	9e08      	ldr	r6, [sp, #32]
 8001450:	4604      	mov	r4, r0
 8001452:	4690      	mov	r8, r2
 8001454:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001456:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800145a:	b28d      	uxth	r5, r1
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	f1b9 0f01 	cmp.w	r9, #1
 8001462:	bf0c      	ite	eq
 8001464:	695b      	ldreq	r3, [r3, #20]
 8001466:	699b      	ldrne	r3, [r3, #24]
 8001468:	ea35 0303 	bics.w	r3, r5, r3
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	4543      	cmp	r3, r8
 8001474:	d002      	beq.n	800147c <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
}
 8001478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800147c:	1c7b      	adds	r3, r7, #1
 800147e:	d0ed      	beq.n	800145c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001480:	f7ff fdb0 	bl	8000fe4 <HAL_GetTick>
 8001484:	1b80      	subs	r0, r0, r6
 8001486:	4287      	cmp	r7, r0
 8001488:	d301      	bcc.n	800148e <I2C_WaitOnFlagUntilTimeout+0x44>
 800148a:	2f00      	cmp	r7, #0
 800148c:	d1e6      	bne.n	800145c <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800148e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001490:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001492:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001494:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001498:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800149c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800149e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014a8:	2001      	movs	r0, #1
 80014aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080014ae <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80014ae:	b570      	push	{r4, r5, r6, lr}
 80014b0:	4604      	mov	r4, r0
 80014b2:	460d      	mov	r5, r1
 80014b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	061b      	lsls	r3, r3, #24
 80014bc:	d501      	bpl.n	80014c2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80014be:	2000      	movs	r0, #0
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff ff0d 	bl	80012e2 <I2C_IsAcknowledgeFailed>
 80014c8:	b9a8      	cbnz	r0, 80014f6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80014ca:	1c6a      	adds	r2, r5, #1
 80014cc:	d0f3      	beq.n	80014b6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ce:	f7ff fd89 	bl	8000fe4 <HAL_GetTick>
 80014d2:	1b80      	subs	r0, r0, r6
 80014d4:	4285      	cmp	r5, r0
 80014d6:	d301      	bcc.n	80014dc <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80014d8:	2d00      	cmp	r5, #0
 80014da:	d1ec      	bne.n	80014b6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014dc:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80014de:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014e0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014f0:	f042 0220 	orr.w	r2, r2, #32
 80014f4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080014fc <HAL_I2C_Init>:
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80014fe:	4604      	mov	r4, r0
 8001500:	b908      	cbnz	r0, 8001506 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001502:	2001      	movs	r0, #1
 8001504:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001506:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800150a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800150e:	b91b      	cbnz	r3, 8001518 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001510:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001514:	f002 f818 	bl	8003548 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001518:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800151a:	2324      	movs	r3, #36	; 0x24
 800151c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001520:	6813      	ldr	r3, [r2, #0]
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001528:	f001 fab4 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800152c:	6865      	ldr	r5, [r4, #4]
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_I2C_Init+0x138>)
 8001530:	429d      	cmp	r5, r3
 8001532:	d84d      	bhi.n	80015d0 <HAL_I2C_Init+0xd4>
 8001534:	4b40      	ldr	r3, [pc, #256]	; (8001638 <HAL_I2C_Init+0x13c>)
 8001536:	4298      	cmp	r0, r3
 8001538:	d9e3      	bls.n	8001502 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800153c:	493f      	ldr	r1, [pc, #252]	; (800163c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001540:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001548:	430b      	orrs	r3, r1
 800154a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800154c:	6a13      	ldr	r3, [r2, #32]
 800154e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001552:	3101      	adds	r1, #1
 8001554:	4319      	orrs	r1, r3
 8001556:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001558:	69d1      	ldr	r1, [r2, #28]
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_I2C_Init+0x138>)
 800155c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001560:	429d      	cmp	r5, r3
 8001562:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001566:	f100 30ff 	add.w	r0, r0, #4294967295
 800156a:	d848      	bhi.n	80015fe <HAL_I2C_Init+0x102>
 800156c:	006d      	lsls	r5, r5, #1
 800156e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001572:	3001      	adds	r0, #1
 8001574:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001578:	2b04      	cmp	r3, #4
 800157a:	bf38      	it	cc
 800157c:	2304      	movcc	r3, #4
 800157e:	430b      	orrs	r3, r1
 8001580:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001582:	6811      	ldr	r1, [r2, #0]
 8001584:	6a20      	ldr	r0, [r4, #32]
 8001586:	69e3      	ldr	r3, [r4, #28]
 8001588:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800158c:	4303      	orrs	r3, r0
 800158e:	430b      	orrs	r3, r1
 8001590:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001592:	6891      	ldr	r1, [r2, #8]
 8001594:	68e0      	ldr	r0, [r4, #12]
 8001596:	6923      	ldr	r3, [r4, #16]
 8001598:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800159c:	4303      	orrs	r3, r0
 800159e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80015a2:	430b      	orrs	r3, r1
 80015a4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a6:	68d1      	ldr	r1, [r2, #12]
 80015a8:	69a0      	ldr	r0, [r4, #24]
 80015aa:	6963      	ldr	r3, [r4, #20]
 80015ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80015b0:	4303      	orrs	r3, r0
 80015b2:	430b      	orrs	r3, r1
 80015b4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80015b6:	6813      	ldr	r3, [r2, #0]
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015be:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80015ce:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_I2C_Init+0x144>)
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d995      	bls.n	8001502 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015d6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80015d8:	4e18      	ldr	r6, [pc, #96]	; (800163c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015da:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80015dc:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015e4:	4333      	orrs	r3, r6
 80015e6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015e8:	6a13      	ldr	r3, [r2, #32]
 80015ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80015ee:	4371      	muls	r1, r6
 80015f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80015f8:	fbb1 f1f6 	udiv	r1, r1, r6
 80015fc:	e7a9      	b.n	8001552 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015fe:	68a3      	ldr	r3, [r4, #8]
 8001600:	b953      	cbnz	r3, 8001618 <HAL_I2C_Init+0x11c>
 8001602:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001606:	fbb0 f0f3 	udiv	r0, r0, r3
 800160a:	1c43      	adds	r3, r0, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	b16b      	cbz	r3, 800162e <HAL_I2C_Init+0x132>
 8001612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001616:	e7b2      	b.n	800157e <HAL_I2C_Init+0x82>
 8001618:	2319      	movs	r3, #25
 800161a:	436b      	muls	r3, r5
 800161c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001626:	b113      	cbz	r3, 800162e <HAL_I2C_Init+0x132>
 8001628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162c:	e7a7      	b.n	800157e <HAL_I2C_Init+0x82>
 800162e:	2301      	movs	r3, #1
 8001630:	e7a5      	b.n	800157e <HAL_I2C_Init+0x82>
 8001632:	bf00      	nop
 8001634:	000186a0 	.word	0x000186a0
 8001638:	001e847f 	.word	0x001e847f
 800163c:	000f4240 	.word	0x000f4240
 8001640:	003d08ff 	.word	0x003d08ff

08001644 <HAL_I2C_Master_Transmit>:
{
 8001644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001648:	4604      	mov	r4, r0
 800164a:	461f      	mov	r7, r3
 800164c:	460d      	mov	r5, r1
 800164e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff fcc8 	bl	8000fe4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001658:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800165a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800165c:	d004      	beq.n	8001668 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800165e:	2502      	movs	r5, #2
}
 8001660:	4628      	mov	r0, r5
 8001662:	b004      	add	sp, #16
 8001664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001668:	9000      	str	r0, [sp, #0]
 800166a:	2319      	movs	r3, #25
 800166c:	2201      	movs	r2, #1
 800166e:	4958      	ldr	r1, [pc, #352]	; (80017d0 <HAL_I2C_Master_Transmit+0x18c>)
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff feea 	bl	800144a <I2C_WaitOnFlagUntilTimeout>
 8001676:	2800      	cmp	r0, #0
 8001678:	d1f1      	bne.n	800165e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800167a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d0ed      	beq.n	800165e <HAL_I2C_Master_Transmit+0x1a>
 8001682:	2301      	movs	r3, #1
 8001684:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800168e:	bf5e      	ittt	pl
 8001690:	681a      	ldrpl	r2, [r3, #0]
 8001692:	f042 0201 	orrpl.w	r2, r2, #1
 8001696:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016a0:	2221      	movs	r2, #33	; 0x21
 80016a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016a6:	2210      	movs	r2, #16
 80016a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016ac:	2200      	movs	r2, #0
 80016ae:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80016b0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016b4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_I2C_Master_Transmit+0x190>)
 80016b8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80016bc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016c0:	2a08      	cmp	r2, #8
 80016c2:	d004      	beq.n	80016ce <HAL_I2C_Master_Transmit+0x8a>
 80016c4:	2a01      	cmp	r2, #1
 80016c6:	d002      	beq.n	80016ce <HAL_I2C_Master_Transmit+0x8a>
 80016c8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80016cc:	d104      	bne.n	80016d8 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e002      	b.n	80016de <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016da:	2a12      	cmp	r2, #18
 80016dc:	d0f7      	beq.n	80016ce <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016de:	9600      	str	r6, [sp, #0]
 80016e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016e2:	2200      	movs	r2, #0
 80016e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff feae 	bl	800144a <I2C_WaitOnFlagUntilTimeout>
 80016ee:	b108      	cbz	r0, 80016f4 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 80016f0:	2501      	movs	r5, #1
 80016f2:	e7b5      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016f4:	6923      	ldr	r3, [r4, #16]
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016fc:	d113      	bne.n	8001726 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016fe:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001702:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001704:	4633      	mov	r3, r6
 8001706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001708:	4933      	ldr	r1, [pc, #204]	; (80017d8 <HAL_I2C_Master_Transmit+0x194>)
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff fe03 	bl	8001316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001710:	4605      	mov	r5, r0
 8001712:	2800      	cmp	r0, #0
 8001714:	d1ec      	bne.n	80016f0 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	9003      	str	r0, [sp, #12]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	9203      	str	r2, [sp, #12]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001724:	e044      	b.n	80017b0 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001726:	11eb      	asrs	r3, r5, #7
 8001728:	f003 0306 	and.w	r3, r3, #6
 800172c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001730:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001732:	492a      	ldr	r1, [pc, #168]	; (80017dc <HAL_I2C_Master_Transmit+0x198>)
 8001734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001736:	4633      	mov	r3, r6
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff fdec 	bl	8001316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800173e:	2800      	cmp	r0, #0
 8001740:	d1d6      	bne.n	80016f0 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	b2ed      	uxtb	r5, r5
 8001746:	611d      	str	r5, [r3, #16]
 8001748:	e7dc      	b.n	8001704 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174a:	4632      	mov	r2, r6
 800174c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff fead 	bl	80014ae <I2C_WaitOnTXEFlagUntilTimeout>
 8001754:	b140      	cbz	r0, 8001768 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001758:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800175a:	bf01      	itttt	eq
 800175c:	6822      	ldreq	r2, [r4, #0]
 800175e:	6813      	ldreq	r3, [r2, #0]
 8001760:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001764:	6013      	streq	r3, [r2, #0]
 8001766:	e7c3      	b.n	80016f0 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176a:	6820      	ldr	r0, [r4, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001772:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001774:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001776:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001778:	3a01      	subs	r2, #1
 800177a:	b292      	uxth	r2, r2
 800177c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800177e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001780:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001782:	1e51      	subs	r1, r2, #1
 8001784:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001786:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001788:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800178a:	d50a      	bpl.n	80017a2 <HAL_I2C_Master_Transmit+0x15e>
 800178c:	b149      	cbz	r1, 80017a2 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800178e:	7859      	ldrb	r1, [r3, #1]
 8001790:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001792:	3302      	adds	r3, #2
 8001794:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001798:	3b01      	subs	r3, #1
 800179a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800179c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800179e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80017a0:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a2:	4632      	mov	r2, r6
 80017a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff fdfa 	bl	80013a0 <I2C_WaitOnBTFFlagUntilTimeout>
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d1d2      	bne.n	8001756 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 80017b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1c9      	bne.n	800174a <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b6:	6821      	ldr	r1, [r4, #0]
 80017b8:	680a      	ldr	r2, [r1, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017be:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	2220      	movs	r2, #32
 80017c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80017c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80017ce:	e747      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1c>
 80017d0:	00100002 	.word	0x00100002
 80017d4:	ffff0000 	.word	0xffff0000
 80017d8:	00010002 	.word	0x00010002
 80017dc:	00010008 	.word	0x00010008

080017e0 <HAL_I2C_Master_Receive>:
{
 80017e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017e4:	4604      	mov	r4, r0
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	4698      	mov	r8, r3
 80017ea:	460f      	mov	r7, r1
 80017ec:	4691      	mov	r9, r2
 80017ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fbf8 	bl	8000fe4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80017f8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80017fa:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fc:	d004      	beq.n	8001808 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80017fe:	2702      	movs	r7, #2
}
 8001800:	4638      	mov	r0, r7
 8001802:	b009      	add	sp, #36	; 0x24
 8001804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001808:	9000      	str	r0, [sp, #0]
 800180a:	2319      	movs	r3, #25
 800180c:	2201      	movs	r2, #1
 800180e:	49a6      	ldr	r1, [pc, #664]	; (8001aa8 <HAL_I2C_Master_Receive+0x2c8>)
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fe1a 	bl	800144a <I2C_WaitOnFlagUntilTimeout>
 8001816:	2800      	cmp	r0, #0
 8001818:	d1f1      	bne.n	80017fe <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800181a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800181e:	2b01      	cmp	r3, #1
 8001820:	d0ed      	beq.n	80017fe <HAL_I2C_Master_Receive+0x1e>
 8001822:	2301      	movs	r3, #1
 8001824:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800182e:	bf5e      	ittt	pl
 8001830:	681a      	ldrpl	r2, [r3, #0]
 8001832:	f042 0201 	orrpl.w	r2, r2, #1
 8001836:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800183e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001840:	2222      	movs	r2, #34	; 0x22
 8001842:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001846:	2210      	movs	r2, #16
 8001848:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800184c:	2200      	movs	r2, #0
 800184e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001850:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001854:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001856:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001858:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_I2C_Master_Receive+0x2cc>)
 800185a:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800185c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800185e:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8001860:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001864:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001868:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800186a:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800186c:	d004      	beq.n	8001878 <HAL_I2C_Master_Receive+0x98>
 800186e:	2a01      	cmp	r2, #1
 8001870:	d002      	beq.n	8001878 <HAL_I2C_Master_Receive+0x98>
 8001872:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001876:	d104      	bne.n	8001882 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e002      	b.n	8001888 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001882:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001884:	2a11      	cmp	r2, #17
 8001886:	d0f7      	beq.n	8001878 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001888:	9500      	str	r5, [sp, #0]
 800188a:	4633      	mov	r3, r6
 800188c:	2200      	movs	r2, #0
 800188e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff fdd9 	bl	800144a <I2C_WaitOnFlagUntilTimeout>
 8001898:	b108      	cbz	r0, 800189e <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 800189a:	2701      	movs	r7, #1
 800189c:	e7b0      	b.n	8001800 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800189e:	6923      	ldr	r3, [r4, #16]
 80018a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	d140      	bne.n	800192a <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018a8:	f047 0701 	orr.w	r7, r7, #1
 80018ac:	b2ff      	uxtb	r7, r7
 80018ae:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018b0:	462b      	mov	r3, r5
 80018b2:	4632      	mov	r2, r6
 80018b4:	497e      	ldr	r1, [pc, #504]	; (8001ab0 <HAL_I2C_Master_Receive+0x2d0>)
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fd2d 	bl	8001316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018bc:	4607      	mov	r7, r0
 80018be:	2800      	cmp	r0, #0
 80018c0:	d1eb      	bne.n	800189a <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 80018c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d063      	beq.n	8001992 <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 80018ca:	2a01      	cmp	r2, #1
 80018cc:	d174      	bne.n	80019b8 <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	9704      	str	r7, [sp, #16]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	9204      	str	r2, [sp, #16]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	9204      	str	r2, [sp, #16]
 80018e0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e8:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018ea:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001ab8 <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 80018ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d058      	beq.n	80019a6 <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	f200 80ba 	bhi.w	8001a6e <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d177      	bne.n	80019ee <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018fe:	462a      	mov	r2, r5
 8001900:	4631      	mov	r1, r6
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff fd72 	bl	80013ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001908:	2800      	cmp	r0, #0
 800190a:	d1c6      	bne.n	800189a <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001910:	6912      	ldr	r2, [r2, #16]
 8001912:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001916:	3301      	adds	r3, #1
 8001918:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800191a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001920:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001922:	3b01      	subs	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001928:	e7e1      	b.n	80018ee <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800192a:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800192e:	f008 0806 	and.w	r8, r8, #6
 8001932:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001936:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001938:	495e      	ldr	r1, [pc, #376]	; (8001ab4 <HAL_I2C_Master_Receive+0x2d4>)
 800193a:	462b      	mov	r3, r5
 800193c:	4632      	mov	r2, r6
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff fce9 	bl	8001316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001944:	2800      	cmp	r0, #0
 8001946:	d1a8      	bne.n	800189a <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001948:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800194a:	4959      	ldr	r1, [pc, #356]	; (8001ab0 <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800194c:	b2ff      	uxtb	r7, r7
 800194e:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001950:	4632      	mov	r2, r6
 8001952:	462b      	mov	r3, r5
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fcde 	bl	8001316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800195a:	4602      	mov	r2, r0
 800195c:	2800      	cmp	r0, #0
 800195e:	d19c      	bne.n	800189a <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	9007      	str	r0, [sp, #28]
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	9107      	str	r1, [sp, #28]
 8001968:	6999      	ldr	r1, [r3, #24]
 800196a:	9107      	str	r1, [sp, #28]
 800196c:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001974:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001976:	4620      	mov	r0, r4
 8001978:	9500      	str	r5, [sp, #0]
 800197a:	4633      	mov	r3, r6
 800197c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001980:	f7ff fd63 	bl	800144a <I2C_WaitOnFlagUntilTimeout>
 8001984:	2800      	cmp	r0, #0
 8001986:	d188      	bne.n	800189a <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800198e:	6113      	str	r3, [r2, #16]
 8001990:	e78e      	b.n	80018b0 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001992:	9703      	str	r7, [sp, #12]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	9203      	str	r2, [sp, #12]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	9203      	str	r2, [sp, #12]
 800199c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	2320      	movs	r3, #32
 80019a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80019b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80019b6:	e723      	b.n	8001800 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 80019b8:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ba:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80019bc:	d10d      	bne.n	80019da <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ca:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019cc:	9705      	str	r7, [sp, #20]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	9205      	str	r2, [sp, #20]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	9305      	str	r3, [sp, #20]
 80019d6:	9b05      	ldr	r3, [sp, #20]
 80019d8:	e787      	b.n	80018ea <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019de:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e0:	9706      	str	r7, [sp, #24]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	9206      	str	r2, [sp, #24]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	9306      	str	r3, [sp, #24]
 80019ea:	9b06      	ldr	r3, [sp, #24]
 80019ec:	e77d      	b.n	80018ea <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 80019ee:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f0:	9500      	str	r5, [sp, #0]
 80019f2:	4633      	mov	r3, r6
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4641      	mov	r1, r8
 80019fa:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80019fc:	d11a      	bne.n	8001a34 <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019fe:	f7ff fd24 	bl	800144a <I2C_WaitOnFlagUntilTimeout>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	f47f af49 	bne.w	800189a <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a10:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001a18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a1a:	1c53      	adds	r3, r2, #1
 8001a1c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a20:	3b01      	subs	r3, #1
 8001a22:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	7053      	strb	r3, [r2, #1]
 8001a32:	e76f      	b.n	8001914 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a34:	f7ff fd09 	bl	800144a <I2C_WaitOnFlagUntilTimeout>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	f47f af2d 	bne.w	800189a <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001a48:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a52:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001a54:	3301      	adds	r3, #1
 8001a56:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a66:	4641      	mov	r1, r8
 8001a68:	4633      	mov	r3, r6
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	e7c7      	b.n	80019fe <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6e:	462a      	mov	r2, r5
 8001a70:	4631      	mov	r1, r6
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff fcba 	bl	80013ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	f47f af0e 	bne.w	800189a <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a82:	6912      	ldr	r2, [r2, #16]
 8001a84:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001a86:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a88:	1c53      	adds	r3, r2, #1
 8001a8a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001a8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	6959      	ldr	r1, [r3, #20]
 8001a9e:	0749      	lsls	r1, r1, #29
 8001aa0:	f57f af25 	bpl.w	80018ee <HAL_I2C_Master_Receive+0x10e>
 8001aa4:	e7c3      	b.n	8001a2e <HAL_I2C_Master_Receive+0x24e>
 8001aa6:	bf00      	nop
 8001aa8:	00100002 	.word	0x00100002
 8001aac:	ffff0000 	.word	0xffff0000
 8001ab0:	00010002 	.word	0x00010002
 8001ab4:	00010008 	.word	0x00010008
 8001ab8:	00010004 	.word	0x00010004

08001abc <HAL_I2C_MasterTxCpltCallback>:
 8001abc:	4770      	bx	lr

08001abe <HAL_I2C_SlaveTxCpltCallback>:
 8001abe:	4770      	bx	lr

08001ac0 <HAL_I2C_SlaveRxCpltCallback>:
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_I2C_AddrCallback>:
{
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_I2C_ListenCpltCallback>:
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_I2C_MemTxCpltCallback>:
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_I2C_MemRxCpltCallback>:
 8001ac8:	4770      	bx	lr

08001aca <HAL_I2C_ErrorCallback>:
 8001aca:	4770      	bx	lr

08001acc <HAL_I2C_AbortCpltCallback>:
{
 8001acc:	4770      	bx	lr

08001ace <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001ace:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad0:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ad2:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8001ad6:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad8:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001ada:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001adc:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001ade:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae0:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001ae4:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001ae6:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae8:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001aea:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8001aec:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001aee:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001af0:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001af4:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001af6:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001af8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001afc:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001afe:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b00:	d108      	bne.n	8001b14 <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b02:	2220      	movs	r2, #32
 8001b04:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001b08:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001b0c:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001b0e:	f7ff ffdd 	bl	8001acc <HAL_I2C_AbortCpltCallback>
 8001b12:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b14:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8001b18:	2928      	cmp	r1, #40	; 0x28
 8001b1a:	d10d      	bne.n	8001b38 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8001b1c:	6814      	ldr	r4, [r2, #0]
 8001b1e:	f044 0401 	orr.w	r4, r4, #1
 8001b22:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b24:	6814      	ldr	r4, [r2, #0]
 8001b26:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001b2a:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b2c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b2e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8001b32:	f7ff ffca 	bl	8001aca <HAL_I2C_ErrorCallback>
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001b42:	e7f6      	b.n	8001b32 <I2C_DMAAbort+0x64>

08001b44 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b44:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001b48:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001b4c:	2b10      	cmp	r3, #16
{
 8001b4e:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b50:	b2d2      	uxtb	r2, r2
{
 8001b52:	4604      	mov	r4, r0
 8001b54:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001b56:	d105      	bne.n	8001b64 <I2C_ITError+0x20>
 8001b58:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b5a:	bf02      	ittt	eq
 8001b5c:	6819      	ldreq	r1, [r3, #0]
 8001b5e:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8001b62:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b64:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8001b68:	2928      	cmp	r1, #40	; 0x28
 8001b6a:	d13a      	bne.n	8001be2 <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b70:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001b7a:	d059      	beq.n	8001c30 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001b7c:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001b7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b84:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001b86:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <I2C_ITError+0x13c>)
 8001b8e:	d035      	beq.n	8001bfc <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b90:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b92:	f7ff faab 	bl	80010ec <HAL_DMA_Abort_IT>
 8001b96:	b150      	cbz	r0, 8001bae <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8001b98:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b9a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001baa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001bac:	4798      	blx	r3
  CurrentState = hi2c->State;
 8001bae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001bb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bb4:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8001bb6:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001bb8:	d512      	bpl.n	8001be0 <I2C_ITError+0x9c>
 8001bba:	2b28      	cmp	r3, #40	; 0x28
 8001bbc:	d110      	bne.n	8001be0 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	6853      	ldr	r3, [r2, #4]
 8001bc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bc6:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <I2C_ITError+0x140>)
 8001bca:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8001bcc:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001bd2:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001bd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001bd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001bdc:	f7ff ff72 	bl	8001ac4 <HAL_I2C_ListenCpltCallback>
 8001be0:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	0509      	lsls	r1, r1, #20
 8001be6:	d404      	bmi.n	8001bf2 <I2C_ITError+0xae>
 8001be8:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	bf1c      	itt	ne
 8001bec:	2220      	movne	r2, #32
 8001bee:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001bfa:	e7bb      	b.n	8001b74 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001bfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bfe:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001c00:	f7ff fa74 	bl	80010ec <HAL_DMA_Abort_IT>
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d0d2      	beq.n	8001bae <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	0652      	lsls	r2, r2, #25
 8001c0e:	d505      	bpl.n	8001c1c <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8001c1c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001c2e:	e7bc      	b.n	8001baa <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c30:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001c34:	2960      	cmp	r1, #96	; 0x60
 8001c36:	d115      	bne.n	8001c64 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	2120      	movs	r1, #32
 8001c3a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3e:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	0650      	lsls	r0, r2, #25
 8001c44:	d505      	bpl.n	8001c52 <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c4e:	3301      	adds	r3, #1
 8001c50:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff ff35 	bl	8001acc <HAL_I2C_AbortCpltCallback>
 8001c62:	e7a4      	b.n	8001bae <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	0651      	lsls	r1, r2, #25
 8001c68:	d505      	bpl.n	8001c76 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c72:	3301      	adds	r3, #1
 8001c74:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8001c76:	4620      	mov	r0, r4
 8001c78:	f7ff ff27 	bl	8001aca <HAL_I2C_ErrorCallback>
 8001c7c:	e797      	b.n	8001bae <I2C_ITError+0x6a>
 8001c7e:	bf00      	nop
 8001c80:	08001acf 	.word	0x08001acf
 8001c84:	ffff0000 	.word	0xffff0000

08001c88 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c88:	6803      	ldr	r3, [r0, #0]
{
 8001c8a:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c8c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c8e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c90:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8001c94:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c96:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c98:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c9c:	2910      	cmp	r1, #16
{
 8001c9e:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ca0:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ca2:	d002      	beq.n	8001caa <HAL_I2C_EV_IRQHandler+0x22>
 8001ca4:	2940      	cmp	r1, #64	; 0x40
 8001ca6:	f040 82b6 	bne.w	8002216 <HAL_I2C_EV_IRQHandler+0x58e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001caa:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cac:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001cae:	f011 0f01 	tst.w	r1, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x3c>
 8001cb4:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001cb8:	d002      	beq.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 8001cba:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001cbe:	d152      	bne.n	8001d66 <HAL_I2C_EV_IRQHandler+0xde>
}
 8001cc0:	b00d      	add	sp, #52	; 0x34
 8001cc2:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cc4:	0595      	lsls	r5, r2, #22
 8001cc6:	d54e      	bpl.n	8001d66 <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cca:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001cce:	d10c      	bne.n	8001cea <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001cd0:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001cd2:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cd4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001cd8:	2a40      	cmp	r2, #64	; 0x40
 8001cda:	d111      	bne.n	8001d00 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8001cdc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001cde:	b952      	cbnz	r2, 8001cf6 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ce0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ce2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	e7ea      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001cea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cec:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	e7ed      	b.n	8001cd2 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001cf6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	e7f2      	b.n	8001ce6 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d00:	6922      	ldr	r2, [r4, #16]
 8001d02:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001d06:	d11b      	bne.n	8001d40 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d08:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001d0c:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d10:	d112      	bne.n	8001d38 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d16:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001d18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d1a:	b912      	cbnz	r2, 8001d22 <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001d1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d1e:	2900      	cmp	r1, #0
 8001d20:	d0ce      	beq.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d24:	b91a      	cbnz	r2, 8001d2e <HAL_I2C_EV_IRQHandler+0xa6>
 8001d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d2a:	2a00      	cmp	r2, #0
 8001d2c:	d0c8      	beq.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	e7c3      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	e7ea      	b.n	8001d16 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8001d40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001d42:	b932      	cbnz	r2, 8001d52 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001d44:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d46:	11d2      	asrs	r2, r2, #7
 8001d48:	f002 0206 	and.w	r2, r2, #6
 8001d4c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001d50:	e7c9      	b.n	8001ce6 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8001d52:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001d54:	2a01      	cmp	r2, #1
 8001d56:	d1b3      	bne.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001d58:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d5a:	11d2      	asrs	r2, r2, #7
 8001d5c:	f002 0206 	and.w	r2, r2, #6
 8001d60:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001d64:	e7bf      	b.n	8001ce6 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d66:	070d      	lsls	r5, r1, #28
 8001d68:	d503      	bpl.n	8001d72 <HAL_I2C_EV_IRQHandler+0xea>
 8001d6a:	0595      	lsls	r5, r2, #22
 8001d6c:	d501      	bpl.n	8001d72 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001d6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d70:	e7e4      	b.n	8001d3c <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d72:	078d      	lsls	r5, r1, #30
 8001d74:	f140 80e1 	bpl.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001d78:	0595      	lsls	r5, r2, #22
 8001d7a:	f140 80de 	bpl.w	8001f3a <HAL_I2C_EV_IRQHandler+0x2b2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001d7e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001d82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001d84:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d86:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001d8a:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001d8c:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d8e:	f040 80cc 	bne.w	8001f2a <HAL_I2C_EV_IRQHandler+0x2a2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001d92:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001d94:	b940      	cbnz	r0, 8001da8 <HAL_I2C_EV_IRQHandler+0x120>
 8001d96:	2940      	cmp	r1, #64	; 0x40
 8001d98:	d106      	bne.n	8001da8 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9a:	9001      	str	r0, [sp, #4]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	9201      	str	r2, [sp, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	9b01      	ldr	r3, [sp, #4]
 8001da6:	e78b      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001da8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001daa:	b981      	cbnz	r1, 8001dce <HAL_I2C_EV_IRQHandler+0x146>
 8001dac:	6920      	ldr	r0, [r4, #16]
 8001dae:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001db2:	d10c      	bne.n	8001dce <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db4:	9102      	str	r1, [sp, #8]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	9202      	str	r2, [sp, #8]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	9202      	str	r2, [sp, #8]
 8001dbe:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8001dc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001dca:	3301      	adds	r3, #1
 8001dcc:	e028      	b.n	8001e20 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 8001dce:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001dd0:	b289      	uxth	r1, r1
 8001dd2:	b951      	cbnz	r1, 8001dea <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd4:	9103      	str	r1, [sp, #12]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	9203      	str	r2, [sp, #12]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	9203      	str	r2, [sp, #12]
 8001dde:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e019      	b.n	8001e1e <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8001dea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001dec:	b289      	uxth	r1, r1
 8001dee:	2901      	cmp	r1, #1
 8001df0:	d14a      	bne.n	8001e88 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001df2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001df6:	d11c      	bne.n	8001e32 <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfe:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001e06:	d00d      	beq.n	8001e24 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e10:	2200      	movs	r2, #0
 8001e12:	9204      	str	r2, [sp, #16]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	9204      	str	r2, [sp, #16]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	9304      	str	r3, [sp, #16]
 8001e1c:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	6523      	str	r3, [r4, #80]	; 0x50
 8001e22:	e74d      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e24:	9205      	str	r2, [sp, #20]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	9205      	str	r2, [sp, #20]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	9205      	str	r2, [sp, #20]
 8001e2e:	9a05      	ldr	r2, [sp, #20]
 8001e30:	e7d6      	b.n	8001de0 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001e32:	2a08      	cmp	r2, #8
 8001e34:	d01c      	beq.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1e8>
 8001e36:	2a20      	cmp	r2, #32
 8001e38:	d01a      	beq.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001e3a:	2d12      	cmp	r5, #18
 8001e3c:	d10d      	bne.n	8001e5a <HAL_I2C_EV_IRQHandler+0x1d2>
 8001e3e:	2a01      	cmp	r2, #1
 8001e40:	d116      	bne.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e48:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	9206      	str	r2, [sp, #24]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	9206      	str	r2, [sp, #24]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	9306      	str	r3, [sp, #24]
 8001e56:	9b06      	ldr	r3, [sp, #24]
 8001e58:	e7e1      	b.n	8001e1e <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e5a:	2a10      	cmp	r2, #16
 8001e5c:	d8f1      	bhi.n	8001e42 <HAL_I2C_EV_IRQHandler+0x1ba>
 8001e5e:	498e      	ldr	r1, [pc, #568]	; (8002098 <HAL_I2C_EV_IRQHandler+0x410>)
 8001e60:	fa21 f202 	lsr.w	r2, r1, r2
 8001e64:	07d0      	lsls	r0, r2, #31
 8001e66:	d5ec      	bpl.n	8001e42 <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e6e:	e7eb      	b.n	8001e48 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e76:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	9207      	str	r2, [sp, #28]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	9207      	str	r2, [sp, #28]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	9207      	str	r2, [sp, #28]
 8001e84:	9a07      	ldr	r2, [sp, #28]
 8001e86:	e7ab      	b.n	8001de0 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8001e88:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001e8a:	b289      	uxth	r1, r1
 8001e8c:	2902      	cmp	r1, #2
 8001e8e:	d12c      	bne.n	8001eea <HAL_I2C_EV_IRQHandler+0x262>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e90:	2a10      	cmp	r2, #16
 8001e92:	d803      	bhi.n	8001e9c <HAL_I2C_EV_IRQHandler+0x214>
 8001e94:	4980      	ldr	r1, [pc, #512]	; (8002098 <HAL_I2C_EV_IRQHandler+0x410>)
 8001e96:	40d1      	lsrs	r1, r2
 8001e98:	07c9      	lsls	r1, r1, #31
 8001e9a:	d422      	bmi.n	8001ee2 <HAL_I2C_EV_IRQHandler+0x25a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001ea2:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eaa:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001eac:	6859      	ldr	r1, [r3, #4]
 8001eae:	050d      	lsls	r5, r1, #20
 8001eb0:	d50f      	bpl.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x24a>
 8001eb2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001eb6:	d008      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x242>
 8001eb8:	1e51      	subs	r1, r2, #1
 8001eba:	291f      	cmp	r1, #31
 8001ebc:	bf9d      	ittte	ls
 8001ebe:	4a77      	ldrls	r2, [pc, #476]	; (800209c <HAL_I2C_EV_IRQHandler+0x414>)
 8001ec0:	40ca      	lsrls	r2, r1
 8001ec2:	43d2      	mvnls	r2, r2
 8001ec4:	2201      	movhi	r2, #1
 8001ec6:	07d0      	lsls	r0, r2, #31
 8001ec8:	d403      	bmi.n	8001ed2 <HAL_I2C_EV_IRQHandler+0x24a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ed0:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	9208      	str	r2, [sp, #32]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	9208      	str	r2, [sp, #32]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	9308      	str	r3, [sp, #32]
 8001ede:	9b08      	ldr	r3, [sp, #32]
 8001ee0:	e79d      	b.n	8001e1e <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001ee8:	e7df      	b.n	8001eaa <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001ef0:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	0509      	lsls	r1, r1, #20
 8001ef6:	d510      	bpl.n	8001f1a <HAL_I2C_EV_IRQHandler+0x292>
 8001ef8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001efc:	d009      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x28a>
 8001efe:	3a01      	subs	r2, #1
 8001f00:	2a1f      	cmp	r2, #31
 8001f02:	bf9d      	ittte	ls
 8001f04:	4965      	ldrls	r1, [pc, #404]	; (800209c <HAL_I2C_EV_IRQHandler+0x414>)
 8001f06:	fa21 f202 	lsrls.w	r2, r1, r2
 8001f0a:	43d2      	mvnls	r2, r2
 8001f0c:	2201      	movhi	r2, #1
 8001f0e:	07d2      	lsls	r2, r2, #31
 8001f10:	d403      	bmi.n	8001f1a <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f18:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	9209      	str	r2, [sp, #36]	; 0x24
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	9309      	str	r3, [sp, #36]	; 0x24
 8001f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f28:	e779      	b.n	8001e1e <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	920a      	str	r2, [sp, #40]	; 0x28
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	920a      	str	r2, [sp, #40]	; 0x28
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	930a      	str	r3, [sp, #40]	; 0x28
 8001f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f38:	e6c2      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f3a:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f3e:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f40:	f000 80ae 	beq.w	80020a0 <HAL_I2C_EV_IRQHandler+0x418>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f44:	0505      	lsls	r5, r0, #20
 8001f46:	f53f aebb 	bmi.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f4e:	f001 0104 	and.w	r1, r1, #4
 8001f52:	d069      	beq.n	8002028 <HAL_I2C_EV_IRQHandler+0x3a0>
 8001f54:	0550      	lsls	r0, r2, #21
 8001f56:	d567      	bpl.n	8002028 <HAL_I2C_EV_IRQHandler+0x3a0>
 8001f58:	2900      	cmp	r1, #0
 8001f5a:	d165      	bne.n	8002028 <HAL_I2C_EV_IRQHandler+0x3a0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f5c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f60:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f62:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f68:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f6a:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f6c:	b9c5      	cbnz	r5, 8001fa0 <HAL_I2C_EV_IRQHandler+0x318>
 8001f6e:	2a21      	cmp	r2, #33	; 0x21
 8001f70:	d118      	bne.n	8001fa4 <HAL_I2C_EV_IRQHandler+0x31c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f72:	2808      	cmp	r0, #8
 8001f74:	d078      	beq.n	8002068 <HAL_I2C_EV_IRQHandler+0x3e0>
 8001f76:	2820      	cmp	r0, #32
 8001f78:	d076      	beq.n	8002068 <HAL_I2C_EV_IRQHandler+0x3e0>
 8001f7a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001f7e:	d073      	beq.n	8002068 <HAL_I2C_EV_IRQHandler+0x3e0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f86:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f88:	2311      	movs	r3, #17
 8001f8a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	2320      	movs	r3, #32
 8001f94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff fd8f 	bl	8001abc <HAL_I2C_MasterTxCpltCallback>
 8001f9e:	e68f      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001fa0:	2a21      	cmp	r2, #33	; 0x21
 8001fa2:	d005      	beq.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x328>
 8001fa4:	2940      	cmp	r1, #64	; 0x40
 8001fa6:	f47f ae8b 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001faa:	2a22      	cmp	r2, #34	; 0x22
 8001fac:	f47f ae88 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8001fb0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	b91a      	cbnz	r2, 8001fbe <HAL_I2C_EV_IRQHandler+0x336>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbc:	e6ba      	b.n	8001d34 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fbe:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001fc2:	2a40      	cmp	r2, #64	; 0x40
 8001fc4:	d126      	bne.n	8002014 <HAL_I2C_EV_IRQHandler+0x38c>
        if (hi2c->EventCount == 0U)
 8001fc6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001fc8:	b962      	cbnz	r2, 8001fe4 <HAL_I2C_EV_IRQHandler+0x35c>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001fca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001fcc:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001fd0:	d104      	bne.n	8001fdc <HAL_I2C_EV_IRQHandler+0x354>
 8001fd2:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fd4:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001fd6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001fd8:	3302      	adds	r3, #2
 8001fda:	e721      	b.n	8001e20 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001fdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	e6f1      	b.n	8001dc8 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8001fe4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001fe6:	2a01      	cmp	r2, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_I2C_EV_IRQHandler+0x368>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	e7f7      	b.n	8001fe0 <HAL_I2C_EV_IRQHandler+0x358>
        else if (hi2c->EventCount == 2U)
 8001ff0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ff2:	2a02      	cmp	r2, #2
 8001ff4:	f47f ae64 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ff8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001ffc:	2a22      	cmp	r2, #34	; 0x22
 8001ffe:	d104      	bne.n	800200a <HAL_I2C_EV_IRQHandler+0x382>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e65a      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800200a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800200e:	2a21      	cmp	r2, #33	; 0x21
 8002010:	f47f ae56 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002014:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002016:	f812 1b01 	ldrb.w	r1, [r2], #1
 800201a:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 800201c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800201e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002020:	3b01      	subs	r3, #1
 8002022:	b29b      	uxth	r3, r3
 8002024:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002026:	e64b      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002028:	2900      	cmp	r1, #0
 800202a:	f43f ae49 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 800202e:	0592      	lsls	r2, r2, #22
 8002030:	f57f ae46 	bpl.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002034:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002036:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800203a:	2a21      	cmp	r2, #33	; 0x21
 800203c:	f47f ae40 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8002040:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002042:	b292      	uxth	r2, r2
 8002044:	2a00      	cmp	r2, #0
 8002046:	d1e5      	bne.n	8002014 <HAL_I2C_EV_IRQHandler+0x38c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002048:	2908      	cmp	r1, #8
 800204a:	d00d      	beq.n	8002068 <HAL_I2C_EV_IRQHandler+0x3e0>
 800204c:	2920      	cmp	r1, #32
 800204e:	d00b      	beq.n	8002068 <HAL_I2C_EV_IRQHandler+0x3e0>
 8002050:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002054:	d008      	beq.n	8002068 <HAL_I2C_EV_IRQHandler+0x3e0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800205c:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800205e:	2311      	movs	r3, #17
 8002060:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002062:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002066:	e794      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x30a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800206e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002078:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800207a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800207c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800207e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002082:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800208a:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 800208c:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800208e:	d184      	bne.n	8001f9a <HAL_I2C_EV_IRQHandler+0x312>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002090:	f7ff fd19 	bl	8001ac6 <HAL_I2C_MemTxCpltCallback>
 8002094:	e614      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 8002096:	bf00      	nop
 8002098:	00010014 	.word	0x00010014
 800209c:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020a0:	0505      	lsls	r5, r0, #20
 80020a2:	f53f ae0d 	bmi.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020a6:	f011 0f40 	tst.w	r1, #64	; 0x40
 80020aa:	f001 0104 	and.w	r1, r1, #4
 80020ae:	d048      	beq.n	8002142 <HAL_I2C_EV_IRQHandler+0x4ba>
 80020b0:	0550      	lsls	r0, r2, #21
 80020b2:	d546      	bpl.n	8002142 <HAL_I2C_EV_IRQHandler+0x4ba>
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d144      	bne.n	8002142 <HAL_I2C_EV_IRQHandler+0x4ba>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020b8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80020bc:	2a22      	cmp	r2, #34	; 0x22
 80020be:	f47f adff 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 80020c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020c4:	b292      	uxth	r2, r2
    if (tmp > 3U)
 80020c6:	2a03      	cmp	r2, #3
 80020c8:	d914      	bls.n	80020f4 <HAL_I2C_EV_IRQHandler+0x46c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80020d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020d2:	3301      	adds	r3, #1
 80020d4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80020d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80020de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	f47f adec 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	6853      	ldr	r3, [r2, #4]
 80020ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020f0:	6053      	str	r3, [r2, #4]
 80020f2:	e5e5      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80020f6:	2802      	cmp	r0, #2
 80020f8:	f43f ade2 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 80020fc:	2a01      	cmp	r2, #1
 80020fe:	f63f addf 	bhi.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002108:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002110:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800211a:	3301      	adds	r3, #1
 800211c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800211e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002120:	3b01      	subs	r3, #1
 8002122:	b29b      	uxth	r3, r3
 8002124:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002126:	2320      	movs	r3, #32
 8002128:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800212c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d168      	bne.n	800220a <HAL_I2C_EV_IRQHandler+0x582>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002138:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff fcc4 	bl	8001ac8 <HAL_I2C_MemRxCpltCallback>
 8002140:	e5be      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002142:	2900      	cmp	r1, #0
 8002144:	f43f adbc 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 8002148:	0592      	lsls	r2, r2, #22
 800214a:	f57f adb9 	bpl.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800214e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002150:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002152:	b289      	uxth	r1, r1
 8002154:	2904      	cmp	r1, #4
 8002156:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002158:	d109      	bne.n	800216e <HAL_I2C_EV_IRQHandler+0x4e6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002160:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	6263      	str	r3, [r4, #36]	; 0x24
 800216c:	e757      	b.n	800201e <HAL_I2C_EV_IRQHandler+0x396>
  else if (hi2c->XferCount == 3U)
 800216e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002170:	b280      	uxth	r0, r0
 8002172:	2803      	cmp	r0, #3
 8002174:	d10c      	bne.n	8002190 <HAL_I2C_EV_IRQHandler+0x508>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002176:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002178:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800217a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800217e:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002180:	d0ef      	beq.n	8002162 <HAL_I2C_EV_IRQHandler+0x4da>
 8002182:	2a02      	cmp	r2, #2
 8002184:	d0ed      	beq.n	8002162 <HAL_I2C_EV_IRQHandler+0x4da>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e7e8      	b.n	8002162 <HAL_I2C_EV_IRQHandler+0x4da>
  else if (hi2c->XferCount == 2U)
 8002190:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002192:	b280      	uxth	r0, r0
 8002194:	2802      	cmp	r0, #2
 8002196:	d1e4      	bne.n	8002162 <HAL_I2C_EV_IRQHandler+0x4da>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002198:	2a01      	cmp	r2, #1
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_EV_IRQHandler+0x518>
 800219c:	2a10      	cmp	r2, #16
 800219e:	d128      	bne.n	80021f2 <HAL_I2C_EV_IRQHandler+0x56a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80021ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021ae:	1c53      	adds	r3, r2, #1
 80021b0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80021b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80021c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021c2:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 80021c4:	3301      	adds	r3, #1
 80021c6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80021c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021d0:	6853      	ldr	r3, [r2, #4]
 80021d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d6:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	2320      	movs	r3, #32
 80021da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021de:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ec:	d10d      	bne.n	800220a <HAL_I2C_EV_IRQHandler+0x582>
      hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	6323      	str	r3, [r4, #48]	; 0x30
 80021f0:	e7a3      	b.n	800213a <HAL_I2C_EV_IRQHandler+0x4b2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80021f2:	2a04      	cmp	r2, #4
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_EV_IRQHandler+0x572>
 80021f6:	2a02      	cmp	r2, #2
 80021f8:	d103      	bne.n	8002202 <HAL_I2C_EV_IRQHandler+0x57a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002200:	e7d1      	b.n	80021a6 <HAL_I2C_EV_IRQHandler+0x51e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002208:	e7cd      	b.n	80021a6 <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800220a:	2312      	movs	r3, #18
 800220c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800220e:	4620      	mov	r0, r4
 8002210:	f001 f9fe 	bl	8003610 <HAL_I2C_MasterRxCpltCallback>
 8002214:	e554      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002216:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002218:	b321      	cbz	r1, 8002264 <HAL_I2C_EV_IRQHandler+0x5dc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800221a:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 800221c:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	f011 0f02 	tst.w	r1, #2
 8002222:	d029      	beq.n	8002278 <HAL_I2C_EV_IRQHandler+0x5f0>
 8002224:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002228:	d026      	beq.n	8002278 <HAL_I2C_EV_IRQHandler+0x5f0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800222a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800222c:	b102      	cbz	r2, 8002230 <HAL_I2C_EV_IRQHandler+0x5a8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800222e:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002230:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002234:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002238:	2a28      	cmp	r2, #40	; 0x28
 800223a:	d116      	bne.n	800226a <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002242:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002244:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002248:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 800224a:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800224e:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002252:	bf54      	ite	pl
 8002254:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002256:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002258:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff fc30 	bl	8001ac2 <HAL_I2C_AddrCallback>
 8002262:	e52d      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002264:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002266:	6959      	ldr	r1, [r3, #20]
 8002268:	e7d9      	b.n	800221e <HAL_I2C_EV_IRQHandler+0x596>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800226a:	f06f 0202 	mvn.w	r2, #2
 800226e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002270:	2300      	movs	r3, #0
 8002272:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002276:	e523      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002278:	06cd      	lsls	r5, r1, #27
 800227a:	f140 80af 	bpl.w	80023dc <HAL_I2C_EV_IRQHandler+0x754>
 800227e:	0595      	lsls	r5, r2, #22
 8002280:	f140 80ac 	bpl.w	80023dc <HAL_I2C_EV_IRQHandler+0x754>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002284:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800228e:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002290:	2200      	movs	r2, #0
 8002292:	920b      	str	r2, [sp, #44]	; 0x2c
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	920b      	str	r2, [sp, #44]	; 0x2c
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a8:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022ae:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022b0:	d520      	bpl.n	80022f4 <HAL_I2C_EV_IRQHandler+0x66c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022b2:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80022b6:	2a22      	cmp	r2, #34	; 0x22
 80022b8:	d148      	bne.n	800234c <HAL_I2C_EV_IRQHandler+0x6c4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80022ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022bc:	6802      	ldr	r2, [r0, #0]
 80022be:	6852      	ldr	r2, [r2, #4]
 80022c0:	b292      	uxth	r2, r2
 80022c2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80022c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80022c6:	b292      	uxth	r2, r2
 80022c8:	b11a      	cbz	r2, 80022d2 <HAL_I2C_EV_IRQHandler+0x64a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022cc:	f042 0204 	orr.w	r2, r2, #4
 80022d0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022da:	f7fe ff19 	bl	8001110 <HAL_DMA_GetState>
 80022de:	2801      	cmp	r0, #1
 80022e0:	d008      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022e4:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_I2C_EV_IRQHandler+0x840>)
 80022e6:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022e8:	f7fe ff00 	bl	80010ec <HAL_DMA_Abort_IT>
 80022ec:	b110      	cbz	r0, 80022f4 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80022f2:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80022f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	b313      	cbz	r3, 8002340 <HAL_I2C_EV_IRQHandler+0x6b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	0752      	lsls	r2, r2, #29
 8002300:	d509      	bpl.n	8002316 <HAL_I2C_EV_IRQHandler+0x68e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800230e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002310:	3b01      	subs	r3, #1
 8002312:	b29b      	uxth	r3, r3
 8002314:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	0650      	lsls	r0, r2, #25
 800231c:	d509      	bpl.n	8002332 <HAL_I2C_EV_IRQHandler+0x6aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002326:	3301      	adds	r3, #1
 8002328:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800232a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800232c:	3b01      	subs	r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8002332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	b11b      	cbz	r3, 8002340 <HAL_I2C_EV_IRQHandler+0x6b8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002342:	b303      	cbz	r3, 8002386 <HAL_I2C_EV_IRQHandler+0x6fe>
    I2C_ITError(hi2c);
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff fbfd 	bl	8001b44 <I2C_ITError>
 800234a:	e4b9      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800234c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800234e:	6802      	ldr	r2, [r0, #0]
 8002350:	6852      	ldr	r2, [r2, #4]
 8002352:	b292      	uxth	r2, r2
 8002354:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002356:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002358:	b292      	uxth	r2, r2
 800235a:	b11a      	cbz	r2, 8002364 <HAL_I2C_EV_IRQHandler+0x6dc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800235c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800235e:	f042 0204 	orr.w	r2, r2, #4
 8002362:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800236c:	f7fe fed0 	bl	8001110 <HAL_DMA_GetState>
 8002370:	2801      	cmp	r0, #1
 8002372:	d0bf      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002374:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002376:	4b54      	ldr	r3, [pc, #336]	; (80024c8 <HAL_I2C_EV_IRQHandler+0x840>)
 8002378:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800237a:	f7fe feb7 	bl	80010ec <HAL_DMA_Abort_IT>
 800237e:	2800      	cmp	r0, #0
 8002380:	d0b8      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002382:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002384:	e7b4      	b.n	80022f0 <HAL_I2C_EV_IRQHandler+0x668>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002386:	2d2a      	cmp	r5, #42	; 0x2a
 8002388:	d106      	bne.n	8002398 <HAL_I2C_EV_IRQHandler+0x710>
      hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800238c:	2328      	movs	r3, #40	; 0x28
 800238e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff fb94 	bl	8001ac0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002398:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800239c:	2b28      	cmp	r3, #40	; 0x28
 800239e:	d10c      	bne.n	80023ba <HAL_I2C_EV_IRQHandler+0x732>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a0:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_I2C_EV_IRQHandler+0x844>)
 80023a2:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 80023aa:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80023b4:	f7ff fb86 	bl	8001ac4 <HAL_I2C_ListenCpltCallback>
 80023b8:	e482      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023bc:	2b22      	cmp	r3, #34	; 0x22
 80023be:	d002      	beq.n	80023c6 <HAL_I2C_EV_IRQHandler+0x73e>
 80023c0:	2d22      	cmp	r5, #34	; 0x22
 80023c2:	f47f ac7d 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80023ca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff fb73 	bl	8001ac0 <HAL_I2C_SlaveRxCpltCallback>
 80023da:	e471      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023dc:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80023e0:	2821      	cmp	r0, #33	; 0x21
 80023e2:	f001 0504 	and.w	r5, r1, #4
 80023e6:	d135      	bne.n	8002454 <HAL_I2C_EV_IRQHandler+0x7cc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023e8:	0609      	lsls	r1, r1, #24
 80023ea:	d527      	bpl.n	800243c <HAL_I2C_EV_IRQHandler+0x7b4>
 80023ec:	0551      	lsls	r1, r2, #21
 80023ee:	d525      	bpl.n	800243c <HAL_I2C_EV_IRQHandler+0x7b4>
 80023f0:	bb25      	cbnz	r5, 800243c <HAL_I2C_EV_IRQHandler+0x7b4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023f2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80023f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023f8:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023fa:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	f43f ac5f 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002402:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002404:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002408:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800240a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800240c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800240e:	3a01      	subs	r2, #1
 8002410:	b292      	uxth	r2, r2
 8002412:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002414:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002416:	b292      	uxth	r2, r2
 8002418:	2a00      	cmp	r2, #0
 800241a:	f47f ac51 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 800241e:	2929      	cmp	r1, #41	; 0x29
 8002420:	f47f ac4e 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800242c:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800242e:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002430:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff fb42 	bl	8001abe <HAL_I2C_SlaveTxCpltCallback>
 800243a:	e441      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800243c:	2d00      	cmp	r5, #0
 800243e:	f43f ac3f 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 8002442:	0595      	lsls	r5, r2, #22
 8002444:	f57f ac3c 	bpl.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002448:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800244a:	b292      	uxth	r2, r2
 800244c:	2a00      	cmp	r2, #0
 800244e:	f47f ade1 	bne.w	8002014 <HAL_I2C_EV_IRQHandler+0x38c>
 8002452:	e435      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002454:	0648      	lsls	r0, r1, #25
 8002456:	d527      	bpl.n	80024a8 <HAL_I2C_EV_IRQHandler+0x820>
 8002458:	0551      	lsls	r1, r2, #21
 800245a:	d525      	bpl.n	80024a8 <HAL_I2C_EV_IRQHandler+0x820>
 800245c:	bb25      	cbnz	r5, 80024a8 <HAL_I2C_EV_IRQHandler+0x820>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800245e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002462:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002464:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002466:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002468:	2900      	cmp	r1, #0
 800246a:	f43f ac29 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002476:	3301      	adds	r3, #1
 8002478:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800247a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800247c:	3b01      	subs	r3, #1
 800247e:	b29b      	uxth	r3, r3
 8002480:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002482:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f ac1a 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 800248c:	2a2a      	cmp	r2, #42	; 0x2a
 800248e:	f47f ac17 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002492:	6822      	ldr	r2, [r4, #0]
 8002494:	6853      	ldr	r3, [r2, #4]
 8002496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800249a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800249c:	2322      	movs	r3, #34	; 0x22
 800249e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024a0:	2328      	movs	r3, #40	; 0x28
 80024a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80024a6:	e795      	b.n	80023d4 <HAL_I2C_EV_IRQHandler+0x74c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	f43f ac09 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
 80024ae:	0592      	lsls	r2, r2, #22
 80024b0:	f57f ac06 	bpl.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80024b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024b6:	b292      	uxth	r2, r2
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	f43f ac01 	beq.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	7013      	strb	r3, [r2, #0]
 80024c4:	e64f      	b.n	8002166 <HAL_I2C_EV_IRQHandler+0x4de>
 80024c6:	bf00      	nop
 80024c8:	08001acf 	.word	0x08001acf
 80024cc:	ffff0000 	.word	0xffff0000

080024d0 <HAL_I2C_ER_IRQHandler>:
{
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80024d6:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024d8:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 80024dc:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024de:	d006      	beq.n	80024ee <HAL_I2C_ER_IRQHandler+0x1e>
 80024e0:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024e4:	bf1e      	ittt	ne
 80024e6:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 80024ea:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 80024ec:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024ee:	05b9      	lsls	r1, r7, #22
 80024f0:	d506      	bpl.n	8002500 <HAL_I2C_ER_IRQHandler+0x30>
 80024f2:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024f4:	bf42      	ittt	mi
 80024f6:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 80024fa:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024fe:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002500:	0578      	lsls	r0, r7, #21
 8002502:	d537      	bpl.n	8002574 <HAL_I2C_ER_IRQHandler+0xa4>
 8002504:	05f1      	lsls	r1, r6, #23
 8002506:	d535      	bpl.n	8002574 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 8002508:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 800250c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 800250e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002512:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002514:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 8002518:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800251a:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800251c:	d15a      	bne.n	80025d4 <HAL_I2C_ER_IRQHandler+0x104>
 800251e:	2900      	cmp	r1, #0
 8002520:	d158      	bne.n	80025d4 <HAL_I2C_ER_IRQHandler+0x104>
 8002522:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002526:	2921      	cmp	r1, #33	; 0x21
 8002528:	d003      	beq.n	8002532 <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800252a:	2a28      	cmp	r2, #40	; 0x28
 800252c:	d152      	bne.n	80025d4 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800252e:	2821      	cmp	r0, #33	; 0x21
 8002530:	d150      	bne.n	80025d4 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002532:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002536:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002538:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800253a:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800253c:	d001      	beq.n	8002542 <HAL_I2C_ER_IRQHandler+0x72>
 800253e:	2920      	cmp	r1, #32
 8002540:	d12a      	bne.n	8002598 <HAL_I2C_ER_IRQHandler+0xc8>
 8002542:	2a28      	cmp	r2, #40	; 0x28
 8002544:	d128      	bne.n	8002598 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002546:	4a2c      	ldr	r2, [pc, #176]	; (80025f8 <HAL_I2C_ER_IRQHandler+0x128>)
 8002548:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002550:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002556:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255e:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002560:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002562:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002564:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002566:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002568:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800256c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002570:	f7ff faa8 	bl	8001ac4 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002574:	053a      	lsls	r2, r7, #20
 8002576:	d53c      	bpl.n	80025f2 <HAL_I2C_ER_IRQHandler+0x122>
 8002578:	05f3      	lsls	r3, r6, #23
 800257a:	d53a      	bpl.n	80025f2 <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002582:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002586:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800258a:	431d      	orrs	r5, r3
 800258c:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800258e:	4620      	mov	r0, r4
}
 8002590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002594:	f7ff bad6 	b.w	8001b44 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002598:	2a21      	cmp	r2, #33	; 0x21
 800259a:	d117      	bne.n	80025cc <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800259c:	4916      	ldr	r1, [pc, #88]	; (80025f8 <HAL_I2C_ER_IRQHandler+0x128>)
 800259e:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025a0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80025a2:	2220      	movs	r2, #32
 80025a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025a8:	2200      	movs	r2, #0
 80025aa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025b4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ba:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff fa7a 	bl	8001abe <HAL_I2C_SlaveTxCpltCallback>
 80025ca:	e7d3      	b.n	8002574 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	e7cf      	b.n	8002574 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d8:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80025da:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80025de:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	bf04      	itt	eq
 80025e2:	681a      	ldreq	r2, [r3, #0]
 80025e4:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 80025e8:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	bf08      	it	eq
 80025ee:	601a      	streq	r2, [r3, #0]
 80025f0:	e7c0      	b.n	8002574 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	d1c8      	bne.n	8002588 <HAL_I2C_ER_IRQHandler+0xb8>
 80025f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025f8:	ffff0000 	.word	0xffff0000

080025fc <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80025fc:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80025fe:	4770      	bx	lr

08002600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	4604      	mov	r4, r0
 8002606:	b918      	cbnz	r0, 8002610 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800260a:	b002      	add	sp, #8
 800260c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	07dd      	lsls	r5, r3, #31
 8002614:	d410      	bmi.n	8002638 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	0798      	lsls	r0, r3, #30
 800261a:	d458      	bmi.n	80026ce <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	071a      	lsls	r2, r3, #28
 8002620:	f100 809a 	bmi.w	8002758 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	075b      	lsls	r3, r3, #29
 8002628:	f100 80b8 	bmi.w	800279c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262c:	69a2      	ldr	r2, [r4, #24]
 800262e:	2a00      	cmp	r2, #0
 8002630:	f040 8119 	bne.w	8002866 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002634:	2000      	movs	r0, #0
 8002636:	e7e8      	b.n	800260a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002638:	4ba6      	ldr	r3, [pc, #664]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	f002 020c 	and.w	r2, r2, #12
 8002640:	2a04      	cmp	r2, #4
 8002642:	d007      	beq.n	8002654 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	2a08      	cmp	r2, #8
 800264c:	d10a      	bne.n	8002664 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	0259      	lsls	r1, r3, #9
 8002652:	d507      	bpl.n	8002664 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b9f      	ldr	r3, [pc, #636]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	039a      	lsls	r2, r3, #14
 800265a:	d5dc      	bpl.n	8002616 <HAL_RCC_OscConfig+0x16>
 800265c:	6863      	ldr	r3, [r4, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1d9      	bne.n	8002616 <HAL_RCC_OscConfig+0x16>
 8002662:	e7d1      	b.n	8002608 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002664:	6863      	ldr	r3, [r4, #4]
 8002666:	4d9b      	ldr	r5, [pc, #620]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d111      	bne.n	8002692 <HAL_RCC_OscConfig+0x92>
 800266e:	682b      	ldr	r3, [r5, #0]
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002676:	f7fe fcb5 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4d96      	ldr	r5, [pc, #600]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800267c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	039b      	lsls	r3, r3, #14
 8002682:	d4c8      	bmi.n	8002616 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fcae 	bl	8000fe4 <HAL_GetTick>
 8002688:	1b80      	subs	r0, r0, r6
 800268a:	2864      	cmp	r0, #100	; 0x64
 800268c:	d9f7      	bls.n	800267e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800268e:	2003      	movs	r0, #3
 8002690:	e7bb      	b.n	800260a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002696:	d104      	bne.n	80026a2 <HAL_RCC_OscConfig+0xa2>
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269e:	602b      	str	r3, [r5, #0]
 80026a0:	e7e5      	b.n	800266e <HAL_RCC_OscConfig+0x6e>
 80026a2:	682a      	ldr	r2, [r5, #0]
 80026a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026a8:	602a      	str	r2, [r5, #0]
 80026aa:	682a      	ldr	r2, [r5, #0]
 80026ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026b0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1df      	bne.n	8002676 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80026b6:	f7fe fc95 	bl	8000fe4 <HAL_GetTick>
 80026ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	039f      	lsls	r7, r3, #14
 80026c0:	d5a9      	bpl.n	8002616 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c2:	f7fe fc8f 	bl	8000fe4 <HAL_GetTick>
 80026c6:	1b80      	subs	r0, r0, r6
 80026c8:	2864      	cmp	r0, #100	; 0x64
 80026ca:	d9f7      	bls.n	80026bc <HAL_RCC_OscConfig+0xbc>
 80026cc:	e7df      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	f012 0f0c 	tst.w	r2, #12
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026de:	2a08      	cmp	r2, #8
 80026e0:	d111      	bne.n	8002706 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	025e      	lsls	r6, r3, #9
 80026e6:	d40e      	bmi.n	8002706 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e8:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	0795      	lsls	r5, r2, #30
 80026ee:	d502      	bpl.n	80026f6 <HAL_RCC_OscConfig+0xf6>
 80026f0:	68e2      	ldr	r2, [r4, #12]
 80026f2:	2a01      	cmp	r2, #1
 80026f4:	d188      	bne.n	8002608 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	6921      	ldr	r1, [r4, #16]
 80026fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80026fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002702:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	e78a      	b.n	800261c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002706:	68e2      	ldr	r2, [r4, #12]
 8002708:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <HAL_RCC_OscConfig+0x2d8>)
 800270a:	b1b2      	cbz	r2, 800273a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002710:	f7fe fc68 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4d6f      	ldr	r5, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002716:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	0798      	lsls	r0, r3, #30
 800271c:	d507      	bpl.n	800272e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	682b      	ldr	r3, [r5, #0]
 8002720:	6922      	ldr	r2, [r4, #16]
 8002722:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002726:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800272a:	602b      	str	r3, [r5, #0]
 800272c:	e776      	b.n	800261c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe fc59 	bl	8000fe4 <HAL_GetTick>
 8002732:	1b80      	subs	r0, r0, r6
 8002734:	2802      	cmp	r0, #2
 8002736:	d9ef      	bls.n	8002718 <HAL_RCC_OscConfig+0x118>
 8002738:	e7a9      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800273a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800273c:	f7fe fc52 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002740:	4d64      	ldr	r5, [pc, #400]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002742:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	0799      	lsls	r1, r3, #30
 8002748:	f57f af68 	bpl.w	800261c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe fc4a 	bl	8000fe4 <HAL_GetTick>
 8002750:	1b80      	subs	r0, r0, r6
 8002752:	2802      	cmp	r0, #2
 8002754:	d9f6      	bls.n	8002744 <HAL_RCC_OscConfig+0x144>
 8002756:	e79a      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002758:	6962      	ldr	r2, [r4, #20]
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <HAL_RCC_OscConfig+0x2dc>)
 800275c:	b17a      	cbz	r2, 800277e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002762:	f7fe fc3f 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	4d5b      	ldr	r5, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002768:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800276c:	079f      	lsls	r7, r3, #30
 800276e:	f53f af59 	bmi.w	8002624 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002772:	f7fe fc37 	bl	8000fe4 <HAL_GetTick>
 8002776:	1b80      	subs	r0, r0, r6
 8002778:	2802      	cmp	r0, #2
 800277a:	d9f6      	bls.n	800276a <HAL_RCC_OscConfig+0x16a>
 800277c:	e787      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800277e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002780:	f7fe fc30 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4d53      	ldr	r5, [pc, #332]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002786:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800278a:	0798      	lsls	r0, r3, #30
 800278c:	f57f af4a 	bpl.w	8002624 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fc28 	bl	8000fe4 <HAL_GetTick>
 8002794:	1b80      	subs	r0, r0, r6
 8002796:	2802      	cmp	r0, #2
 8002798:	d9f6      	bls.n	8002788 <HAL_RCC_OscConfig+0x188>
 800279a:	e778      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 800279e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80027a4:	d128      	bne.n	80027f8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	9201      	str	r2, [sp, #4]
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027ba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	4d48      	ldr	r5, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x2e0>)
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	05d9      	lsls	r1, r3, #23
 80027c2:	d51b      	bpl.n	80027fc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c4:	68a3      	ldr	r3, [r4, #8]
 80027c6:	4d43      	ldr	r5, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d127      	bne.n	800281c <HAL_RCC_OscConfig+0x21c>
 80027cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80027d4:	f7fe fc06 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	4d3e      	ldr	r5, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027da:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027e2:	079b      	lsls	r3, r3, #30
 80027e4:	d539      	bpl.n	800285a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80027e6:	2e00      	cmp	r6, #0
 80027e8:	f43f af20 	beq.w	800262c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ec:	4a39      	ldr	r2, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 80027ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80027f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	e719      	b.n	800262c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80027f8:	2600      	movs	r6, #0
 80027fa:	e7df      	b.n	80027bc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fc:	682b      	ldr	r3, [r5, #0]
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002804:	f7fe fbee 	bl	8000fe4 <HAL_GetTick>
 8002808:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	682b      	ldr	r3, [r5, #0]
 800280c:	05da      	lsls	r2, r3, #23
 800280e:	d4d9      	bmi.n	80027c4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002810:	f7fe fbe8 	bl	8000fe4 <HAL_GetTick>
 8002814:	1bc0      	subs	r0, r0, r7
 8002816:	2802      	cmp	r0, #2
 8002818:	d9f7      	bls.n	800280a <HAL_RCC_OscConfig+0x20a>
 800281a:	e738      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281c:	2b05      	cmp	r3, #5
 800281e:	d104      	bne.n	800282a <HAL_RCC_OscConfig+0x22a>
 8002820:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	672b      	str	r3, [r5, #112]	; 0x70
 8002828:	e7d0      	b.n	80027cc <HAL_RCC_OscConfig+0x1cc>
 800282a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	672a      	str	r2, [r5, #112]	; 0x70
 8002832:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002834:	f022 0204 	bic.w	r2, r2, #4
 8002838:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ca      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800283e:	f7fe fbd1 	bl	8000fe4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002846:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800284a:	0798      	lsls	r0, r3, #30
 800284c:	d5cb      	bpl.n	80027e6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fbc9 	bl	8000fe4 <HAL_GetTick>
 8002852:	1bc0      	subs	r0, r0, r7
 8002854:	4540      	cmp	r0, r8
 8002856:	d9f7      	bls.n	8002848 <HAL_RCC_OscConfig+0x248>
 8002858:	e719      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fbc3 	bl	8000fe4 <HAL_GetTick>
 800285e:	1bc0      	subs	r0, r0, r7
 8002860:	4540      	cmp	r0, r8
 8002862:	d9bd      	bls.n	80027e0 <HAL_RCC_OscConfig+0x1e0>
 8002864:	e713      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4d1b      	ldr	r5, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
 8002868:	68ab      	ldr	r3, [r5, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	f43f aeca 	beq.w	8002608 <HAL_RCC_OscConfig+0x8>
 8002874:	4e1b      	ldr	r6, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x2e4>)
 8002876:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800287a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287c:	d134      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800287e:	f7fe fbb1 	bl	8000fe4 <HAL_GetTick>
 8002882:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	0199      	lsls	r1, r3, #6
 8002888:	d41e      	bmi.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288a:	6a22      	ldr	r2, [r4, #32]
 800288c:	69e3      	ldr	r3, [r4, #28]
 800288e:	4313      	orrs	r3, r2
 8002890:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002892:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002896:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002898:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800289c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4c0d      	ldr	r4, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a0:	0852      	lsrs	r2, r2, #1
 80028a2:	3a01      	subs	r2, #1
 80028a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80028aa:	2301      	movs	r3, #1
 80028ac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80028ae:	f7fe fb99 	bl	8000fe4 <HAL_GetTick>
 80028b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	019a      	lsls	r2, r3, #6
 80028b8:	f53f aebc 	bmi.w	8002634 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fb92 	bl	8000fe4 <HAL_GetTick>
 80028c0:	1b40      	subs	r0, r0, r5
 80028c2:	2802      	cmp	r0, #2
 80028c4:	d9f6      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2b4>
 80028c6:	e6e2      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fb8c 	bl	8000fe4 <HAL_GetTick>
 80028cc:	1bc0      	subs	r0, r0, r7
 80028ce:	2802      	cmp	r0, #2
 80028d0:	d9d8      	bls.n	8002884 <HAL_RCC_OscConfig+0x284>
 80028d2:	e6dc      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	42470000 	.word	0x42470000
 80028dc:	42470e80 	.word	0x42470e80
 80028e0:	40007000 	.word	0x40007000
 80028e4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80028e8:	f7fe fb7c 	bl	8000fe4 <HAL_GetTick>
 80028ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	682b      	ldr	r3, [r5, #0]
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	f57f ae9f 	bpl.w	8002634 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fe fb75 	bl	8000fe4 <HAL_GetTick>
 80028fa:	1b00      	subs	r0, r0, r4
 80028fc:	2802      	cmp	r0, #2
 80028fe:	d9f6      	bls.n	80028ee <HAL_RCC_OscConfig+0x2ee>
 8002900:	e6c5      	b.n	800268e <HAL_RCC_OscConfig+0x8e>
 8002902:	bf00      	nop

08002904 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002904:	4913      	ldr	r1, [pc, #76]	; (8002954 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002906:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002908:	688b      	ldr	r3, [r1, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x16>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002916:	4810      	ldr	r0, [pc, #64]	; (8002958 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002918:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800291a:	4810      	ldr	r0, [pc, #64]	; (800295c <HAL_RCC_GetSysClockFreq+0x58>)
 800291c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002920:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002922:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002924:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002928:	bf14      	ite	ne
 800292a:	480c      	ldrne	r0, [pc, #48]	; (800295c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292c:	480a      	ldreq	r0, [pc, #40]	; (8002958 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002932:	bf18      	it	ne
 8002934:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002936:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	fba1 0100 	umull	r0, r1, r1, r0
 800293e:	f7fe f97f 	bl	8000c40 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_RCC_GetSysClockFreq+0x50>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800294e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002952:	bd08      	pop	{r3, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	00f42400 	.word	0x00f42400
 800295c:	017d7840 	.word	0x017d7840

08002960 <HAL_RCC_ClockConfig>:
{
 8002960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002964:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002966:	4604      	mov	r4, r0
 8002968:	b910      	cbnz	r0, 8002970 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800296a:	2001      	movs	r0, #1
 800296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_RCC_ClockConfig+0x124>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	f002 020f 	and.w	r2, r2, #15
 8002978:	428a      	cmp	r2, r1
 800297a:	d328      	bcc.n	80029ce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	6821      	ldr	r1, [r4, #0]
 800297e:	078f      	lsls	r7, r1, #30
 8002980:	d42d      	bmi.n	80029de <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	07c8      	lsls	r0, r1, #31
 8002984:	d440      	bmi.n	8002a08 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_ClockConfig+0x124>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f002 020f 	and.w	r2, r2, #15
 800298e:	4295      	cmp	r5, r2
 8002990:	d366      	bcc.n	8002a60 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	0751      	lsls	r1, r2, #29
 8002996:	d46c      	bmi.n	8002a72 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	0713      	lsls	r3, r2, #28
 800299a:	d507      	bpl.n	80029ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299c:	4a3a      	ldr	r2, [pc, #232]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 800299e:	6921      	ldr	r1, [r4, #16]
 80029a0:	6893      	ldr	r3, [r2, #8]
 80029a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ac:	f7ff ffaa 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80029b0:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 80029b2:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_RCC_ClockConfig+0x12c>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	40d8      	lsrs	r0, r3
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_ClockConfig+0x130>)
 80029c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe fac4 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
 80029ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	4299      	cmp	r1, r3
 80029da:	d1c6      	bne.n	800296a <HAL_RCC_ClockConfig+0xa>
 80029dc:	e7ce      	b.n	800297c <HAL_RCC_ClockConfig+0x1c>
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	bf1e      	ittt	ne
 80029e6:	689a      	ldrne	r2, [r3, #8]
 80029e8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80029ec:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	bf42      	ittt	mi
 80029f2:	689a      	ldrmi	r2, [r3, #8]
 80029f4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80029f8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68a0      	ldr	r0, [r4, #8]
 80029fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a02:	4302      	orrs	r2, r0
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	e7bc      	b.n	8002982 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a08:	6862      	ldr	r2, [r4, #4]
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 8002a0c:	2a01      	cmp	r2, #1
 8002a0e:	d11d      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	d0a8      	beq.n	800296a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a18:	4e1b      	ldr	r6, [pc, #108]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 8002a1a:	68b3      	ldr	r3, [r6, #8]
 8002a1c:	f023 0303 	bic.w	r3, r3, #3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a24:	f7fe fade 	bl	8000fe4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a2c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	68b3      	ldr	r3, [r6, #8]
 8002a30:	6862      	ldr	r2, [r4, #4]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a3a:	d0a4      	beq.n	8002986 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe fad2 	bl	8000fe4 <HAL_GetTick>
 8002a40:	1bc0      	subs	r0, r0, r7
 8002a42:	4540      	cmp	r0, r8
 8002a44:	d9f3      	bls.n	8002a2e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
}
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4c:	1e91      	subs	r1, r2, #2
 8002a4e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	d802      	bhi.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a58:	e7dd      	b.n	8002a16 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	f013 0f02 	tst.w	r3, #2
 8002a5e:	e7da      	b.n	8002a16 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a60:	b2ea      	uxtb	r2, r5
 8002a62:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	429d      	cmp	r5, r3
 8002a6c:	f47f af7d 	bne.w	800296a <HAL_RCC_ClockConfig+0xa>
 8002a70:	e78f      	b.n	8002992 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a72:	4905      	ldr	r1, [pc, #20]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 8002a74:	68e0      	ldr	r0, [r4, #12]
 8002a76:	688b      	ldr	r3, [r1, #8]
 8002a78:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002a7c:	4303      	orrs	r3, r0
 8002a7e:	608b      	str	r3, [r1, #8]
 8002a80:	e78a      	b.n	8002998 <HAL_RCC_ClockConfig+0x38>
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	080071c9 	.word	0x080071c9
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002aa2:	6810      	ldr	r0, [r2, #0]
}
 8002aa4:	40d8      	lsrs	r0, r3
 8002aa6:	4770      	bx	lr
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	080071d9 	.word	0x080071d9
 8002ab0:	20000008 	.word	0x20000008

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ac2:	6810      	ldr	r0, [r2, #0]
}
 8002ac4:	40d8      	lsrs	r0, r3
 8002ac6:	4770      	bx	lr
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	080071d9 	.word	0x080071d9
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002adc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002aec:	4770      	bx	lr
	...

08002af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af4:	6806      	ldr	r6, [r0, #0]
 8002af6:	68c2      	ldr	r2, [r0, #12]
 8002af8:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afa:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b00:	4313      	orrs	r3, r2
 8002b02:	6133      	str	r3, [r6, #16]
{
 8002b04:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b06:	6883      	ldr	r3, [r0, #8]
 8002b08:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002b0a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b0c:	4303      	orrs	r3, r0
 8002b0e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002b10:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b14:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002b16:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b20:	6973      	ldr	r3, [r6, #20]
 8002b22:	69a2      	ldr	r2, [r4, #24]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b28:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b2e:	6173      	str	r3, [r6, #20]
 8002b30:	4b7a      	ldr	r3, [pc, #488]	; (8002d1c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b32:	d17c      	bne.n	8002c2e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b34:	429e      	cmp	r6, r3
 8002b36:	d003      	beq.n	8002b40 <UART_SetConfig+0x50>
 8002b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b3c:	429e      	cmp	r6, r3
 8002b3e:	d144      	bne.n	8002bca <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b40:	f7ff ffb8 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002b44:	2519      	movs	r5, #25
 8002b46:	fb05 f300 	mul.w	r3, r5, r0
 8002b4a:	6860      	ldr	r0, [r4, #4]
 8002b4c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b50:	0040      	lsls	r0, r0, #1
 8002b52:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b56:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b5e:	f7ff ffa9 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002b62:	6863      	ldr	r3, [r4, #4]
 8002b64:	4368      	muls	r0, r5
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fbb0 f7f3 	udiv	r7, r0, r3
 8002b6c:	f7ff ffa2 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002b70:	6863      	ldr	r3, [r4, #4]
 8002b72:	4368      	muls	r0, r5
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b7e:	fb09 7313 	mls	r3, r9, r3, r7
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002b90:	f7ff ff90 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002b94:	6862      	ldr	r2, [r4, #4]
 8002b96:	4368      	muls	r0, r5
 8002b98:	0052      	lsls	r2, r2, #1
 8002b9a:	fbb0 faf2 	udiv	sl, r0, r2
 8002b9e:	f7ff ff89 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002ba2:	6863      	ldr	r3, [r4, #4]
 8002ba4:	4368      	muls	r0, r5
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bac:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bb0:	fb09 a313 	mls	r3, r9, r3, sl
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	3332      	adds	r3, #50	; 0x32
 8002bb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bc2:	443b      	add	r3, r7
 8002bc4:	60b3      	str	r3, [r6, #8]
 8002bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bca:	f7ff ff63 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002bce:	2519      	movs	r5, #25
 8002bd0:	fb05 f300 	mul.w	r3, r5, r0
 8002bd4:	6860      	ldr	r0, [r4, #4]
 8002bd6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002bda:	0040      	lsls	r0, r0, #1
 8002bdc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002be0:	fbb3 f3f9 	udiv	r3, r3, r9
 8002be4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002be8:	f7ff ff54 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002bec:	6863      	ldr	r3, [r4, #4]
 8002bee:	4368      	muls	r0, r5
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fbb0 f7f3 	udiv	r7, r0, r3
 8002bf6:	f7ff ff4d 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	4368      	muls	r0, r5
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c04:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c08:	fb09 7313 	mls	r3, r9, r3, r7
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	3332      	adds	r3, #50	; 0x32
 8002c10:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002c1a:	f7ff ff3b 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002c1e:	6862      	ldr	r2, [r4, #4]
 8002c20:	4368      	muls	r0, r5
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	fbb0 faf2 	udiv	sl, r0, r2
 8002c28:	f7ff ff34 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	e7b9      	b.n	8002ba2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c2e:	429e      	cmp	r6, r3
 8002c30:	d002      	beq.n	8002c38 <UART_SetConfig+0x148>
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <UART_SetConfig+0x230>)
 8002c34:	429e      	cmp	r6, r3
 8002c36:	d140      	bne.n	8002cba <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c38:	f7ff ff3c 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002c3c:	6867      	ldr	r7, [r4, #4]
 8002c3e:	2519      	movs	r5, #25
 8002c40:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002c44:	fb05 f300 	mul.w	r3, r5, r0
 8002c48:	00bf      	lsls	r7, r7, #2
 8002c4a:	fbb3 f3f7 	udiv	r3, r3, r7
 8002c4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c52:	011f      	lsls	r7, r3, #4
 8002c54:	f7ff ff2e 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002c58:	6863      	ldr	r3, [r4, #4]
 8002c5a:	4368      	muls	r0, r5
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	fbb0 f8f3 	udiv	r8, r0, r3
 8002c62:	f7ff ff27 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	4368      	muls	r0, r5
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c70:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c74:	fb09 8313 	mls	r3, r9, r3, r8
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	3332      	adds	r3, #50	; 0x32
 8002c7c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c80:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002c84:	f7ff ff16 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8002c88:	6862      	ldr	r2, [r4, #4]
 8002c8a:	4368      	muls	r0, r5
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	fbb0 faf2 	udiv	sl, r0, r2
 8002c92:	f7ff ff0f 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c96:	6863      	ldr	r3, [r4, #4]
 8002c98:	4368      	muls	r0, r5
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca0:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ca4:	fb09 a313 	mls	r3, r9, r3, sl
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	3332      	adds	r3, #50	; 0x32
 8002cac:	fbb3 f3f9 	udiv	r3, r3, r9
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	ea43 0308 	orr.w	r3, r3, r8
 8002cb8:	e783      	b.n	8002bc2 <UART_SetConfig+0xd2>
 8002cba:	f7ff feeb 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002cbe:	6867      	ldr	r7, [r4, #4]
 8002cc0:	2519      	movs	r5, #25
 8002cc2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002cc6:	fb05 f300 	mul.w	r3, r5, r0
 8002cca:	00bf      	lsls	r7, r7, #2
 8002ccc:	fbb3 f3f7 	udiv	r3, r3, r7
 8002cd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8002cd4:	011f      	lsls	r7, r3, #4
 8002cd6:	f7ff fedd 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002cda:	6863      	ldr	r3, [r4, #4]
 8002cdc:	4368      	muls	r0, r5
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fbb0 f8f3 	udiv	r8, r0, r3
 8002ce4:	f7ff fed6 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	4368      	muls	r0, r5
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	fbb3 f3f9 	udiv	r3, r3, r9
 8002cf6:	fb09 8313 	mls	r3, r9, r3, r8
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	3332      	adds	r3, #50	; 0x32
 8002cfe:	fbb3 f3f9 	udiv	r3, r3, r9
 8002d02:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002d06:	f7ff fec5 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002d0a:	6862      	ldr	r2, [r4, #4]
 8002d0c:	4368      	muls	r0, r5
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	fbb0 faf2 	udiv	sl, r0, r2
 8002d14:	f7ff febe 	bl	8002a94 <HAL_RCC_GetPCLK1Freq>
 8002d18:	e7bd      	b.n	8002c96 <UART_SetConfig+0x1a6>
 8002d1a:	bf00      	nop
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40011400 	.word	0x40011400

08002d24 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	4604      	mov	r4, r0
 8002d28:	460e      	mov	r6, r1
 8002d2a:	4617      	mov	r7, r2
 8002d2c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2e:	6821      	ldr	r1, [r4, #0]
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	ea36 0303 	bics.w	r3, r6, r3
 8002d36:	d101      	bne.n	8002d3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002d38:	2000      	movs	r0, #0
}
 8002d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002d3c:	1c6b      	adds	r3, r5, #1
 8002d3e:	d0f7      	beq.n	8002d30 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d40:	b995      	cbnz	r5, 8002d68 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002d54:	2320      	movs	r3, #32
 8002d56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002d64:	2003      	movs	r0, #3
 8002d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d68:	f7fe f93c 	bl	8000fe4 <HAL_GetTick>
 8002d6c:	1bc0      	subs	r0, r0, r7
 8002d6e:	4285      	cmp	r5, r0
 8002d70:	d2dd      	bcs.n	8002d2e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002d72:	e7e6      	b.n	8002d42 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002d74 <HAL_UART_Init>:
{
 8002d74:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d76:	4604      	mov	r4, r0
 8002d78:	b340      	cbz	r0, 8002dcc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d82:	b91b      	cbnz	r3, 8002d8c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002d84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002d88:	f000 ffa8 	bl	8003cdc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d8c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d8e:	2324      	movs	r3, #36	; 0x24
 8002d90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002d94:	68d3      	ldr	r3, [r2, #12]
 8002d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d9a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff fea7 	bl	8002af0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002daa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002dbe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002dca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002dcc:	2001      	movs	r0, #1
}
 8002dce:	bd10      	pop	{r4, pc}

08002dd0 <HAL_UART_Transmit>:
{
 8002dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002dda:	2b20      	cmp	r3, #32
{
 8002ddc:	4604      	mov	r4, r0
 8002dde:	460d      	mov	r5, r1
 8002de0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002de2:	d14f      	bne.n	8002e84 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002de4:	2900      	cmp	r1, #0
 8002de6:	d04a      	beq.n	8002e7e <HAL_UART_Transmit+0xae>
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d048      	beq.n	8002e7e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002dec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d047      	beq.n	8002e84 <HAL_UART_Transmit+0xb4>
 8002df4:	2301      	movs	r3, #1
 8002df6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfe:	2321      	movs	r3, #33	; 0x21
 8002e00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002e04:	f7fe f8ee 	bl	8000fe4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002e08:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002e0c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002e0e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	b96b      	cbnz	r3, 8002e34 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e18:	463b      	mov	r3, r7
 8002e1a:	4632      	mov	r2, r6
 8002e1c:	2140      	movs	r1, #64	; 0x40
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7ff ff80 	bl	8002d24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002e24:	b9b0      	cbnz	r0, 8002e54 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002e26:	2320      	movs	r3, #32
 8002e28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002e2c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002e34:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e3c:	68a3      	ldr	r3, [r4, #8]
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e42:	4632      	mov	r2, r6
 8002e44:	463b      	mov	r3, r7
 8002e46:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002e4a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e4c:	d10e      	bne.n	8002e6c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	f7ff ff69 	bl	8002d24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002e52:	b110      	cbz	r0, 8002e5a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002e54:	2003      	movs	r0, #3
 8002e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e5a:	882b      	ldrh	r3, [r5, #0]
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e64:	6923      	ldr	r3, [r4, #16]
 8002e66:	b943      	cbnz	r3, 8002e7a <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8002e68:	3502      	adds	r5, #2
 8002e6a:	e7d2      	b.n	8002e12 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6c:	f7ff ff5a 	bl	8002d24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	d1ef      	bne.n	8002e54 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	782a      	ldrb	r2, [r5, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	3501      	adds	r5, #1
 8002e7c:	e7c9      	b.n	8002e12 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002e7e:	2001      	movs	r0, #1
 8002e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002e84:	2002      	movs	r0, #2
}
 8002e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e8a <HAL_UART_TxCpltCallback>:
 8002e8a:	4770      	bx	lr

08002e8c <HAL_UART_RxCpltCallback>:
 8002e8c:	4770      	bx	lr

08002e8e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e8e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002e92:	2b22      	cmp	r3, #34	; 0x22
{
 8002e94:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e96:	d136      	bne.n	8002f06 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e98:	6883      	ldr	r3, [r0, #8]
 8002e9a:	6901      	ldr	r1, [r0, #16]
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ea4:	d123      	bne.n	8002eee <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ea6:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ea8:	b9e9      	cbnz	r1, 8002ee6 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eae:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002eb2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002eb4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002eb6:	3c01      	subs	r4, #1
 8002eb8:	b2a4      	uxth	r4, r4
 8002eba:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002ebc:	b98c      	cbnz	r4, 8002ee2 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ebe:	6803      	ldr	r3, [r0, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	f022 0220 	bic.w	r2, r2, #32
 8002ec6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ece:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002ede:	f7ff ffd5 	bl	8002e8c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002ee2:	2000      	movs	r0, #0
}
 8002ee4:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f823 2b01 	strh.w	r2, [r3], #1
 8002eec:	e7e1      	b.n	8002eb2 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002eee:	b921      	cbnz	r1, 8002efa <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ef0:	1c59      	adds	r1, r3, #1
 8002ef2:	6852      	ldr	r2, [r2, #4]
 8002ef4:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e7dc      	b.n	8002eb4 <UART_Receive_IT+0x26>
 8002efa:	6852      	ldr	r2, [r2, #4]
 8002efc:	1c59      	adds	r1, r3, #1
 8002efe:	6281      	str	r1, [r0, #40]	; 0x28
 8002f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f04:	e7f7      	b.n	8002ef6 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002f06:	2002      	movs	r0, #2
 8002f08:	bd10      	pop	{r4, pc}

08002f0a <HAL_UART_ErrorCallback>:
 8002f0a:	4770      	bx	lr

08002f0c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f10:	68d9      	ldr	r1, [r3, #12]
{
 8002f12:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002f14:	0716      	lsls	r6, r2, #28
{
 8002f16:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f18:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002f1a:	d107      	bne.n	8002f2c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f1c:	0696      	lsls	r6, r2, #26
 8002f1e:	d55a      	bpl.n	8002fd6 <HAL_UART_IRQHandler+0xca>
 8002f20:	068d      	lsls	r5, r1, #26
 8002f22:	d558      	bpl.n	8002fd6 <HAL_UART_IRQHandler+0xca>
}
 8002f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002f28:	f7ff bfb1 	b.w	8002e8e <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f2c:	f015 0501 	ands.w	r5, r5, #1
 8002f30:	d102      	bne.n	8002f38 <HAL_UART_IRQHandler+0x2c>
 8002f32:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002f36:	d04e      	beq.n	8002fd6 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f38:	07d3      	lsls	r3, r2, #31
 8002f3a:	d505      	bpl.n	8002f48 <HAL_UART_IRQHandler+0x3c>
 8002f3c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f3e:	bf42      	ittt	mi
 8002f40:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002f42:	f043 0301 	orrmi.w	r3, r3, #1
 8002f46:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f48:	0750      	lsls	r0, r2, #29
 8002f4a:	d504      	bpl.n	8002f56 <HAL_UART_IRQHandler+0x4a>
 8002f4c:	b11d      	cbz	r5, 8002f56 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f56:	0793      	lsls	r3, r2, #30
 8002f58:	d504      	bpl.n	8002f64 <HAL_UART_IRQHandler+0x58>
 8002f5a:	b11d      	cbz	r5, 8002f64 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f64:	0716      	lsls	r6, r2, #28
 8002f66:	d504      	bpl.n	8002f72 <HAL_UART_IRQHandler+0x66>
 8002f68:	b11d      	cbz	r5, 8002f72 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d066      	beq.n	8003046 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f78:	0695      	lsls	r5, r2, #26
 8002f7a:	d504      	bpl.n	8002f86 <HAL_UART_IRQHandler+0x7a>
 8002f7c:	0688      	lsls	r0, r1, #26
 8002f7e:	d502      	bpl.n	8002f86 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7ff ff84 	bl	8002e8e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f8c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002f8e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f90:	d402      	bmi.n	8002f98 <HAL_UART_IRQHandler+0x8c>
 8002f92:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002f96:	d01a      	beq.n	8002fce <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002f98:	f7ff fd9c 	bl	8002ad4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	0652      	lsls	r2, r2, #25
 8002fa2:	d510      	bpl.n	8002fc6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002fa6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fac:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002fae:	b150      	cbz	r0, 8002fc6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_UART_IRQHandler+0x13c>)
 8002fb2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fb4:	f7fe f89a 	bl	80010ec <HAL_DMA_Abort_IT>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d044      	beq.n	8003046 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fbc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fc2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002fc4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7ff ff9f 	bl	8002f0a <HAL_UART_ErrorCallback>
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002fce:	f7ff ff9c 	bl	8002f0a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002fd4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fd6:	0616      	lsls	r6, r2, #24
 8002fd8:	d527      	bpl.n	800302a <HAL_UART_IRQHandler+0x11e>
 8002fda:	060d      	lsls	r5, r1, #24
 8002fdc:	d525      	bpl.n	800302a <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fde:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002fe2:	2a21      	cmp	r2, #33	; 0x21
 8002fe4:	d12f      	bne.n	8003046 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fe6:	68a2      	ldr	r2, [r4, #8]
 8002fe8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002fec:	6a22      	ldr	r2, [r4, #32]
 8002fee:	d117      	bne.n	8003020 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ff0:	8811      	ldrh	r1, [r2, #0]
 8002ff2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002ff6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ff8:	6921      	ldr	r1, [r4, #16]
 8002ffa:	b979      	cbnz	r1, 800301c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002ffc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002ffe:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003000:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003002:	3a01      	subs	r2, #1
 8003004:	b292      	uxth	r2, r2
 8003006:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003008:	b9ea      	cbnz	r2, 8003046 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003010:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800301c:	3201      	adds	r2, #1
 800301e:	e7ee      	b.n	8002ffe <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003020:	1c51      	adds	r1, r2, #1
 8003022:	6221      	str	r1, [r4, #32]
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e7ea      	b.n	8003000 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800302a:	0650      	lsls	r0, r2, #25
 800302c:	d50b      	bpl.n	8003046 <HAL_UART_IRQHandler+0x13a>
 800302e:	064a      	lsls	r2, r1, #25
 8003030:	d509      	bpl.n	8003046 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003038:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800303a:	2320      	movs	r3, #32
 800303c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff ff22 	bl	8002e8a <HAL_UART_TxCpltCallback>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	0800304d 	.word	0x0800304d

0800304c <UART_DMAAbortOnError>:
{
 800304c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003050:	2300      	movs	r3, #0
 8003052:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003054:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003056:	f7ff ff58 	bl	8002f0a <HAL_UART_ErrorCallback>
 800305a:	bd08      	pop	{r3, pc}

0800305c <I2C_Write>:


#include "I2C_1.h"
#include "stm32f4xx_hal.h"

I2C_Result_t I2C_Write(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t data) {
 800305c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t d[2];

	/* Format array to send */
	d[0] = register_address;
	d[1] = data;
 800305e:	f88d 300d 	strb.w	r3, [sp, #13]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8003062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	d[0] = register_address;
 8003066:	f88d 200c 	strb.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	aa03      	add	r2, sp, #12
 800306e:	2302      	movs	r3, #2
I2C_Result_t I2C_Write(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t data) {
 8003070:	4604      	mov	r4, r0
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8003072:	f7fe fae7 	bl	8001644 <HAL_I2C_Master_Transmit>
 8003076:	b118      	cbz	r0, 8003080 <I2C_Write+0x24>
		/* Check error */
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff fabf 	bl	80025fc <HAL_I2C_GetError>

		}

		/* Return error */
		return I2C_Result_Error;
 800307e:	2001      	movs	r0, #1
	}

	/* Return OK */
	return I2C_Result_Ok;
}
 8003080:	b004      	add	sp, #16
 8003082:	bd10      	pop	{r4, pc}

08003084 <I2C_ReadMulti>:

I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8003084:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003088:	ac04      	add	r4, sp, #16

	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800308a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 800308e:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8003092:	4698      	mov	r8, r3
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8003094:	9700      	str	r7, [sp, #0]
 8003096:	2301      	movs	r3, #1
 8003098:	4622      	mov	r2, r4
I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 800309a:	4605      	mov	r5, r0
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800309c:	460e      	mov	r6, r1
 800309e:	f7fe fad1 	bl	8001644 <HAL_I2C_Master_Transmit>
 80030a2:	b130      	cbz	r0, 80030b2 <I2C_ReadMulti+0x2e>
		/* Check error */
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 80030a4:	4628      	mov	r0, r5
 80030a6:	f7ff faa9 	bl	80025fc <HAL_I2C_GetError>

		}

		/* Return error */
		return I2C_Result_Error;
 80030aa:	2001      	movs	r0, #1
	}

	/* Return OK */
	return I2C_Result_Ok;

}
 80030ac:	b004      	add	sp, #16
 80030ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_I2C_Master_Receive(hi2c, device_address, data, count, 1000) != HAL_OK) {
 80030b2:	9700      	str	r7, [sp, #0]
 80030b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80030b8:	4642      	mov	r2, r8
 80030ba:	4631      	mov	r1, r6
 80030bc:	4628      	mov	r0, r5
 80030be:	f7fe fb8f 	bl	80017e0 <HAL_I2C_Master_Receive>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d0f2      	beq.n	80030ac <I2C_ReadMulti+0x28>
 80030c6:	e7ed      	b.n	80030a4 <I2C_ReadMulti+0x20>

080030c8 <MPU9250_Init>:
#define YA_OFFSET_H         0x7A
#define YA_OFFSET_L         0x7B
#define ZA_OFFSET_H         0x7D
#define ZA_OFFSET_L         0x7E

MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250, MPU9250_Device_t dev) {
 80030c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80030ca:	460c      	mov	r4, r1
    uint8_t data, rawData[3];

    /* Set values */
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 80030cc:	2318      	movs	r3, #24
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 80030ce:	f042 01d0 	orr.w	r1, r2, #208	; 0xd0

    /* Check who I am */
		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 80030d2:	2601      	movs	r6, #1
    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 80030d4:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 80030d8:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 80030dc:	f10d 030b 	add.w	r3, sp, #11
 80030e0:	9600      	str	r6, [sp, #0]
 80030e2:	2275      	movs	r2, #117	; 0x75
MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250, MPU9250_Device_t dev) {
 80030e4:	4605      	mov	r5, r0
		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 80030e6:	f7ff ffcd 	bl	8003084 <I2C_ReadMulti>
    if (data != 0x71) { //modified from 0x71 to 0x73
 80030ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80030ee:	2b71      	cmp	r3, #113	; 0x71
 80030f0:	f040 80de 	bne.w	80032b0 <MPU9250_Init+0x1e8>
        return MPU9250_Result_DeviceNotConnected;
    }

    // wake up device
		I2C_Write(hi2c, MPU9250->I2C_Addr, PWR_MGMT_1, 0x00);
 80030f4:	2300      	movs	r3, #0
 80030f6:	226b      	movs	r2, #107	; 0x6b
 80030f8:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 80030fc:	4628      	mov	r0, r5
 80030fe:	f7ff ffad 	bl	800305c <I2C_Write>
    //Delayms(100); // Wait for all registers to reset

    // get stable time source
    I2C_Write(hi2c, MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003102:	4633      	mov	r3, r6
 8003104:	226b      	movs	r2, #107	; 0x6b
 8003106:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 800310a:	4628      	mov	r0, r5
 800310c:	f7ff ffa6 	bl	800305c <I2C_Write>
    // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
    // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
    // be higher than 1 / 0.0059 = 170 Hz
    // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
    // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
    I2C_Write(hi2c, MPU9250->I2C_Addr, CONFIG, 0x04);
 8003110:	2304      	movs	r3, #4
 8003112:	221a      	movs	r2, #26
 8003114:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003118:	4628      	mov	r0, r5
 800311a:	f7ff ff9f 	bl	800305c <I2C_Write>
    // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
    I2C_Write(hi2c, MPU9250->I2C_Addr, SMPLRT_DIV, 0x00);  // Use a 1000 Hz rate; a rate consistent with the filter update rate
 800311e:	2300      	movs	r3, #0
 8003120:	2219      	movs	r2, #25
 8003122:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003126:	4628      	mov	r0, r5
 8003128:	f7ff ff98 	bl	800305c <I2C_Write>
                            // determined inset in CONFIG above

    // Set gyroscope full scale range
    // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, &data, 1); // get current GYRO_CONFIG register value
 800312c:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003130:	9600      	str	r6, [sp, #0]
 8003132:	f10d 030b 	add.w	r3, sp, #11
 8003136:	221b      	movs	r2, #27
 8003138:	4628      	mov	r0, r5
 800313a:	f7ff ffa3 	bl	8003084 <I2C_ReadMulti>
    // c = c & ~0xE0; // Clear self-test bits [7:5]
    data &= ~0x02; // Clear Fchoice bits [1:0]
    data &= ~0x18; // Clear AFS bits [4:3]
 800313e:	f89d 300b 	ldrb.w	r3, [sp, #11]
		/**************************************/
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
		/**************************************/

    // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003142:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x18; // Clear AFS bits [4:3]
 8003146:	f023 031a 	bic.w	r3, r3, #26
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
 800314a:	f043 0318 	orr.w	r3, r3, #24
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 800314e:	221b      	movs	r2, #27
 8003150:	4628      	mov	r0, r5
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
 8003152:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003156:	f7ff ff81 	bl	800305c <I2C_Write>

    // Set accelerometer full-scale range configuration
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, &data, 1); // get current ACCEL_CONFIG register value
 800315a:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 800315e:	9600      	str	r6, [sp, #0]
 8003160:	f10d 030b 	add.w	r3, sp, #11
 8003164:	221c      	movs	r2, #28
 8003166:	4628      	mov	r0, r5
 8003168:	f7ff ff8c 	bl	8003084 <I2C_ReadMulti>
    // c = c & ~0xE0; // Clear self-test bits [7:5]
    data &= ~0x18;  // Clear AFS bits [4:3]
 800316c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    data |= 0x00 << 3; // Set full scale range for the accelerometer
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8003170:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x18;  // Clear AFS bits [4:3]
 8003174:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8003178:	221c      	movs	r2, #28
 800317a:	4628      	mov	r0, r5
    data &= ~0x18;  // Clear AFS bits [4:3]
 800317c:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8003180:	f7ff ff6c 	bl	800305c <I2C_Write>

    // Set accelerometer sample rate configuration
    // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
    // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, &data, 1); // get current ACCEL_CONFIG2 register value
 8003184:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003188:	9600      	str	r6, [sp, #0]
 800318a:	f10d 030b 	add.w	r3, sp, #11
 800318e:	221d      	movs	r2, #29
 8003190:	4628      	mov	r0, r5
 8003192:	f7ff ff77 	bl	8003084 <I2C_ReadMulti>
    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8003196:	f89d 300b 	ldrb.w	r3, [sp, #11]
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 800319a:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800319e:	f023 030f 	bic.w	r3, r3, #15
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80031a2:	f043 0303 	orr.w	r3, r3, #3
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 80031a6:	221d      	movs	r2, #29
 80031a8:	4628      	mov	r0, r5
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80031aa:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 80031ae:	f7ff ff55 	bl	800305c <I2C_Write>

    // Configure Interrupts and Bypass Enable
    // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
    // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
    // can join the I2C bus and all can be controlled by the Arduino as master
    I2C_Write(hi2c, MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 80031b2:	2322      	movs	r3, #34	; 0x22
 80031b4:	2237      	movs	r2, #55	; 0x37
 80031b6:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 80031ba:	4628      	mov	r0, r5
 80031bc:	f7ff ff4e 	bl	800305c <I2C_Write>
    I2C_Write(hi2c, MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 80031c0:	4633      	mov	r3, r6
 80031c2:	2238      	movs	r2, #56	; 0x38
 80031c4:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 80031c8:	4628      	mov	r0, r5
 80031ca:	f7ff ff47 	bl	800305c <I2C_Write>

    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 80031ce:	2300      	movs	r3, #0
 80031d0:	220a      	movs	r2, #10
 80031d2:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 80031d6:	4628      	mov	r0, r5
 80031d8:	f7ff ff40 	bl	800305c <I2C_Write>
    //Delayms(10);
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80031dc:	230f      	movs	r3, #15
 80031de:	220a      	movs	r2, #10
 80031e0:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 80031e4:	4628      	mov	r0, r5
 80031e6:	f7ff ff39 	bl	800305c <I2C_Write>
    //Delayms(10);

		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ASAX, &rawData[0], 3);
 80031ea:	2303      	movs	r3, #3
 80031ec:	2210      	movs	r2, #16
 80031ee:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4628      	mov	r0, r5
 80031f6:	ab03      	add	r3, sp, #12
 80031f8:	f7ff ff44 	bl	8003084 <I2C_ReadMulti>
		//I2C_Read(hi2c, AK8963_ASTC, AK8963_ASAY, &rawData[1]);
		//I2C_Read(hi2c, AK8963_ASTC, AK8963_ASAZ, &rawData[2]);

		MPU9250->magCalibrationX =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 80031fc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003200:	3880      	subs	r0, #128	; 0x80
 8003202:	ee07 0a90 	vmov	s15, r0
 8003206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320a:	ee17 0a90 	vmov	r0, s15
 800320e:	f7fd f99b 	bl	8000548 <__aeabi_f2d>
 8003212:	2200      	movs	r2, #0
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <MPU9250_Init+0x1ec>)
 8003216:	f7fd f9eb 	bl	80005f0 <__aeabi_dmul>
 800321a:	2200      	movs	r2, #0
 800321c:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <MPU9250_Init+0x1f0>)
 800321e:	f7fd f835 	bl	800028c <__adddf3>
 8003222:	f7fd fcbd 	bl	8000ba0 <__aeabi_d2f>
 8003226:	6460      	str	r0, [r4, #68]	; 0x44
		MPU9250->magCalibrationY =  (float)(rawData[1] - 128)/256. + 1.;
 8003228:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800322c:	3880      	subs	r0, #128	; 0x80
 800322e:	ee07 0a90 	vmov	s15, r0
 8003232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003236:	ee17 0a90 	vmov	r0, s15
 800323a:	f7fd f985 	bl	8000548 <__aeabi_f2d>
 800323e:	2200      	movs	r2, #0
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <MPU9250_Init+0x1ec>)
 8003242:	f7fd f9d5 	bl	80005f0 <__aeabi_dmul>
 8003246:	2200      	movs	r2, #0
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <MPU9250_Init+0x1f0>)
 800324a:	f7fd f81f 	bl	800028c <__adddf3>
 800324e:	f7fd fca7 	bl	8000ba0 <__aeabi_d2f>
 8003252:	64a0      	str	r0, [r4, #72]	; 0x48
		MPU9250->magCalibrationZ =  (float)(rawData[2] - 128)/256. + 1.;
 8003254:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8003258:	3880      	subs	r0, #128	; 0x80
 800325a:	ee07 0a90 	vmov	s15, r0
 800325e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003262:	ee17 0a90 	vmov	r0, s15
 8003266:	f7fd f96f 	bl	8000548 <__aeabi_f2d>
 800326a:	2200      	movs	r2, #0
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MPU9250_Init+0x1ec>)
 800326e:	f7fd f9bf 	bl	80005f0 <__aeabi_dmul>
 8003272:	2200      	movs	r2, #0
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <MPU9250_Init+0x1f0>)
 8003276:	f7fd f809 	bl	800028c <__adddf3>
 800327a:	f7fd fc91 	bl	8000ba0 <__aeabi_d2f>

    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 800327e:	2300      	movs	r3, #0
		MPU9250->magCalibrationZ =  (float)(rawData[2] - 128)/256. + 1.;
 8003280:	64e0      	str	r0, [r4, #76]	; 0x4c
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 8003282:	220a      	movs	r2, #10
 8003284:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8003288:	4628      	mov	r0, r5
 800328a:	f7ff fee7 	bl	800305c <I2C_Write>
    //Delayms(10);
    // Configure the magnetometer for continuous read and highest resolution
    // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
    // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 1 << 4 | 6); // Set magnetometer data resolution and sample ODR
 800328e:	2316      	movs	r3, #22
 8003290:	220a      	movs	r2, #10
 8003292:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8003296:	4628      	mov	r0, r5
 8003298:	f7ff fee0 	bl	800305c <I2C_Write>
    //Delayms(10);

    /* Calculate multiplicators */
    MPU9250->AMult = 2.0f / 32768.0f;
 800329c:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 80032a0:	63a3      	str	r3, [r4, #56]	; 0x38
    MPU9250->GMult = 2000.0f / 32768.0f; // modified from 250.0f to 2000.0f to increase gyro sensitivity
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MPU9250_Init+0x1f4>)
 80032a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <MPU9250_Init+0x1f8>)
 80032a8:	6423      	str	r3, [r4, #64]	; 0x40

    return MPU9250_Result_Ok;
 80032aa:	2000      	movs	r0, #0
}
 80032ac:	b004      	add	sp, #16
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
        return MPU9250_Result_DeviceNotConnected;
 80032b0:	2002      	movs	r0, #2
 80032b2:	e7fb      	b.n	80032ac <MPU9250_Init+0x1e4>
 80032b4:	3f700000 	.word	0x3f700000
 80032b8:	3ff00000 	.word	0x3ff00000
 80032bc:	3d7a0000 	.word	0x3d7a0000
 80032c0:	3fbfe000 	.word	0x3fbfe000

080032c4 <MPU9250_ReadAcce>:

MPU9250_Result_t MPU9250_ReadAcce(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 80032c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[6];

    /* Read accelerometer data */
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 80032c6:	2306      	movs	r3, #6
MPU9250_Result_t MPU9250_ReadAcce(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 80032c8:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 80032ca:	223b      	movs	r2, #59	; 0x3b
 80032cc:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	ab02      	add	r3, sp, #8
 80032d4:	f7ff fed6 	bl	8003084 <I2C_ReadMulti>

    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80032d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80032dc:	f89d 1009 	ldrb.w	r1, [sp, #9]
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80032e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80032e4:	f89d 000c 	ldrb.w	r0, [sp, #12]

    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 80032e8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80032ec:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80032f0:	b209      	sxth	r1, r1
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80032f2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80032f6:	84a1      	strh	r1, [r4, #36]	; 0x24
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 80032f8:	ee07 1a90 	vmov	s15, r1
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80032fc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8003300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003304:	f89d 300d 	ldrb.w	r3, [sp, #13]
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8003308:	b212      	sxth	r2, r2
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 800330a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 800330e:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8003312:	ee07 2a90 	vmov	s15, r2
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003316:	b21b      	sxth	r3, r3
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8003318:	ed84 7a00 	vstr	s14, [r4]
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 800331c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8003328:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 800332c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8003330:	84e2      	strh	r2, [r4, #38]	; 0x26
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8003332:	8523      	strh	r3, [r4, #40]	; 0x28
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8003334:	ed84 7a01 	vstr	s14, [r4, #4]
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 8003338:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800333c:	b004      	add	sp, #16
 800333e:	bd10      	pop	{r4, pc}

08003340 <MPU9250_ReadGyro>:

MPU9250_Result_t MPU9250_ReadGyro(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[6];
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8003342:	2306      	movs	r3, #6
MPU9250_Result_t MPU9250_ReadGyro(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8003344:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8003346:	2243      	movs	r2, #67	; 0x43
 8003348:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	ab02      	add	r3, sp, #8
 8003350:	f7ff fe98 	bl	8003084 <I2C_ReadMulti>

    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8003354:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003358:	f89d 1009 	ldrb.w	r1, [sp, #9]
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];

    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 800335c:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003360:	f89d 200b 	ldrb.w	r2, [sp, #11]
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8003364:	f89d 000c 	ldrb.w	r0, [sp, #12]
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003368:	eddf 6a18 	vldr	s13, [pc, #96]	; 80033cc <MPU9250_ReadGyro+0x8c>
    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 800336c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003370:	b209      	sxth	r1, r1
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003372:	ee07 1a90 	vmov	s15, r1
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003376:	f89d 300a 	ldrb.w	r3, [sp, #10]
    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 800337a:	8561      	strh	r1, [r4, #42]	; 0x2a
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 800337c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8003380:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003384:	ee27 7a06 	vmul.f32	s14, s14, s12
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8003388:	f89d 300d 	ldrb.w	r3, [sp, #13]
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800338c:	b212      	sxth	r2, r2
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800338e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8003392:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8003396:	ee07 2a90 	vmov	s15, r2
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800339a:	b21b      	sxth	r3, r3
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 800339c:	ed84 7a03 	vstr	s14, [r4, #12]
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 80033a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 80033ac:	ee27 7a06 	vmul.f32	s14, s14, s12
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 80033b0:	ee67 7a86 	vmul.f32	s15, s15, s12
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 80033b4:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 80033b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 80033bc:	85a2      	strh	r2, [r4, #44]	; 0x2c
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 80033be:	85e3      	strh	r3, [r4, #46]	; 0x2e
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 80033c0:	ed84 7a04 	vstr	s14, [r4, #16]
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 80033c4:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80033c8:	b004      	add	sp, #16
 80033ca:	bd10      	pop	{r4, pc}
 80033cc:	3c8efa35 	.word	0x3c8efa35

080033d0 <MPU9250_ReadMag>:

MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 80033d0:	b530      	push	{r4, r5, lr}
 80033d2:	b087      	sub	sp, #28
    uint8_t data[7];
    uint8_t check;

    /* Check status */
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 80033d4:	2301      	movs	r3, #1
 80033d6:	2202      	movs	r2, #2
MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 80033d8:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 80033da:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	f10d 030f 	add.w	r3, sp, #15
MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 80033e4:	4605      	mov	r5, r0
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 80033e6:	f7ff fe4d 	bl	8003084 <I2C_ReadMulti>

    if (check & 0x01) {
 80033ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80033ee:	07da      	lsls	r2, r3, #31
 80033f0:	d521      	bpl.n	8003436 <MPU9250_ReadMag+0x66>
        I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_XOUT_L, data, 7);
 80033f2:	2307      	movs	r3, #7
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 80033fa:	ab04      	add	r3, sp, #16
 80033fc:	2203      	movs	r2, #3
 80033fe:	4628      	mov	r0, r5
 8003400:	f7ff fe40 	bl	8003084 <I2C_ReadMulti>
        if (!(data[6] & 0x08)) {
 8003404:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	d414      	bmi.n	8003436 <MPU9250_ReadMag+0x66>
            MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 800340c:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003410:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003418:	8623      	strh	r3, [r4, #48]	; 0x30
            MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 800341a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800341e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003426:	8663      	strh	r3, [r4, #50]	; 0x32
            MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 8003428:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800342c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003430:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003434:	86a3      	strh	r3, [r4, #52]	; 0x34
//						MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
//						MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
//						MPU9250->Mz = MPU9250->Mz_Raw * MPU9250->MMult * MPU9250->magCalibrationZ;
        }
    }
}
 8003436:	b007      	add	sp, #28
 8003438:	bd30      	pop	{r4, r5, pc}

0800343a <MPU9250_DataReady>:

MPU9250_Result_t MPU9250_DataReady(I2C_HandleTypeDef* hi2c ,MPU9250_t* MPU9250) {
 800343a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data;
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, INT_STATUS, &data, 1);
 800343c:	2301      	movs	r3, #1
 800343e:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	223a      	movs	r2, #58	; 0x3a
 8003446:	f10d 030f 	add.w	r3, sp, #15
 800344a:	f7ff fe1b 	bl	8003084 <I2C_ReadMulti>

    if (data & 0x01) {
        return MPU9250_Result_Ok;
 800344e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003452:	43c0      	mvns	r0, r0
    }
    return MPU9250_Result_Error;
}
 8003454:	f000 0001 	and.w	r0, r0, #1
 8003458:	b005      	add	sp, #20
 800345a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003460:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003462:	2214      	movs	r2, #20
{
 8003464:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003466:	eb0d 0002 	add.w	r0, sp, r2
 800346a:	2100      	movs	r1, #0
 800346c:	f000 fcca 	bl	8003e04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003470:	2400      	movs	r4, #0
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <MX_GPIO_Init+0xa0>)
 8003474:	9400      	str	r4, [sp, #0]
 8003476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8003478:	4d22      	ldr	r5, [pc, #136]	; (8003504 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800347a:	f042 0204 	orr.w	r2, r2, #4
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
 8003480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003482:	f002 0204 	and.w	r2, r2, #4
 8003486:	9200      	str	r2, [sp, #0]
 8003488:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800348a:	9401      	str	r4, [sp, #4]
 800348c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348e:	f042 0220 	orr.w	r2, r2, #32
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
 8003494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003496:	f002 0220 	and.w	r2, r2, #32
 800349a:	9201      	str	r2, [sp, #4]
 800349c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800349e:	9402      	str	r4, [sp, #8]
 80034a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
 80034a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034aa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80034ae:	9202      	str	r2, [sp, #8]
 80034b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	9403      	str	r4, [sp, #12]
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
 80034bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034be:	f002 0201 	and.w	r2, r2, #1
 80034c2:	9203      	str	r2, [sp, #12]
 80034c4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	9404      	str	r4, [sp, #16]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	f042 0202 	orr.w	r2, r2, #2
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80034d8:	4622      	mov	r2, r4
 80034da:	4628      	mov	r0, r5
 80034dc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80034e2:	f7fd fef9 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80034e6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80034ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034ec:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ee:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034f0:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034f8:	f7fd fe0e 	bl	8001118 <HAL_GPIO_Init>

}
 80034fc:	b00b      	add	sp, #44	; 0x2c
 80034fe:	bd30      	pop	{r4, r5, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	40021400 	.word	0x40021400

08003508 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003508:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800350a:	480c      	ldr	r0, [pc, #48]	; (800353c <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <MX_I2C1_Init+0x38>)
 800350e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003544 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8003516:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800351a:	2300      	movs	r3, #0
 800351c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800351e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003520:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003522:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003524:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003526:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003528:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800352a:	f7fd ffe7 	bl	80014fc <HAL_I2C_Init>
 800352e:	b118      	cbz	r0, 8003538 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003534:	f000 b924 	b.w	8003780 <Error_Handler>
 8003538:	bd08      	pop	{r3, pc}
 800353a:	bf00      	nop
 800353c:	2000020c 	.word	0x2000020c
 8003540:	40005400 	.word	0x40005400
 8003544:	00061a80 	.word	0x00061a80

08003548 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003548:	b530      	push	{r4, r5, lr}
 800354a:	4604      	mov	r4, r0
 800354c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354e:	2214      	movs	r2, #20
 8003550:	2100      	movs	r1, #0
 8003552:	a803      	add	r0, sp, #12
 8003554:	f000 fc56 	bl	8003e04 <memset>
  if(i2cHandle->Instance==I2C1)
 8003558:	6822      	ldr	r2, [r4, #0]
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_I2C_MspInit+0x84>)
 800355c:	429a      	cmp	r2, r3
 800355e:	d133      	bne.n	80035c8 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003560:	2500      	movs	r5, #0
 8003562:	4c1b      	ldr	r4, [pc, #108]	; (80035d0 <HAL_I2C_MspInit+0x88>)
 8003564:	9501      	str	r5, [sp, #4]
 8003566:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003568:	481a      	ldr	r0, [pc, #104]	; (80035d4 <HAL_I2C_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	6323      	str	r3, [r4, #48]	; 0x30
 8003570:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800357a:	23c0      	movs	r3, #192	; 0xc0
 800357c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800357e:	2312      	movs	r3, #18
 8003580:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003582:	2301      	movs	r3, #1
 8003584:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003586:	2303      	movs	r3, #3
 8003588:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800358c:	2304      	movs	r3, #4
 800358e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003590:	f7fd fdc2 	bl	8001118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003594:	9502      	str	r5, [sp, #8]
 8003596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800359c:	6423      	str	r3, [r4, #64]	; 0x40
 800359e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80035a4:	462a      	mov	r2, r5
 80035a6:	4629      	mov	r1, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035a8:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80035aa:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ac:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80035ae:	f7fd fd45 	bl	800103c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80035b2:	201f      	movs	r0, #31
 80035b4:	f7fd fd76 	bl	80010a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80035b8:	2020      	movs	r0, #32
 80035ba:	462a      	mov	r2, r5
 80035bc:	4629      	mov	r1, r5
 80035be:	f7fd fd3d 	bl	800103c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80035c2:	2020      	movs	r0, #32
 80035c4:	f7fd fd6e 	bl	80010a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80035c8:	b009      	add	sp, #36	; 0x24
 80035ca:	bd30      	pop	{r4, r5, pc}
 80035cc:	40005400 	.word	0x40005400
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40020400 	.word	0x40020400

080035d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80035d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    /* Place your implementation of fputc here */
    /* e.g. write a character to the Debug USART and Loop until the end of transmission */

    if('\n' == ch)
 80035da:	280a      	cmp	r0, #10
{
 80035dc:	9001      	str	r0, [sp, #4]
    if('\n' == ch)
 80035de:	d109      	bne.n	80035f4 <__io_putchar+0x1c>
    {
        int ch_tmp = '\r';
 80035e0:	a904      	add	r1, sp, #16
 80035e2:	230d      	movs	r3, #13
 80035e4:	f841 3d04 	str.w	r3, [r1, #-4]!

        /* Place your implementation of fputc here */
        /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch_tmp, 1, 0xFFFF);
 80035e8:	2201      	movs	r2, #1
 80035ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ee:	4807      	ldr	r0, [pc, #28]	; (800360c <__io_putchar+0x34>)
 80035f0:	f7ff fbee 	bl	8002dd0 <HAL_UART_Transmit>
    }

    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80035f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f8:	2201      	movs	r2, #1
 80035fa:	a901      	add	r1, sp, #4
 80035fc:	4803      	ldr	r0, [pc, #12]	; (800360c <__io_putchar+0x34>)
 80035fe:	f7ff fbe7 	bl	8002dd0 <HAL_UART_Transmit>

    return ch;
}
 8003602:	9801      	ldr	r0, [sp, #4]
 8003604:	b005      	add	sp, #20
 8003606:	f85d fb04 	ldr.w	pc, [sp], #4
 800360a:	bf00      	nop
 800360c:	20000344 	.word	0x20000344

08003610 <HAL_I2C_MasterRxCpltCallback>:
}
//uint8_t data[10]={0x75,};
//uint8_t test;

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003610:	4770      	bx	lr
	...

08003614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003614:	b530      	push	{r4, r5, lr}
 8003616:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003618:	2230      	movs	r2, #48	; 0x30
 800361a:	2100      	movs	r1, #0
 800361c:	a808      	add	r0, sp, #32
 800361e:	f000 fbf1 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003622:	2100      	movs	r1, #0
 8003624:	2214      	movs	r2, #20
 8003626:	a803      	add	r0, sp, #12
 8003628:	f000 fbec 	bl	8003e04 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	2400      	movs	r4, #0
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <SystemClock_Config+0x8c>)
 8003630:	9401      	str	r4, [sp, #4]
 8003632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003634:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <SystemClock_Config+0x90>)
 8003646:	9402      	str	r4, [sp, #8]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003656:	9302      	str	r3, [sp, #8]
 8003658:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800365a:	2301      	movs	r3, #1
 800365c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800365e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003662:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003668:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800366a:	2319      	movs	r3, #25
 800366c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800366e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003672:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003674:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003676:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003678:	2304      	movs	r3, #4
 800367a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800367c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800367e:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003680:	f7fe ffbe 	bl	8002600 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003684:	230f      	movs	r3, #15
 8003686:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003688:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800368a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800368e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003690:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003692:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003694:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003696:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003698:	f7ff f962 	bl	8002960 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800369c:	b015      	add	sp, #84	; 0x54
 800369e:	bd30      	pop	{r4, r5, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000

080036a8 <main>:
{
 80036a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Init();
 80036aa:	f7fd fc75 	bl	8000f98 <HAL_Init>
  SystemClock_Config();
 80036ae:	f7ff ffb1 	bl	8003614 <SystemClock_Config>
  MX_GPIO_Init();
 80036b2:	f7ff fed5 	bl	8003460 <MX_GPIO_Init>
  MX_I2C1_Init();
 80036b6:	f7ff ff27 	bl	8003508 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80036ba:	f000 faf3 	bl	8003ca4 <MX_USART1_UART_Init>
	printf("Start\n");
 80036be:	4828      	ldr	r0, [pc, #160]	; (8003760 <main+0xb8>)
 80036c0:	f001 f888 	bl	80047d4 <puts>
	if (MPU9250_Init(&hi2c1, &MPU9250, MPU9250_Device_0) != MPU9250_Result_Ok) {
 80036c4:	2200      	movs	r2, #0
 80036c6:	4927      	ldr	r1, [pc, #156]	; (8003764 <main+0xbc>)
 80036c8:	4827      	ldr	r0, [pc, #156]	; (8003768 <main+0xc0>)
 80036ca:	f7ff fcfd 	bl	80030c8 <MPU9250_Init>
 80036ce:	b110      	cbz	r0, 80036d6 <main+0x2e>
    printf("Device error!\r\n");}
 80036d0:	4826      	ldr	r0, [pc, #152]	; (800376c <main+0xc4>)
 80036d2:	f001 f87f 	bl	80047d4 <puts>
	TM_AHRSIMU_Init(&IMU, 1000, 0.5, 0);
 80036d6:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8003770 <main+0xc8>
 80036da:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8003774 <main+0xcc>
 80036de:	4826      	ldr	r0, [pc, #152]	; (8003778 <main+0xd0>)
	  if (MPU9250_DataReady(&hi2c1, &MPU9250) == MPU9250_Result_Ok) {
 80036e0:	4c20      	ldr	r4, [pc, #128]	; (8003764 <main+0xbc>)
 80036e2:	4d21      	ldr	r5, [pc, #132]	; (8003768 <main+0xc0>)
	  TM_AHRSIMU_UpdateIMU(&IMU, MPU9250.Gx, MPU9250.Gy, MPU9250.Gz, MPU9250.Ax, MPU9250.Ay, MPU9250.Az);
 80036e4:	4e24      	ldr	r6, [pc, #144]	; (8003778 <main+0xd0>)
	TM_AHRSIMU_Init(&IMU, 1000, 0.5, 0);
 80036e6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80036ea:	f000 f9bd 	bl	8003a68 <TM_AHRSIMU_Init>
	  if (MPU9250_DataReady(&hi2c1, &MPU9250) == MPU9250_Result_Ok) {
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f7ff fea2 	bl	800343a <MPU9250_DataReady>
 80036f6:	b958      	cbnz	r0, 8003710 <main+0x68>
	  		  MPU9250_ReadAcce(&hi2c1, &MPU9250);
 80036f8:	4621      	mov	r1, r4
 80036fa:	4628      	mov	r0, r5
 80036fc:	f7ff fde2 	bl	80032c4 <MPU9250_ReadAcce>
	          MPU9250_ReadGyro(&hi2c1, &MPU9250);
 8003700:	4621      	mov	r1, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f7ff fe1c 	bl	8003340 <MPU9250_ReadGyro>
	          MPU9250_ReadMag(&hi2c1, &MPU9250);
 8003708:	4621      	mov	r1, r4
 800370a:	4628      	mov	r0, r5
 800370c:	f7ff fe60 	bl	80033d0 <MPU9250_ReadMag>
	  TM_AHRSIMU_UpdateIMU(&IMU, MPU9250.Gx, MPU9250.Gy, MPU9250.Gz, MPU9250.Ax, MPU9250.Ay, MPU9250.Az);
 8003710:	edd4 2a02 	vldr	s5, [r4, #8]
 8003714:	ed94 2a01 	vldr	s4, [r4, #4]
 8003718:	edd4 1a00 	vldr	s3, [r4]
 800371c:	ed94 1a05 	vldr	s2, [r4, #20]
 8003720:	edd4 0a04 	vldr	s1, [r4, #16]
 8003724:	ed94 0a03 	vldr	s0, [r4, #12]
 8003728:	4813      	ldr	r0, [pc, #76]	; (8003778 <main+0xd0>)
 800372a:	f000 f9ae 	bl	8003a8a <TM_AHRSIMU_UpdateIMU>
	  printf("R: %f, P: %f, Y: %f\n", IMU.Roll, IMU.Pitch, IMU.Yaw);
 800372e:	6830      	ldr	r0, [r6, #0]
 8003730:	f7fc ff0a 	bl	8000548 <__aeabi_f2d>
 8003734:	4680      	mov	r8, r0
 8003736:	68b0      	ldr	r0, [r6, #8]
 8003738:	4689      	mov	r9, r1
 800373a:	f7fc ff05 	bl	8000548 <__aeabi_f2d>
 800373e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003742:	6870      	ldr	r0, [r6, #4]
 8003744:	f7fc ff00 	bl	8000548 <__aeabi_f2d>
 8003748:	4642      	mov	r2, r8
 800374a:	e9cd 0100 	strd	r0, r1, [sp]
 800374e:	464b      	mov	r3, r9
 8003750:	480a      	ldr	r0, [pc, #40]	; (800377c <main+0xd4>)
 8003752:	f000 ffcb 	bl	80046ec <iprintf>
	  HAL_Delay(20);
 8003756:	2014      	movs	r0, #20
 8003758:	f7fd fc4a 	bl	8000ff0 <HAL_Delay>
	  if (MPU9250_DataReady(&hi2c1, &MPU9250) == MPU9250_Result_Ok) {
 800375c:	e7c7      	b.n	80036ee <main+0x46>
 800375e:	bf00      	nop
 8003760:	08007198 	.word	0x08007198
 8003764:	2000028c 	.word	0x2000028c
 8003768:	2000020c 	.word	0x2000020c
 800376c:	0800719e 	.word	0x0800719e
 8003770:	00000000 	.word	0x00000000
 8003774:	447a0000 	.word	0x447a0000
 8003778:	20000264 	.word	0x20000264
 800377c:	080071ad 	.word	0x080071ad

08003780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003780:	4770      	bx	lr
	...

08003784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003784:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_MspInit+0x44>)
 8003788:	2200      	movs	r2, #0
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800378e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003792:	6459      	str	r1, [r3, #68]	; 0x44
 8003794:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003796:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800379a:	9100      	str	r1, [sp, #0]
 800379c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	9201      	str	r2, [sp, #4]
 80037a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037a2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80037a6:	6419      	str	r1, [r3, #64]	; 0x40
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80037b0:	4611      	mov	r1, r2
 80037b2:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80037b6:	f7fd fc41 	bl	800103c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80037ba:	2005      	movs	r0, #5
 80037bc:	f7fd fc72 	bl	80010a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c0:	b003      	add	sp, #12
 80037c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <NMI_Handler>:
 80037cc:	4770      	bx	lr

080037ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ce:	e7fe      	b.n	80037ce <HardFault_Handler>

080037d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d0:	e7fe      	b.n	80037d0 <MemManage_Handler>

080037d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037d2:	e7fe      	b.n	80037d2 <BusFault_Handler>

080037d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037d4:	e7fe      	b.n	80037d4 <UsageFault_Handler>

080037d6 <SVC_Handler>:
 80037d6:	4770      	bx	lr

080037d8 <DebugMon_Handler>:
 80037d8:	4770      	bx	lr

080037da <PendSV_Handler>:
 80037da:	4770      	bx	lr

080037dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037dc:	f7fd bbf6 	b.w	8000fcc <HAL_IncTick>

080037e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80037e0:	4770      	bx	lr
	...

080037e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80037e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	printf("ev_IRQ");
 80037e6:	4804      	ldr	r0, [pc, #16]	; (80037f8 <I2C1_EV_IRQHandler+0x14>)
 80037e8:	f000 ff80 	bl	80046ec <iprintf>
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80037ec:	4803      	ldr	r0, [pc, #12]	; (80037fc <I2C1_EV_IRQHandler+0x18>)
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80037ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80037f2:	f7fe ba49 	b.w	8001c88 <HAL_I2C_EV_IRQHandler>
 80037f6:	bf00      	nop
 80037f8:	080071c2 	.word	0x080071c2
 80037fc:	2000020c 	.word	0x2000020c

08003800 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <I2C1_ER_IRQHandler+0x8>)
 8003802:	f7fe be65 	b.w	80024d0 <HAL_I2C_ER_IRQHandler>
 8003806:	bf00      	nop
 8003808:	2000020c 	.word	0x2000020c

0800380c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800380c:	4801      	ldr	r0, [pc, #4]	; (8003814 <USART1_IRQHandler+0x8>)
 800380e:	f7ff bb7d 	b.w	8002f0c <HAL_UART_IRQHandler>
 8003812:	bf00      	nop
 8003814:	20000344 	.word	0x20000344

08003818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	460e      	mov	r6, r1
 800381c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381e:	460c      	mov	r4, r1
 8003820:	1ba3      	subs	r3, r4, r6
 8003822:	429d      	cmp	r5, r3
 8003824:	dc01      	bgt.n	800382a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003826:	4628      	mov	r0, r5
 8003828:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800382a:	f3af 8000 	nop.w
 800382e:	f804 0b01 	strb.w	r0, [r4], #1
 8003832:	e7f5      	b.n	8003820 <_read+0x8>

08003834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	460e      	mov	r6, r1
 8003838:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383a:	460c      	mov	r4, r1
 800383c:	1ba3      	subs	r3, r4, r6
 800383e:	429d      	cmp	r5, r3
 8003840:	dc01      	bgt.n	8003846 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003842:	4628      	mov	r0, r5
 8003844:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003846:	f814 0b01 	ldrb.w	r0, [r4], #1
 800384a:	f7ff fec5 	bl	80035d8 <__io_putchar>
 800384e:	e7f5      	b.n	800383c <_write+0x8>

08003850 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003850:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <_sbrk+0x2c>)
 8003854:	6819      	ldr	r1, [r3, #0]
{
 8003856:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003858:	b909      	cbnz	r1, 800385e <_sbrk+0xe>
		heap_end = &end;
 800385a:	4909      	ldr	r1, [pc, #36]	; (8003880 <_sbrk+0x30>)
 800385c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800385e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003860:	4669      	mov	r1, sp
 8003862:	4402      	add	r2, r0
 8003864:	428a      	cmp	r2, r1
 8003866:	d906      	bls.n	8003876 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003868:	f000 faa2 	bl	8003db0 <__errno>
 800386c:	230c      	movs	r3, #12
 800386e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003876:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003878:	bd08      	pop	{r3, pc}
 800387a:	bf00      	nop
 800387c:	200001fc 	.word	0x200001fc
 8003880:	20000388 	.word	0x20000388

08003884 <_close>:

int _close(int file)
{
	return -1;
}
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	4770      	bx	lr

0800388a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800388a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800388e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003890:	2000      	movs	r0, #0
 8003892:	4770      	bx	lr

08003894 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003894:	2001      	movs	r0, #1
 8003896:	4770      	bx	lr

08003898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003898:	2000      	movs	r0, #0
 800389a:	4770      	bx	lr

0800389c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800389c:	490f      	ldr	r1, [pc, #60]	; (80038dc <SystemInit+0x40>)
 800389e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80038a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <SystemInit+0x44>)
 80038ac:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038ae:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80038b6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80038be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038c4:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <SystemInit+0x48>)
 80038c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ce:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038d0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038d6:	608b      	str	r3, [r1, #8]
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000ed00 	.word	0xe000ed00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	24003010 	.word	0x24003010

080038e8 <oneOverSqrt>:
 */
#include "tm_stm32_ahrs_imu.h"

/* Calculate 1/sqrt(x) with magic number support */
static
float oneOverSqrt(float x) {
 80038e8:	b508      	push	{r3, lr}
    return 1.0f / (float) sqrt(x);
 80038ea:	ee10 0a10 	vmov	r0, s0
 80038ee:	f7fc fe2b 	bl	8000548 <__aeabi_f2d>
 80038f2:	ec41 0b10 	vmov	d0, r0, r1
 80038f6:	f002 fe95 	bl	8006624 <sqrt>
 80038fa:	ec51 0b10 	vmov	r0, r1, d0
 80038fe:	f7fd f94f 	bl	8000ba0 <__aeabi_d2f>
}
 8003902:	ee07 0a90 	vmov	s15, r0
 8003906:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800390a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800390e:	bd08      	pop	{r3, pc}

08003910 <calculateAngles>:

static
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8003910:	b510      	push	{r4, lr}
 8003912:	ed2d 8b04 	vpush	{d8-d9}
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8003916:	ed90 9a06 	vldr	s18, [r0, #24]
 800391a:	ed90 8a07 	vldr	s16, [r0, #28]
 800391e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8003922:	eef0 7a68 	vmov.f32	s15, s17
 8003926:	eee9 7a49 	vfms.f32	s15, s18, s18
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 800392a:	4604      	mov	r4, r0
 800392c:	b082      	sub	sp, #8
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 800392e:	eee8 7a48 	vfms.f32	s15, s16, s16
 8003932:	ee17 0a90 	vmov	r0, s15
 8003936:	f7fc fe07 	bl	8000548 <__aeabi_f2d>
 800393a:	edd4 7a08 	vldr	s15, [r4, #32]
 800393e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003942:	edd4 7a05 	vldr	s15, [r4, #20]
 8003946:	eea7 8a89 	vfma.f32	s16, s15, s18
 800394a:	e9cd 0100 	strd	r0, r1, [sp]
 800394e:	ee18 0a10 	vmov	r0, s16
 8003952:	f7fc fdf9 	bl	8000548 <__aeabi_f2d>
 8003956:	ed9d 1b00 	vldr	d1, [sp]
 800395a:	ec41 0b10 	vmov	d0, r0, r1
 800395e:	f002 fe5f 	bl	8006620 <atan2>
 8003962:	ec51 0b10 	vmov	r0, r1, d0
 8003966:	f7fd f91b 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 800396a:	ed94 7a05 	vldr	s14, [r4, #20]
 800396e:	edd4 7a07 	vldr	s15, [r4, #28]
 8003972:	edd4 6a06 	vldr	s13, [r4, #24]
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8003976:	6020      	str	r0, [r4, #0]
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8003978:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800397c:	ed94 7a08 	vldr	s14, [r4, #32]
 8003980:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003984:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398c:	ee17 0a90 	vmov	r0, s15
 8003990:	f7fc fdda 	bl	8000548 <__aeabi_f2d>
 8003994:	ec41 0b10 	vmov	d0, r0, r1
 8003998:	f002 fdea 	bl	8006570 <asin>
 800399c:	ec51 0b10 	vmov	r0, r1, d0
 80039a0:	f7fd f8fe 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80039a4:	ed94 9a07 	vldr	s18, [r4, #28]
 80039a8:	ed94 8a08 	vldr	s16, [r4, #32]
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 80039ac:	6060      	str	r0, [r4, #4]
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80039ae:	eee9 8a49 	vfms.f32	s17, s18, s18
 80039b2:	eee8 8a48 	vfms.f32	s17, s16, s16
 80039b6:	ee18 0a90 	vmov	r0, s17
 80039ba:	f7fc fdc5 	bl	8000548 <__aeabi_f2d>
 80039be:	edd4 7a05 	vldr	s15, [r4, #20]
 80039c2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80039c6:	edd4 7a06 	vldr	s15, [r4, #24]
 80039ca:	eea7 8a89 	vfma.f32	s16, s15, s18
 80039ce:	e9cd 0100 	strd	r0, r1, [sp]
 80039d2:	ee18 0a10 	vmov	r0, s16
 80039d6:	f7fc fdb7 	bl	8000548 <__aeabi_f2d>
 80039da:	ed9d 1b00 	vldr	d1, [sp]
 80039de:	ec41 0b10 	vmov	d0, r0, r1
 80039e2:	f002 fe1d 	bl	8006620 <atan2>

    /* Calculate degrees and remove inclination */
    AHRSIMU->Roll *= AHRSIMU_RAD2DEG(1);
 80039e6:	ed9f 8a1d 	vldr	s16, [pc, #116]	; 8003a5c <calculateAngles+0x14c>
 80039ea:	edd4 7a00 	vldr	s15, [r4]
 80039ee:	ee67 7a88 	vmul.f32	s15, s15, s16
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 80039f2:	ec51 0b10 	vmov	r0, r1, d0
    AHRSIMU->Roll *= AHRSIMU_RAD2DEG(1);
 80039f6:	edc4 7a00 	vstr	s15, [r4]
    AHRSIMU->Pitch *= AHRSIMU_RAD2DEG(1);
 80039fa:	edd4 7a01 	vldr	s15, [r4, #4]
 80039fe:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003a02:	edc4 7a01 	vstr	s15, [r4, #4]
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8003a06:	f7fd f8cb 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Yaw = AHRSIMU->Yaw * AHRSIMU_RAD2DEG(1) - AHRSIMU->Inclination;
 8003a0a:	edd4 7a03 	vldr	s15, [r4, #12]
 8003a0e:	ee07 0a10 	vmov	s14, r0
 8003a12:	eed7 7a08 	vfnms.f32	s15, s14, s16
 8003a16:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003a60 <calculateAngles+0x150>
 8003a1a:	eef0 6a67 	vmov.f32	s13, s15

    /* Check values because of inclination */
    if (AHRSIMU->Yaw < -180) {
 8003a1e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003a64 <calculateAngles+0x154>
 8003a22:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	d506      	bpl.n	8003a3a <calculateAngles+0x12a>
        AHRSIMU->Yaw = 180.0f - (-180.0f - AHRSIMU->Yaw);
 8003a2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003a30:	ee77 7a67 	vsub.f32	s15, s14, s15
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8003a34:	edc4 7a02 	vstr	s15, [r4, #8]
    }
}
 8003a38:	e006      	b.n	8003a48 <calculateAngles+0x138>
    } else if (AHRSIMU->Yaw > 180) {
 8003a3a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a42:	dc05      	bgt.n	8003a50 <calculateAngles+0x140>
    AHRSIMU->Yaw = AHRSIMU->Yaw * AHRSIMU_RAD2DEG(1) - AHRSIMU->Inclination;
 8003a44:	edc4 6a02 	vstr	s13, [r4, #8]
}
 8003a48:	b002      	add	sp, #8
 8003a4a:	ecbd 8b04 	vpop	{d8-d9}
 8003a4e:	bd10      	pop	{r4, pc}
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8003a50:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003a54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a58:	e7ec      	b.n	8003a34 <calculateAngles+0x124>
 8003a5a:	bf00      	nop
 8003a5c:	42652ee1 	.word	0x42652ee1
 8003a60:	43340000 	.word	0x43340000
 8003a64:	c3340000 	.word	0xc3340000

08003a68 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float beta, float sampleRate, float inclination) {
    AHRSIMU->_beta = beta;
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8003a68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003a6c:	eec7 0aa0 	vdiv.f32	s1, s15, s1
    AHRSIMU->Inclination = inclination;

    AHRSIMU->_q0 = 1.0f;
    AHRSIMU->_q1 = 0.0f;
 8003a70:	2300      	movs	r3, #0
 8003a72:	6183      	str	r3, [r0, #24]
    AHRSIMU->_q2 = 0.0f;
 8003a74:	61c3      	str	r3, [r0, #28]
    AHRSIMU->_q3 = 0.0f;
 8003a76:	6203      	str	r3, [r0, #32]
    AHRSIMU->_beta = beta;
 8003a78:	ed80 0a04 	vstr	s0, [r0, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8003a7c:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 8003a80:	ed80 1a03 	vstr	s2, [r0, #12]
    AHRSIMU->_q0 = 1.0f;
 8003a84:	edc0 7a05 	vstr	s15, [r0, #20]
    AHRSIMU->_q3 = 0.0f;
 8003a88:	4770      	bx	lr

08003a8a <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8003a8a:	b510      	push	{r4, lr}
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8003a8c:	edd0 7a06 	vldr	s15, [r0, #24]
 8003a90:	edd0 6a07 	vldr	s13, [r0, #28]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8003a94:	ed90 6a05 	vldr	s12, [r0, #20]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8003a98:	edd0 5a08 	vldr	s11, [r0, #32]
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8003a9c:	ed2d 8b0a 	vpush	{d8-d12}
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8003aa0:	ee60 bae6 	vnmul.f32	s23, s1, s13
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8003aa4:	ee26 ba81 	vmul.f32	s22, s13, s2
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8003aa8:	ee61 aa67 	vnmul.f32	s21, s2, s15
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8003aac:	ee27 9aa0 	vmul.f32	s18, s15, s1
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8003ab0:	eee7 bac0 	vfms.f32	s23, s15, s0
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8003ab4:	4604      	mov	r4, r0
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8003ab6:	eea0 ba06 	vfma.f32	s22, s0, s12
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8003aba:	eee0 aa86 	vfma.f32	s21, s1, s12
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8003abe:	eea1 9a06 	vfma.f32	s18, s2, s12
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8003ac2:	eee5 bac1 	vfms.f32	s23, s11, s2
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8003ac6:	eea0 bae5 	vfms.f32	s22, s1, s11
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8003aca:	eee0 aa25 	vfma.f32	s21, s0, s11
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8003ace:	eea0 9a66 	vfms.f32	s18, s0, s13

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8003ad2:	eef5 1a40 	vcmp.f32	s3, #0.0
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8003ad6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8003ade:	eef0 9a61 	vmov.f32	s19, s3
 8003ae2:	eef0 8a42 	vmov.f32	s17, s4
 8003ae6:	eeb0 8a62 	vmov.f32	s16, s5
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8003aea:	ee6b ba87 	vmul.f32	s23, s23, s14
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8003aee:	ee2b ba07 	vmul.f32	s22, s22, s14
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8003af2:	ee6a aa87 	vmul.f32	s21, s21, s14
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8003af6:	ee29 9a07 	vmul.f32	s18, s18, s14
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8003afa:	d10a      	bne.n	8003b12 <TM_AHRSIMU_UpdateIMU+0x88>
 8003afc:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8003b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b04:	d105      	bne.n	8003b12 <TM_AHRSIMU_UpdateIMU+0x88>
 8003b06:	eef5 2a40 	vcmp.f32	s5, #0.0
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	f000 8086 	beq.w	8003c1e <TM_AHRSIMU_UpdateIMU+0x194>

        /* Normalise accelerometer measurement */
        recipNorm = oneOverSqrt(ax * ax + ay * ay + az * az);
 8003b12:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8003b16:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8003b1a:	eea8 0a08 	vfma.f32	s0, s16, s16
 8003b1e:	f7ff fee3 	bl	80038e8 <oneOverSqrt>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRSIMU->_q0;
        _2q1 = 2.0f * AHRSIMU->_q1;
        _2q2 = 2.0f * AHRSIMU->_q2;
        _2q3 = 2.0f * AHRSIMU->_q3;
 8003b22:	edd4 6a08 	vldr	s13, [r4, #32]
        _2q1 = 2.0f * AHRSIMU->_q1;
 8003b26:	edd4 4a06 	vldr	s9, [r4, #24]
        _2q0 = 2.0f * AHRSIMU->_q0;
 8003b2a:	ed94 3a05 	vldr	s6, [r4, #20]
        _2q2 = 2.0f * AHRSIMU->_q2;
 8003b2e:	ed94 ca07 	vldr	s24, [r4, #28]
        ax *= recipNorm;
 8003b32:	ee69 1a80 	vmul.f32	s3, s19, s0
        _2q3 = 2.0f * AHRSIMU->_q3;
 8003b36:	ee36 1aa6 	vadd.f32	s2, s13, s13
        _4q0 = 4.0f * AHRSIMU->_q0;
 8003b3a:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
        az *= recipNorm;
 8003b3e:	ee68 2a00 	vmul.f32	s5, s16, s0
        _8q1 = 8.0f * AHRSIMU->_q1;
        _8q2 = 8.0f * AHRSIMU->_q2;
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8003b42:	ee66 0aa6 	vmul.f32	s1, s13, s13

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003b46:	ee20 0a68 	vnmul.f32	s0, s0, s17
        _4q1 = 4.0f * AHRSIMU->_q1;
 8003b4a:	ee24 8aa5 	vmul.f32	s16, s9, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b4e:	ee61 8a61 	vnmul.f32	s17, s2, s3
        _2q0 = 2.0f * AHRSIMU->_q0;
 8003b52:	ee73 7a03 	vadd.f32	s15, s6, s6
        _4q0 = 4.0f * AHRSIMU->_q0;
 8003b56:	ee23 2a25 	vmul.f32	s4, s6, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b5a:	eee8 8a20 	vfma.f32	s17, s16, s1
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 8003b5e:	ee23 3a03 	vmul.f32	s6, s6, s6
        _8q1 = 8.0f * AHRSIMU->_q1;
 8003b62:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b66:	ee23 3a25 	vmul.f32	s6, s6, s11
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8003b6a:	ee24 5aa4 	vmul.f32	s10, s9, s9
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b6e:	eee4 8a83 	vfma.f32	s17, s9, s6
        _8q1 = 8.0f * AHRSIMU->_q1;
 8003b72:	ee64 caa3 	vmul.f32	s25, s9, s7
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b76:	eee0 8a27 	vfma.f32	s17, s0, s15
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8003b7a:	ee2c 7a0c 	vmul.f32	s14, s24, s24
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b7e:	ee78 8ac8 	vsub.f32	s17, s17, s16
        _4q2 = 4.0f * AHRSIMU->_q2;
 8003b82:	ee2c 4a25 	vmul.f32	s8, s24, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b86:	eeec 8a85 	vfma.f32	s17, s25, s10
        _2q2 = 2.0f * AHRSIMU->_q2;
 8003b8a:	ee3c 6a0c 	vadd.f32	s12, s24, s24
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b8e:	eeec 8a87 	vfma.f32	s17, s25, s14
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003b92:	ee21 aa86 	vmul.f32	s20, s3, s12
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003b96:	eee2 8a88 	vfma.f32	s17, s5, s16
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003b9a:	ee21 8aa7 	vmul.f32	s16, s3, s15
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003b9e:	eea2 aa07 	vfma.f32	s20, s4, s14
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003ba2:	eeac 8a03 	vfma.f32	s16, s24, s6
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003ba6:	eea2 aa05 	vfma.f32	s20, s4, s10
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003baa:	eea4 8a20 	vfma.f32	s16, s8, s1
        _2q1 = 2.0f * AHRSIMU->_q1;
 8003bae:	ee74 9aa4 	vadd.f32	s19, s9, s9
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003bb2:	eea0 8a01 	vfma.f32	s16, s0, s2
        _8q2 = 8.0f * AHRSIMU->_q2;
 8003bb6:	ee6c 3a23 	vmul.f32	s7, s24, s7
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003bba:	ee38 8a44 	vsub.f32	s16, s16, s8
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003bbe:	eea0 aa29 	vfma.f32	s20, s0, s19
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003bc2:	eea3 8a85 	vfma.f32	s16, s7, s10
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8003bc6:	ee69 9ae1 	vnmul.f32	s19, s19, s3
 8003bca:	ee25 5a25 	vmul.f32	s10, s10, s11
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003bce:	eea3 8a87 	vfma.f32	s16, s7, s14
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8003bd2:	eee6 9a85 	vfma.f32	s19, s13, s10
 8003bd6:	ee27 7a25 	vmul.f32	s14, s14, s11
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003bda:	eea2 8a84 	vfma.f32	s16, s5, s8
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8003bde:	eee6 9a87 	vfma.f32	s19, s13, s14
 8003be2:	eee0 9a06 	vfma.f32	s19, s0, s12

        /* Normalise step magnitude */
        recipNorm = oneOverSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8003be6:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8003bea:	eeaa 0a0a 	vfma.f32	s0, s20, s20
 8003bee:	eea8 0a08 	vfma.f32	s0, s16, s16
 8003bf2:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8003bf6:	f7ff fe77 	bl	80038e8 <oneOverSqrt>
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRSIMU->_beta * s0;
 8003bfa:	edd4 7a04 	vldr	s15, [r4, #16]
 8003bfe:	ee20 aa4a 	vnmul.f32	s20, s0, s20
        qDot2 -= AHRSIMU->_beta * s1;
 8003c02:	ee60 8a68 	vnmul.f32	s17, s0, s17
        qDot3 -= AHRSIMU->_beta * s2;
 8003c06:	ee20 8a48 	vnmul.f32	s16, s0, s16
        qDot4 -= AHRSIMU->_beta * s3;
 8003c0a:	ee20 0a69 	vnmul.f32	s0, s0, s19
        qDot1 -= AHRSIMU->_beta * s0;
 8003c0e:	eeea ba27 	vfma.f32	s23, s20, s15
        qDot2 -= AHRSIMU->_beta * s1;
 8003c12:	eea8 baa7 	vfma.f32	s22, s17, s15
        qDot3 -= AHRSIMU->_beta * s2;
 8003c16:	eee8 aa27 	vfma.f32	s21, s16, s15
        qDot4 -= AHRSIMU->_beta * s3;
 8003c1a:	eea0 9a27 	vfma.f32	s18, s0, s15
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8003c1e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8003c22:	ed94 0a06 	vldr	s0, [r4, #24]
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8003c26:	edd4 6a05 	vldr	s13, [r4, #20]
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8003c2a:	ed94 7a07 	vldr	s14, [r4, #28]
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8003c2e:	edd4 7a08 	vldr	s15, [r4, #32]
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8003c32:	eeab 0a06 	vfma.f32	s0, s22, s12
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8003c36:	eeeb 6a86 	vfma.f32	s13, s23, s12
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8003c3a:	ed84 0a06 	vstr	s0, [r4, #24]

    /* Normalise quaternion */
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8003c3e:	ee20 0a00 	vmul.f32	s0, s0, s0
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8003c42:	eeaa 7a86 	vfma.f32	s14, s21, s12
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8003c46:	eea6 0aa6 	vfma.f32	s0, s13, s13
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8003c4a:	eee9 7a06 	vfma.f32	s15, s18, s12
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8003c4e:	eea7 0a07 	vfma.f32	s0, s14, s14
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8003c52:	edc4 7a08 	vstr	s15, [r4, #32]
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8003c56:	edc4 6a05 	vstr	s13, [r4, #20]
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8003c5a:	ed84 7a07 	vstr	s14, [r4, #28]
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8003c5e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8003c62:	f7ff fe41 	bl	80038e8 <oneOverSqrt>
    AHRSIMU->_q0 *= recipNorm;
 8003c66:	edd4 7a05 	vldr	s15, [r4, #20]
 8003c6a:	ee67 7a80 	vmul.f32	s15, s15, s0
    AHRSIMU->_q2 *= recipNorm;
    AHRSIMU->_q3 *= recipNorm;

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}
 8003c6e:	ecbd 8b0a 	vpop	{d8-d12}
    AHRSIMU->_q0 *= recipNorm;
 8003c72:	edc4 7a05 	vstr	s15, [r4, #20]
    AHRSIMU->_q1 *= recipNorm;
 8003c76:	edd4 7a06 	vldr	s15, [r4, #24]
 8003c7a:	ee67 7a80 	vmul.f32	s15, s15, s0
    calculateAngles(AHRSIMU);
 8003c7e:	4620      	mov	r0, r4
    AHRSIMU->_q1 *= recipNorm;
 8003c80:	edc4 7a06 	vstr	s15, [r4, #24]
    AHRSIMU->_q2 *= recipNorm;
 8003c84:	edd4 7a07 	vldr	s15, [r4, #28]
 8003c88:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003c8c:	edc4 7a07 	vstr	s15, [r4, #28]
    AHRSIMU->_q3 *= recipNorm;
 8003c90:	edd4 7a08 	vldr	s15, [r4, #32]
 8003c94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003c98:	ed84 0a08 	vstr	s0, [r4, #32]
}
 8003c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calculateAngles(AHRSIMU);
 8003ca0:	f7ff be36 	b.w	8003910 <calculateAngles>

08003ca4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ca4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8003ca6:	480b      	ldr	r0, [pc, #44]	; (8003cd4 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <MX_USART1_UART_Init+0x34>)
 8003caa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003cae:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cb2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cba:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cbc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cbe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cc0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cc2:	f7ff f857 	bl	8002d74 <HAL_UART_Init>
 8003cc6:	b118      	cbz	r0, 8003cd0 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ccc:	f7ff bd58 	b.w	8003780 <Error_Handler>
 8003cd0:	bd08      	pop	{r3, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000344 	.word	0x20000344
 8003cd8:	40011000 	.word	0x40011000

08003cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce2:	2214      	movs	r2, #20
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	a803      	add	r0, sp, #12
 8003ce8:	f000 f88c 	bl	8003e04 <memset>
  if(uartHandle->Instance==USART1)
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_UART_MspInit+0x78>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d12d      	bne.n	8003d50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cf4:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003cf8:	2400      	movs	r4, #0
 8003cfa:	9401      	str	r4, [sp, #4]
 8003cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfe:	4816      	ldr	r0, [pc, #88]	; (8003d58 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d00:	f042 0210 	orr.w	r2, r2, #16
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
 8003d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d08:	f002 0210 	and.w	r2, r2, #16
 8003d0c:	9201      	str	r2, [sp, #4]
 8003d0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d10:	9402      	str	r4, [sp, #8]
 8003d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	9302      	str	r3, [sp, #8]
 8003d22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d32:	2303      	movs	r3, #3
 8003d34:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d38:	2307      	movs	r3, #7
 8003d3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3c:	f7fd f9ec 	bl	8001118 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d40:	2025      	movs	r0, #37	; 0x25
 8003d42:	4622      	mov	r2, r4
 8003d44:	4621      	mov	r1, r4
 8003d46:	f7fd f979 	bl	800103c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d4a:	2025      	movs	r0, #37	; 0x25
 8003d4c:	f7fd f9aa 	bl	80010a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d50:	b008      	add	sp, #32
 8003d52:	bd10      	pop	{r4, pc}
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40020000 	.word	0x40020000

08003d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d62:	e003      	b.n	8003d6c <LoopCopyDataInit>

08003d64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d6a:	3104      	adds	r1, #4

08003d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d6c:	480b      	ldr	r0, [pc, #44]	; (8003d9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d74:	d3f6      	bcc.n	8003d64 <CopyDataInit>
  ldr  r2, =_sbss
 8003d76:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d78:	e002      	b.n	8003d80 <LoopFillZerobss>

08003d7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d7c:	f842 3b04 	str.w	r3, [r2], #4

08003d80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d84:	d3f9      	bcc.n	8003d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d86:	f7ff fd89 	bl	800389c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d8a:	f000 f817 	bl	8003dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d8e:	f7ff fc8b 	bl	80036a8 <main>
  bx  lr    
 8003d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d98:	08007508 	.word	0x08007508
  ldr  r0, =_sdata
 8003d9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003da0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003da4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003da8:	20000388 	.word	0x20000388

08003dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dac:	e7fe      	b.n	8003dac <ADC_IRQHandler>
	...

08003db0 <__errno>:
 8003db0:	4b01      	ldr	r3, [pc, #4]	; (8003db8 <__errno+0x8>)
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	2000000c 	.word	0x2000000c

08003dbc <__libc_init_array>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	4e0d      	ldr	r6, [pc, #52]	; (8003df4 <__libc_init_array+0x38>)
 8003dc0:	4c0d      	ldr	r4, [pc, #52]	; (8003df8 <__libc_init_array+0x3c>)
 8003dc2:	1ba4      	subs	r4, r4, r6
 8003dc4:	10a4      	asrs	r4, r4, #2
 8003dc6:	2500      	movs	r5, #0
 8003dc8:	42a5      	cmp	r5, r4
 8003dca:	d109      	bne.n	8003de0 <__libc_init_array+0x24>
 8003dcc:	4e0b      	ldr	r6, [pc, #44]	; (8003dfc <__libc_init_array+0x40>)
 8003dce:	4c0c      	ldr	r4, [pc, #48]	; (8003e00 <__libc_init_array+0x44>)
 8003dd0:	f003 f9d6 	bl	8007180 <_init>
 8003dd4:	1ba4      	subs	r4, r4, r6
 8003dd6:	10a4      	asrs	r4, r4, #2
 8003dd8:	2500      	movs	r5, #0
 8003dda:	42a5      	cmp	r5, r4
 8003ddc:	d105      	bne.n	8003dea <__libc_init_array+0x2e>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de4:	4798      	blx	r3
 8003de6:	3501      	adds	r5, #1
 8003de8:	e7ee      	b.n	8003dc8 <__libc_init_array+0xc>
 8003dea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dee:	4798      	blx	r3
 8003df0:	3501      	adds	r5, #1
 8003df2:	e7f2      	b.n	8003dda <__libc_init_array+0x1e>
 8003df4:	08007500 	.word	0x08007500
 8003df8:	08007500 	.word	0x08007500
 8003dfc:	08007500 	.word	0x08007500
 8003e00:	08007504 	.word	0x08007504

08003e04 <memset>:
 8003e04:	4402      	add	r2, r0
 8003e06:	4603      	mov	r3, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <__cvt>:
 8003e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	ec55 4b10 	vmov	r4, r5, d0
 8003e1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003e1e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e22:	2d00      	cmp	r5, #0
 8003e24:	460e      	mov	r6, r1
 8003e26:	4691      	mov	r9, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	bfb8      	it	lt
 8003e2c:	4622      	movlt	r2, r4
 8003e2e:	462b      	mov	r3, r5
 8003e30:	f027 0720 	bic.w	r7, r7, #32
 8003e34:	bfbb      	ittet	lt
 8003e36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e3a:	461d      	movlt	r5, r3
 8003e3c:	2300      	movge	r3, #0
 8003e3e:	232d      	movlt	r3, #45	; 0x2d
 8003e40:	bfb8      	it	lt
 8003e42:	4614      	movlt	r4, r2
 8003e44:	2f46      	cmp	r7, #70	; 0x46
 8003e46:	700b      	strb	r3, [r1, #0]
 8003e48:	d004      	beq.n	8003e54 <__cvt+0x40>
 8003e4a:	2f45      	cmp	r7, #69	; 0x45
 8003e4c:	d100      	bne.n	8003e50 <__cvt+0x3c>
 8003e4e:	3601      	adds	r6, #1
 8003e50:	2102      	movs	r1, #2
 8003e52:	e000      	b.n	8003e56 <__cvt+0x42>
 8003e54:	2103      	movs	r1, #3
 8003e56:	ab03      	add	r3, sp, #12
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	ab02      	add	r3, sp, #8
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4632      	mov	r2, r6
 8003e60:	4653      	mov	r3, sl
 8003e62:	ec45 4b10 	vmov	d0, r4, r5
 8003e66:	f000 fe0b 	bl	8004a80 <_dtoa_r>
 8003e6a:	2f47      	cmp	r7, #71	; 0x47
 8003e6c:	4680      	mov	r8, r0
 8003e6e:	d102      	bne.n	8003e76 <__cvt+0x62>
 8003e70:	f019 0f01 	tst.w	r9, #1
 8003e74:	d026      	beq.n	8003ec4 <__cvt+0xb0>
 8003e76:	2f46      	cmp	r7, #70	; 0x46
 8003e78:	eb08 0906 	add.w	r9, r8, r6
 8003e7c:	d111      	bne.n	8003ea2 <__cvt+0x8e>
 8003e7e:	f898 3000 	ldrb.w	r3, [r8]
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d10a      	bne.n	8003e9c <__cvt+0x88>
 8003e86:	2200      	movs	r2, #0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7fc fe17 	bl	8000ac0 <__aeabi_dcmpeq>
 8003e92:	b918      	cbnz	r0, 8003e9c <__cvt+0x88>
 8003e94:	f1c6 0601 	rsb	r6, r6, #1
 8003e98:	f8ca 6000 	str.w	r6, [sl]
 8003e9c:	f8da 3000 	ldr.w	r3, [sl]
 8003ea0:	4499      	add	r9, r3
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7fc fe09 	bl	8000ac0 <__aeabi_dcmpeq>
 8003eae:	b938      	cbnz	r0, 8003ec0 <__cvt+0xac>
 8003eb0:	2230      	movs	r2, #48	; 0x30
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	4599      	cmp	r9, r3
 8003eb6:	d905      	bls.n	8003ec4 <__cvt+0xb0>
 8003eb8:	1c59      	adds	r1, r3, #1
 8003eba:	9103      	str	r1, [sp, #12]
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e7f8      	b.n	8003eb2 <__cvt+0x9e>
 8003ec0:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ec8:	eba3 0308 	sub.w	r3, r3, r8
 8003ecc:	4640      	mov	r0, r8
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	b004      	add	sp, #16
 8003ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003ed6 <__exponent>:
 8003ed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2900      	cmp	r1, #0
 8003edc:	bfb8      	it	lt
 8003ede:	4249      	neglt	r1, r1
 8003ee0:	f803 2b02 	strb.w	r2, [r3], #2
 8003ee4:	bfb4      	ite	lt
 8003ee6:	222d      	movlt	r2, #45	; 0x2d
 8003ee8:	222b      	movge	r2, #43	; 0x2b
 8003eea:	2909      	cmp	r1, #9
 8003eec:	7042      	strb	r2, [r0, #1]
 8003eee:	dd20      	ble.n	8003f32 <__exponent+0x5c>
 8003ef0:	f10d 0207 	add.w	r2, sp, #7
 8003ef4:	4617      	mov	r7, r2
 8003ef6:	260a      	movs	r6, #10
 8003ef8:	fb91 f5f6 	sdiv	r5, r1, r6
 8003efc:	fb06 1115 	mls	r1, r6, r5, r1
 8003f00:	3130      	adds	r1, #48	; 0x30
 8003f02:	2d09      	cmp	r5, #9
 8003f04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f08:	f102 34ff 	add.w	r4, r2, #4294967295
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	dc09      	bgt.n	8003f24 <__exponent+0x4e>
 8003f10:	3130      	adds	r1, #48	; 0x30
 8003f12:	3a02      	subs	r2, #2
 8003f14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f18:	42ba      	cmp	r2, r7
 8003f1a:	461c      	mov	r4, r3
 8003f1c:	d304      	bcc.n	8003f28 <__exponent+0x52>
 8003f1e:	1a20      	subs	r0, r4, r0
 8003f20:	b003      	add	sp, #12
 8003f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f24:	4622      	mov	r2, r4
 8003f26:	e7e7      	b.n	8003ef8 <__exponent+0x22>
 8003f28:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f30:	e7f2      	b.n	8003f18 <__exponent+0x42>
 8003f32:	2230      	movs	r2, #48	; 0x30
 8003f34:	461c      	mov	r4, r3
 8003f36:	4411      	add	r1, r2
 8003f38:	f804 2b02 	strb.w	r2, [r4], #2
 8003f3c:	7059      	strb	r1, [r3, #1]
 8003f3e:	e7ee      	b.n	8003f1e <__exponent+0x48>

08003f40 <_printf_float>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	b08d      	sub	sp, #52	; 0x34
 8003f46:	460c      	mov	r4, r1
 8003f48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003f4c:	4616      	mov	r6, r2
 8003f4e:	461f      	mov	r7, r3
 8003f50:	4605      	mov	r5, r0
 8003f52:	f001 fcdf 	bl	8005914 <_localeconv_r>
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc f938 	bl	80001d0 <strlen>
 8003f60:	2300      	movs	r3, #0
 8003f62:	930a      	str	r3, [sp, #40]	; 0x28
 8003f64:	f8d8 3000 	ldr.w	r3, [r8]
 8003f68:	9005      	str	r0, [sp, #20]
 8003f6a:	3307      	adds	r3, #7
 8003f6c:	f023 0307 	bic.w	r3, r3, #7
 8003f70:	f103 0208 	add.w	r2, r3, #8
 8003f74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f78:	f8d4 b000 	ldr.w	fp, [r4]
 8003f7c:	f8c8 2000 	str.w	r2, [r8]
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f90:	9307      	str	r3, [sp, #28]
 8003f92:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f96:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9a:	4ba5      	ldr	r3, [pc, #660]	; (8004230 <_printf_float+0x2f0>)
 8003f9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fa0:	f7fc fdc0 	bl	8000b24 <__aeabi_dcmpun>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f040 81fb 	bne.w	80043a0 <_printf_float+0x460>
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295
 8003fae:	4ba0      	ldr	r3, [pc, #640]	; (8004230 <_printf_float+0x2f0>)
 8003fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fb4:	f7fc fd98 	bl	8000ae8 <__aeabi_dcmple>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f040 81f1 	bne.w	80043a0 <_printf_float+0x460>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	f7fc fd85 	bl	8000ad4 <__aeabi_dcmplt>
 8003fca:	b110      	cbz	r0, 8003fd2 <_printf_float+0x92>
 8003fcc:	232d      	movs	r3, #45	; 0x2d
 8003fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd2:	4b98      	ldr	r3, [pc, #608]	; (8004234 <_printf_float+0x2f4>)
 8003fd4:	4a98      	ldr	r2, [pc, #608]	; (8004238 <_printf_float+0x2f8>)
 8003fd6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003fda:	bf8c      	ite	hi
 8003fdc:	4690      	movhi	r8, r2
 8003fde:	4698      	movls	r8, r3
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	f02b 0204 	bic.w	r2, fp, #4
 8003fe6:	6123      	str	r3, [r4, #16]
 8003fe8:	6022      	str	r2, [r4, #0]
 8003fea:	f04f 0900 	mov.w	r9, #0
 8003fee:	9700      	str	r7, [sp, #0]
 8003ff0:	4633      	mov	r3, r6
 8003ff2:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f000 f9e2 	bl	80043c0 <_printf_common>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	f040 8093 	bne.w	8004128 <_printf_float+0x1e8>
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
 8004006:	b00d      	add	sp, #52	; 0x34
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	6861      	ldr	r1, [r4, #4]
 800400e:	1c4b      	adds	r3, r1, #1
 8004010:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004014:	d13f      	bne.n	8004096 <_printf_float+0x156>
 8004016:	2306      	movs	r3, #6
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	2300      	movs	r3, #0
 800401c:	9303      	str	r3, [sp, #12]
 800401e:	ab0a      	add	r3, sp, #40	; 0x28
 8004020:	9302      	str	r3, [sp, #8]
 8004022:	ab09      	add	r3, sp, #36	; 0x24
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	ec49 8b10 	vmov	d0, r8, r9
 800402a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800402e:	6022      	str	r2, [r4, #0]
 8004030:	f8cd a004 	str.w	sl, [sp, #4]
 8004034:	6861      	ldr	r1, [r4, #4]
 8004036:	4628      	mov	r0, r5
 8004038:	f7ff feec 	bl	8003e14 <__cvt>
 800403c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004040:	2b47      	cmp	r3, #71	; 0x47
 8004042:	4680      	mov	r8, r0
 8004044:	d109      	bne.n	800405a <_printf_float+0x11a>
 8004046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004048:	1cd8      	adds	r0, r3, #3
 800404a:	db02      	blt.n	8004052 <_printf_float+0x112>
 800404c:	6862      	ldr	r2, [r4, #4]
 800404e:	4293      	cmp	r3, r2
 8004050:	dd57      	ble.n	8004102 <_printf_float+0x1c2>
 8004052:	f1aa 0a02 	sub.w	sl, sl, #2
 8004056:	fa5f fa8a 	uxtb.w	sl, sl
 800405a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800405e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004060:	d834      	bhi.n	80040cc <_printf_float+0x18c>
 8004062:	3901      	subs	r1, #1
 8004064:	4652      	mov	r2, sl
 8004066:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800406a:	9109      	str	r1, [sp, #36]	; 0x24
 800406c:	f7ff ff33 	bl	8003ed6 <__exponent>
 8004070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004072:	1883      	adds	r3, r0, r2
 8004074:	2a01      	cmp	r2, #1
 8004076:	4681      	mov	r9, r0
 8004078:	6123      	str	r3, [r4, #16]
 800407a:	dc02      	bgt.n	8004082 <_printf_float+0x142>
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	07d1      	lsls	r1, r2, #31
 8004080:	d501      	bpl.n	8004086 <_printf_float+0x146>
 8004082:	3301      	adds	r3, #1
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0af      	beq.n	8003fee <_printf_float+0xae>
 800408e:	232d      	movs	r3, #45	; 0x2d
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004094:	e7ab      	b.n	8003fee <_printf_float+0xae>
 8004096:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800409a:	d002      	beq.n	80040a2 <_printf_float+0x162>
 800409c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80040a0:	d1bb      	bne.n	800401a <_printf_float+0xda>
 80040a2:	b189      	cbz	r1, 80040c8 <_printf_float+0x188>
 80040a4:	2300      	movs	r3, #0
 80040a6:	9303      	str	r3, [sp, #12]
 80040a8:	ab0a      	add	r3, sp, #40	; 0x28
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	ab09      	add	r3, sp, #36	; 0x24
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	ec49 8b10 	vmov	d0, r8, r9
 80040b4:	6022      	str	r2, [r4, #0]
 80040b6:	f8cd a004 	str.w	sl, [sp, #4]
 80040ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040be:	4628      	mov	r0, r5
 80040c0:	f7ff fea8 	bl	8003e14 <__cvt>
 80040c4:	4680      	mov	r8, r0
 80040c6:	e7be      	b.n	8004046 <_printf_float+0x106>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e7a5      	b.n	8004018 <_printf_float+0xd8>
 80040cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80040d0:	d119      	bne.n	8004106 <_printf_float+0x1c6>
 80040d2:	2900      	cmp	r1, #0
 80040d4:	6863      	ldr	r3, [r4, #4]
 80040d6:	dd0c      	ble.n	80040f2 <_printf_float+0x1b2>
 80040d8:	6121      	str	r1, [r4, #16]
 80040da:	b913      	cbnz	r3, 80040e2 <_printf_float+0x1a2>
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	07d2      	lsls	r2, r2, #31
 80040e0:	d502      	bpl.n	80040e8 <_printf_float+0x1a8>
 80040e2:	3301      	adds	r3, #1
 80040e4:	440b      	add	r3, r1
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80040ec:	f04f 0900 	mov.w	r9, #0
 80040f0:	e7c9      	b.n	8004086 <_printf_float+0x146>
 80040f2:	b913      	cbnz	r3, 80040fa <_printf_float+0x1ba>
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	07d0      	lsls	r0, r2, #31
 80040f8:	d501      	bpl.n	80040fe <_printf_float+0x1be>
 80040fa:	3302      	adds	r3, #2
 80040fc:	e7f3      	b.n	80040e6 <_printf_float+0x1a6>
 80040fe:	2301      	movs	r3, #1
 8004100:	e7f1      	b.n	80040e6 <_printf_float+0x1a6>
 8004102:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800410a:	4293      	cmp	r3, r2
 800410c:	db05      	blt.n	800411a <_printf_float+0x1da>
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	07d1      	lsls	r1, r2, #31
 8004114:	d5e8      	bpl.n	80040e8 <_printf_float+0x1a8>
 8004116:	3301      	adds	r3, #1
 8004118:	e7e5      	b.n	80040e6 <_printf_float+0x1a6>
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfd4      	ite	le
 800411e:	f1c3 0302 	rsble	r3, r3, #2
 8004122:	2301      	movgt	r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	e7de      	b.n	80040e6 <_printf_float+0x1a6>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	055a      	lsls	r2, r3, #21
 800412c:	d407      	bmi.n	800413e <_printf_float+0x1fe>
 800412e:	6923      	ldr	r3, [r4, #16]
 8004130:	4642      	mov	r2, r8
 8004132:	4631      	mov	r1, r6
 8004134:	4628      	mov	r0, r5
 8004136:	47b8      	blx	r7
 8004138:	3001      	adds	r0, #1
 800413a:	d12b      	bne.n	8004194 <_printf_float+0x254>
 800413c:	e761      	b.n	8004002 <_printf_float+0xc2>
 800413e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004142:	f240 80e2 	bls.w	800430a <_printf_float+0x3ca>
 8004146:	2200      	movs	r2, #0
 8004148:	2300      	movs	r3, #0
 800414a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800414e:	f7fc fcb7 	bl	8000ac0 <__aeabi_dcmpeq>
 8004152:	2800      	cmp	r0, #0
 8004154:	d03c      	beq.n	80041d0 <_printf_float+0x290>
 8004156:	2301      	movs	r3, #1
 8004158:	4a38      	ldr	r2, [pc, #224]	; (800423c <_printf_float+0x2fc>)
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	f43f af4e 	beq.w	8004002 <_printf_float+0xc2>
 8004166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800416a:	429a      	cmp	r2, r3
 800416c:	db02      	blt.n	8004174 <_printf_float+0x234>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	07d8      	lsls	r0, r3, #31
 8004172:	d50f      	bpl.n	8004194 <_printf_float+0x254>
 8004174:	9b05      	ldr	r3, [sp, #20]
 8004176:	9a04      	ldr	r2, [sp, #16]
 8004178:	4631      	mov	r1, r6
 800417a:	4628      	mov	r0, r5
 800417c:	47b8      	blx	r7
 800417e:	3001      	adds	r0, #1
 8004180:	f43f af3f 	beq.w	8004002 <_printf_float+0xc2>
 8004184:	f04f 0800 	mov.w	r8, #0
 8004188:	f104 091a 	add.w	r9, r4, #26
 800418c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	4598      	cmp	r8, r3
 8004192:	db12      	blt.n	80041ba <_printf_float+0x27a>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	079b      	lsls	r3, r3, #30
 8004198:	d509      	bpl.n	80041ae <_printf_float+0x26e>
 800419a:	f04f 0800 	mov.w	r8, #0
 800419e:	f104 0919 	add.w	r9, r4, #25
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	4598      	cmp	r8, r3
 80041aa:	f2c0 80ee 	blt.w	800438a <_printf_float+0x44a>
 80041ae:	68e0      	ldr	r0, [r4, #12]
 80041b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041b2:	4298      	cmp	r0, r3
 80041b4:	bfb8      	it	lt
 80041b6:	4618      	movlt	r0, r3
 80041b8:	e725      	b.n	8004006 <_printf_float+0xc6>
 80041ba:	2301      	movs	r3, #1
 80041bc:	464a      	mov	r2, r9
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	f43f af1c 	beq.w	8004002 <_printf_float+0xc2>
 80041ca:	f108 0801 	add.w	r8, r8, #1
 80041ce:	e7dd      	b.n	800418c <_printf_float+0x24c>
 80041d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dc34      	bgt.n	8004240 <_printf_float+0x300>
 80041d6:	2301      	movs	r3, #1
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <_printf_float+0x2fc>)
 80041da:	4631      	mov	r1, r6
 80041dc:	4628      	mov	r0, r5
 80041de:	47b8      	blx	r7
 80041e0:	3001      	adds	r0, #1
 80041e2:	f43f af0e 	beq.w	8004002 <_printf_float+0xc2>
 80041e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e8:	b923      	cbnz	r3, 80041f4 <_printf_float+0x2b4>
 80041ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ec:	b913      	cbnz	r3, 80041f4 <_printf_float+0x2b4>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	07d9      	lsls	r1, r3, #31
 80041f2:	d5cf      	bpl.n	8004194 <_printf_float+0x254>
 80041f4:	9b05      	ldr	r3, [sp, #20]
 80041f6:	9a04      	ldr	r2, [sp, #16]
 80041f8:	4631      	mov	r1, r6
 80041fa:	4628      	mov	r0, r5
 80041fc:	47b8      	blx	r7
 80041fe:	3001      	adds	r0, #1
 8004200:	f43f aeff 	beq.w	8004002 <_printf_float+0xc2>
 8004204:	f04f 0900 	mov.w	r9, #0
 8004208:	f104 0a1a 	add.w	sl, r4, #26
 800420c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420e:	425b      	negs	r3, r3
 8004210:	4599      	cmp	r9, r3
 8004212:	db01      	blt.n	8004218 <_printf_float+0x2d8>
 8004214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004216:	e78b      	b.n	8004130 <_printf_float+0x1f0>
 8004218:	2301      	movs	r3, #1
 800421a:	4652      	mov	r2, sl
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	f43f aeed 	beq.w	8004002 <_printf_float+0xc2>
 8004228:	f109 0901 	add.w	r9, r9, #1
 800422c:	e7ee      	b.n	800420c <_printf_float+0x2cc>
 800422e:	bf00      	nop
 8004230:	7fefffff 	.word	0x7fefffff
 8004234:	080071e8 	.word	0x080071e8
 8004238:	080071ec 	.word	0x080071ec
 800423c:	080071f8 	.word	0x080071f8
 8004240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004242:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004244:	429a      	cmp	r2, r3
 8004246:	bfa8      	it	ge
 8004248:	461a      	movge	r2, r3
 800424a:	2a00      	cmp	r2, #0
 800424c:	4691      	mov	r9, r2
 800424e:	dc38      	bgt.n	80042c2 <_printf_float+0x382>
 8004250:	f104 031a 	add.w	r3, r4, #26
 8004254:	f04f 0b00 	mov.w	fp, #0
 8004258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800425c:	9306      	str	r3, [sp, #24]
 800425e:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004262:	ebaa 0309 	sub.w	r3, sl, r9
 8004266:	459b      	cmp	fp, r3
 8004268:	db33      	blt.n	80042d2 <_printf_float+0x392>
 800426a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800426c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800426e:	429a      	cmp	r2, r3
 8004270:	db3a      	blt.n	80042e8 <_printf_float+0x3a8>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	07da      	lsls	r2, r3, #31
 8004276:	d437      	bmi.n	80042e8 <_printf_float+0x3a8>
 8004278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800427a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800427c:	eba3 020a 	sub.w	r2, r3, sl
 8004280:	eba3 0901 	sub.w	r9, r3, r1
 8004284:	4591      	cmp	r9, r2
 8004286:	bfa8      	it	ge
 8004288:	4691      	movge	r9, r2
 800428a:	f1b9 0f00 	cmp.w	r9, #0
 800428e:	dc33      	bgt.n	80042f8 <_printf_float+0x3b8>
 8004290:	f04f 0800 	mov.w	r8, #0
 8004294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004298:	f104 0a1a 	add.w	sl, r4, #26
 800429c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800429e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	eba3 0309 	sub.w	r3, r3, r9
 80042a6:	4598      	cmp	r8, r3
 80042a8:	f6bf af74 	bge.w	8004194 <_printf_float+0x254>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4652      	mov	r2, sl
 80042b0:	4631      	mov	r1, r6
 80042b2:	4628      	mov	r0, r5
 80042b4:	47b8      	blx	r7
 80042b6:	3001      	adds	r0, #1
 80042b8:	f43f aea3 	beq.w	8004002 <_printf_float+0xc2>
 80042bc:	f108 0801 	add.w	r8, r8, #1
 80042c0:	e7ec      	b.n	800429c <_printf_float+0x35c>
 80042c2:	4613      	mov	r3, r2
 80042c4:	4631      	mov	r1, r6
 80042c6:	4642      	mov	r2, r8
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	d1bf      	bne.n	8004250 <_printf_float+0x310>
 80042d0:	e697      	b.n	8004002 <_printf_float+0xc2>
 80042d2:	2301      	movs	r3, #1
 80042d4:	9a06      	ldr	r2, [sp, #24]
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	f43f ae90 	beq.w	8004002 <_printf_float+0xc2>
 80042e2:	f10b 0b01 	add.w	fp, fp, #1
 80042e6:	e7ba      	b.n	800425e <_printf_float+0x31e>
 80042e8:	9b05      	ldr	r3, [sp, #20]
 80042ea:	9a04      	ldr	r2, [sp, #16]
 80042ec:	4631      	mov	r1, r6
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b8      	blx	r7
 80042f2:	3001      	adds	r0, #1
 80042f4:	d1c0      	bne.n	8004278 <_printf_float+0x338>
 80042f6:	e684      	b.n	8004002 <_printf_float+0xc2>
 80042f8:	464b      	mov	r3, r9
 80042fa:	eb08 020a 	add.w	r2, r8, sl
 80042fe:	4631      	mov	r1, r6
 8004300:	4628      	mov	r0, r5
 8004302:	47b8      	blx	r7
 8004304:	3001      	adds	r0, #1
 8004306:	d1c3      	bne.n	8004290 <_printf_float+0x350>
 8004308:	e67b      	b.n	8004002 <_printf_float+0xc2>
 800430a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800430c:	2a01      	cmp	r2, #1
 800430e:	dc01      	bgt.n	8004314 <_printf_float+0x3d4>
 8004310:	07db      	lsls	r3, r3, #31
 8004312:	d537      	bpl.n	8004384 <_printf_float+0x444>
 8004314:	2301      	movs	r3, #1
 8004316:	4642      	mov	r2, r8
 8004318:	4631      	mov	r1, r6
 800431a:	4628      	mov	r0, r5
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f ae6f 	beq.w	8004002 <_printf_float+0xc2>
 8004324:	9b05      	ldr	r3, [sp, #20]
 8004326:	9a04      	ldr	r2, [sp, #16]
 8004328:	4631      	mov	r1, r6
 800432a:	4628      	mov	r0, r5
 800432c:	47b8      	blx	r7
 800432e:	3001      	adds	r0, #1
 8004330:	f43f ae67 	beq.w	8004002 <_printf_float+0xc2>
 8004334:	2200      	movs	r2, #0
 8004336:	2300      	movs	r3, #0
 8004338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800433c:	f7fc fbc0 	bl	8000ac0 <__aeabi_dcmpeq>
 8004340:	b158      	cbz	r0, 800435a <_printf_float+0x41a>
 8004342:	f04f 0800 	mov.w	r8, #0
 8004346:	f104 0a1a 	add.w	sl, r4, #26
 800434a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	4598      	cmp	r8, r3
 8004350:	db0d      	blt.n	800436e <_printf_float+0x42e>
 8004352:	464b      	mov	r3, r9
 8004354:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004358:	e6eb      	b.n	8004132 <_printf_float+0x1f2>
 800435a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800435c:	f108 0201 	add.w	r2, r8, #1
 8004360:	3b01      	subs	r3, #1
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	d1f2      	bne.n	8004352 <_printf_float+0x412>
 800436c:	e649      	b.n	8004002 <_printf_float+0xc2>
 800436e:	2301      	movs	r3, #1
 8004370:	4652      	mov	r2, sl
 8004372:	4631      	mov	r1, r6
 8004374:	4628      	mov	r0, r5
 8004376:	47b8      	blx	r7
 8004378:	3001      	adds	r0, #1
 800437a:	f43f ae42 	beq.w	8004002 <_printf_float+0xc2>
 800437e:	f108 0801 	add.w	r8, r8, #1
 8004382:	e7e2      	b.n	800434a <_printf_float+0x40a>
 8004384:	2301      	movs	r3, #1
 8004386:	4642      	mov	r2, r8
 8004388:	e7eb      	b.n	8004362 <_printf_float+0x422>
 800438a:	2301      	movs	r3, #1
 800438c:	464a      	mov	r2, r9
 800438e:	4631      	mov	r1, r6
 8004390:	4628      	mov	r0, r5
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	f43f ae34 	beq.w	8004002 <_printf_float+0xc2>
 800439a:	f108 0801 	add.w	r8, r8, #1
 800439e:	e700      	b.n	80041a2 <_printf_float+0x262>
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	4640      	mov	r0, r8
 80043a6:	4649      	mov	r1, r9
 80043a8:	f7fc fbbc 	bl	8000b24 <__aeabi_dcmpun>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	f43f ae2d 	beq.w	800400c <_printf_float+0xcc>
 80043b2:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <_printf_float+0x478>)
 80043b4:	4a01      	ldr	r2, [pc, #4]	; (80043bc <_printf_float+0x47c>)
 80043b6:	e60e      	b.n	8003fd6 <_printf_float+0x96>
 80043b8:	080071f0 	.word	0x080071f0
 80043bc:	080071f4 	.word	0x080071f4

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4691      	mov	r9, r2
 80043c6:	461f      	mov	r7, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	f8c9 3000 	str.w	r3, [r9]
 80043da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043de:	4606      	mov	r6, r0
 80043e0:	460c      	mov	r4, r1
 80043e2:	b112      	cbz	r2, 80043ea <_printf_common+0x2a>
 80043e4:	3301      	adds	r3, #1
 80043e6:	f8c9 3000 	str.w	r3, [r9]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	0699      	lsls	r1, r3, #26
 80043ee:	bf42      	ittt	mi
 80043f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043f4:	3302      	addmi	r3, #2
 80043f6:	f8c9 3000 	strmi.w	r3, [r9]
 80043fa:	6825      	ldr	r5, [r4, #0]
 80043fc:	f015 0506 	ands.w	r5, r5, #6
 8004400:	d107      	bne.n	8004412 <_printf_common+0x52>
 8004402:	f104 0a19 	add.w	sl, r4, #25
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	f8d9 2000 	ldr.w	r2, [r9]
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	429d      	cmp	r5, r3
 8004410:	db29      	blt.n	8004466 <_printf_common+0xa6>
 8004412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004416:	6822      	ldr	r2, [r4, #0]
 8004418:	3300      	adds	r3, #0
 800441a:	bf18      	it	ne
 800441c:	2301      	movne	r3, #1
 800441e:	0692      	lsls	r2, r2, #26
 8004420:	d42e      	bmi.n	8004480 <_printf_common+0xc0>
 8004422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004426:	4639      	mov	r1, r7
 8004428:	4630      	mov	r0, r6
 800442a:	47c0      	blx	r8
 800442c:	3001      	adds	r0, #1
 800442e:	d021      	beq.n	8004474 <_printf_common+0xb4>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	68e5      	ldr	r5, [r4, #12]
 8004434:	f8d9 2000 	ldr.w	r2, [r9]
 8004438:	f003 0306 	and.w	r3, r3, #6
 800443c:	2b04      	cmp	r3, #4
 800443e:	bf08      	it	eq
 8004440:	1aad      	subeq	r5, r5, r2
 8004442:	68a3      	ldr	r3, [r4, #8]
 8004444:	6922      	ldr	r2, [r4, #16]
 8004446:	bf0c      	ite	eq
 8004448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800444c:	2500      	movne	r5, #0
 800444e:	4293      	cmp	r3, r2
 8004450:	bfc4      	itt	gt
 8004452:	1a9b      	subgt	r3, r3, r2
 8004454:	18ed      	addgt	r5, r5, r3
 8004456:	f04f 0900 	mov.w	r9, #0
 800445a:	341a      	adds	r4, #26
 800445c:	454d      	cmp	r5, r9
 800445e:	d11b      	bne.n	8004498 <_printf_common+0xd8>
 8004460:	2000      	movs	r0, #0
 8004462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004466:	2301      	movs	r3, #1
 8004468:	4652      	mov	r2, sl
 800446a:	4639      	mov	r1, r7
 800446c:	4630      	mov	r0, r6
 800446e:	47c0      	blx	r8
 8004470:	3001      	adds	r0, #1
 8004472:	d103      	bne.n	800447c <_printf_common+0xbc>
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447c:	3501      	adds	r5, #1
 800447e:	e7c2      	b.n	8004406 <_printf_common+0x46>
 8004480:	18e1      	adds	r1, r4, r3
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	2030      	movs	r0, #48	; 0x30
 8004486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800448a:	4422      	add	r2, r4
 800448c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004494:	3302      	adds	r3, #2
 8004496:	e7c4      	b.n	8004422 <_printf_common+0x62>
 8004498:	2301      	movs	r3, #1
 800449a:	4622      	mov	r2, r4
 800449c:	4639      	mov	r1, r7
 800449e:	4630      	mov	r0, r6
 80044a0:	47c0      	blx	r8
 80044a2:	3001      	adds	r0, #1
 80044a4:	d0e6      	beq.n	8004474 <_printf_common+0xb4>
 80044a6:	f109 0901 	add.w	r9, r9, #1
 80044aa:	e7d7      	b.n	800445c <_printf_common+0x9c>

080044ac <_printf_i>:
 80044ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b0:	4617      	mov	r7, r2
 80044b2:	7e0a      	ldrb	r2, [r1, #24]
 80044b4:	b085      	sub	sp, #20
 80044b6:	2a6e      	cmp	r2, #110	; 0x6e
 80044b8:	4698      	mov	r8, r3
 80044ba:	4606      	mov	r6, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80044c4:	f000 80bc 	beq.w	8004640 <_printf_i+0x194>
 80044c8:	d81a      	bhi.n	8004500 <_printf_i+0x54>
 80044ca:	2a63      	cmp	r2, #99	; 0x63
 80044cc:	d02e      	beq.n	800452c <_printf_i+0x80>
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x3a>
 80044d0:	2a00      	cmp	r2, #0
 80044d2:	f000 80c8 	beq.w	8004666 <_printf_i+0x1ba>
 80044d6:	2a58      	cmp	r2, #88	; 0x58
 80044d8:	f000 808a 	beq.w	80045f0 <_printf_i+0x144>
 80044dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80044e4:	e02a      	b.n	800453c <_printf_i+0x90>
 80044e6:	2a64      	cmp	r2, #100	; 0x64
 80044e8:	d001      	beq.n	80044ee <_printf_i+0x42>
 80044ea:	2a69      	cmp	r2, #105	; 0x69
 80044ec:	d1f6      	bne.n	80044dc <_printf_i+0x30>
 80044ee:	6821      	ldr	r1, [r4, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044f6:	d023      	beq.n	8004540 <_printf_i+0x94>
 80044f8:	1d11      	adds	r1, r2, #4
 80044fa:	6019      	str	r1, [r3, #0]
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	e027      	b.n	8004550 <_printf_i+0xa4>
 8004500:	2a73      	cmp	r2, #115	; 0x73
 8004502:	f000 80b4 	beq.w	800466e <_printf_i+0x1c2>
 8004506:	d808      	bhi.n	800451a <_printf_i+0x6e>
 8004508:	2a6f      	cmp	r2, #111	; 0x6f
 800450a:	d02a      	beq.n	8004562 <_printf_i+0xb6>
 800450c:	2a70      	cmp	r2, #112	; 0x70
 800450e:	d1e5      	bne.n	80044dc <_printf_i+0x30>
 8004510:	680a      	ldr	r2, [r1, #0]
 8004512:	f042 0220 	orr.w	r2, r2, #32
 8004516:	600a      	str	r2, [r1, #0]
 8004518:	e003      	b.n	8004522 <_printf_i+0x76>
 800451a:	2a75      	cmp	r2, #117	; 0x75
 800451c:	d021      	beq.n	8004562 <_printf_i+0xb6>
 800451e:	2a78      	cmp	r2, #120	; 0x78
 8004520:	d1dc      	bne.n	80044dc <_printf_i+0x30>
 8004522:	2278      	movs	r2, #120	; 0x78
 8004524:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004528:	496e      	ldr	r1, [pc, #440]	; (80046e4 <_printf_i+0x238>)
 800452a:	e064      	b.n	80045f6 <_printf_i+0x14a>
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004532:	1d11      	adds	r1, r2, #4
 8004534:	6019      	str	r1, [r3, #0]
 8004536:	6813      	ldr	r3, [r2, #0]
 8004538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800453c:	2301      	movs	r3, #1
 800453e:	e0a3      	b.n	8004688 <_printf_i+0x1dc>
 8004540:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004544:	f102 0104 	add.w	r1, r2, #4
 8004548:	6019      	str	r1, [r3, #0]
 800454a:	d0d7      	beq.n	80044fc <_printf_i+0x50>
 800454c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004550:	2b00      	cmp	r3, #0
 8004552:	da03      	bge.n	800455c <_printf_i+0xb0>
 8004554:	222d      	movs	r2, #45	; 0x2d
 8004556:	425b      	negs	r3, r3
 8004558:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800455c:	4962      	ldr	r1, [pc, #392]	; (80046e8 <_printf_i+0x23c>)
 800455e:	220a      	movs	r2, #10
 8004560:	e017      	b.n	8004592 <_printf_i+0xe6>
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	f010 0f80 	tst.w	r0, #128	; 0x80
 800456a:	d003      	beq.n	8004574 <_printf_i+0xc8>
 800456c:	1d08      	adds	r0, r1, #4
 800456e:	6018      	str	r0, [r3, #0]
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	e006      	b.n	8004582 <_printf_i+0xd6>
 8004574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004578:	f101 0004 	add.w	r0, r1, #4
 800457c:	6018      	str	r0, [r3, #0]
 800457e:	d0f7      	beq.n	8004570 <_printf_i+0xc4>
 8004580:	880b      	ldrh	r3, [r1, #0]
 8004582:	4959      	ldr	r1, [pc, #356]	; (80046e8 <_printf_i+0x23c>)
 8004584:	2a6f      	cmp	r2, #111	; 0x6f
 8004586:	bf14      	ite	ne
 8004588:	220a      	movne	r2, #10
 800458a:	2208      	moveq	r2, #8
 800458c:	2000      	movs	r0, #0
 800458e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004592:	6865      	ldr	r5, [r4, #4]
 8004594:	60a5      	str	r5, [r4, #8]
 8004596:	2d00      	cmp	r5, #0
 8004598:	f2c0 809c 	blt.w	80046d4 <_printf_i+0x228>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	f020 0004 	bic.w	r0, r0, #4
 80045a2:	6020      	str	r0, [r4, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d13f      	bne.n	8004628 <_printf_i+0x17c>
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	f040 8095 	bne.w	80046d8 <_printf_i+0x22c>
 80045ae:	4675      	mov	r5, lr
 80045b0:	2a08      	cmp	r2, #8
 80045b2:	d10b      	bne.n	80045cc <_printf_i+0x120>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07da      	lsls	r2, r3, #31
 80045b8:	d508      	bpl.n	80045cc <_printf_i+0x120>
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	6862      	ldr	r2, [r4, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bfde      	ittt	le
 80045c2:	2330      	movle	r3, #48	; 0x30
 80045c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045cc:	ebae 0305 	sub.w	r3, lr, r5
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	f8cd 8000 	str.w	r8, [sp]
 80045d6:	463b      	mov	r3, r7
 80045d8:	aa03      	add	r2, sp, #12
 80045da:	4621      	mov	r1, r4
 80045dc:	4630      	mov	r0, r6
 80045de:	f7ff feef 	bl	80043c0 <_printf_common>
 80045e2:	3001      	adds	r0, #1
 80045e4:	d155      	bne.n	8004692 <_printf_i+0x1e6>
 80045e6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ea:	b005      	add	sp, #20
 80045ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045f0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80045f4:	493c      	ldr	r1, [pc, #240]	; (80046e8 <_printf_i+0x23c>)
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045fe:	f100 0504 	add.w	r5, r0, #4
 8004602:	601d      	str	r5, [r3, #0]
 8004604:	d001      	beq.n	800460a <_printf_i+0x15e>
 8004606:	6803      	ldr	r3, [r0, #0]
 8004608:	e002      	b.n	8004610 <_printf_i+0x164>
 800460a:	0655      	lsls	r5, r2, #25
 800460c:	d5fb      	bpl.n	8004606 <_printf_i+0x15a>
 800460e:	8803      	ldrh	r3, [r0, #0]
 8004610:	07d0      	lsls	r0, r2, #31
 8004612:	bf44      	itt	mi
 8004614:	f042 0220 	orrmi.w	r2, r2, #32
 8004618:	6022      	strmi	r2, [r4, #0]
 800461a:	b91b      	cbnz	r3, 8004624 <_printf_i+0x178>
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	f022 0220 	bic.w	r2, r2, #32
 8004622:	6022      	str	r2, [r4, #0]
 8004624:	2210      	movs	r2, #16
 8004626:	e7b1      	b.n	800458c <_printf_i+0xe0>
 8004628:	4675      	mov	r5, lr
 800462a:	fbb3 f0f2 	udiv	r0, r3, r2
 800462e:	fb02 3310 	mls	r3, r2, r0, r3
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004638:	4603      	mov	r3, r0
 800463a:	2800      	cmp	r0, #0
 800463c:	d1f5      	bne.n	800462a <_printf_i+0x17e>
 800463e:	e7b7      	b.n	80045b0 <_printf_i+0x104>
 8004640:	6808      	ldr	r0, [r1, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	6949      	ldr	r1, [r1, #20]
 8004646:	f010 0f80 	tst.w	r0, #128	; 0x80
 800464a:	d004      	beq.n	8004656 <_printf_i+0x1aa>
 800464c:	1d10      	adds	r0, r2, #4
 800464e:	6018      	str	r0, [r3, #0]
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	6019      	str	r1, [r3, #0]
 8004654:	e007      	b.n	8004666 <_printf_i+0x1ba>
 8004656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800465a:	f102 0004 	add.w	r0, r2, #4
 800465e:	6018      	str	r0, [r3, #0]
 8004660:	6813      	ldr	r3, [r2, #0]
 8004662:	d0f6      	beq.n	8004652 <_printf_i+0x1a6>
 8004664:	8019      	strh	r1, [r3, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	4675      	mov	r5, lr
 800466c:	e7b1      	b.n	80045d2 <_printf_i+0x126>
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	1d11      	adds	r1, r2, #4
 8004672:	6019      	str	r1, [r3, #0]
 8004674:	6815      	ldr	r5, [r2, #0]
 8004676:	6862      	ldr	r2, [r4, #4]
 8004678:	2100      	movs	r1, #0
 800467a:	4628      	mov	r0, r5
 800467c:	f7fb fdb0 	bl	80001e0 <memchr>
 8004680:	b108      	cbz	r0, 8004686 <_printf_i+0x1da>
 8004682:	1b40      	subs	r0, r0, r5
 8004684:	6060      	str	r0, [r4, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	2300      	movs	r3, #0
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	e79f      	b.n	80045d2 <_printf_i+0x126>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	462a      	mov	r2, r5
 8004696:	4639      	mov	r1, r7
 8004698:	4630      	mov	r0, r6
 800469a:	47c0      	blx	r8
 800469c:	3001      	adds	r0, #1
 800469e:	d0a2      	beq.n	80045e6 <_printf_i+0x13a>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	079b      	lsls	r3, r3, #30
 80046a4:	d507      	bpl.n	80046b6 <_printf_i+0x20a>
 80046a6:	2500      	movs	r5, #0
 80046a8:	f104 0919 	add.w	r9, r4, #25
 80046ac:	68e3      	ldr	r3, [r4, #12]
 80046ae:	9a03      	ldr	r2, [sp, #12]
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	429d      	cmp	r5, r3
 80046b4:	db05      	blt.n	80046c2 <_printf_i+0x216>
 80046b6:	68e0      	ldr	r0, [r4, #12]
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	4298      	cmp	r0, r3
 80046bc:	bfb8      	it	lt
 80046be:	4618      	movlt	r0, r3
 80046c0:	e793      	b.n	80045ea <_printf_i+0x13e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	464a      	mov	r2, r9
 80046c6:	4639      	mov	r1, r7
 80046c8:	4630      	mov	r0, r6
 80046ca:	47c0      	blx	r8
 80046cc:	3001      	adds	r0, #1
 80046ce:	d08a      	beq.n	80045e6 <_printf_i+0x13a>
 80046d0:	3501      	adds	r5, #1
 80046d2:	e7eb      	b.n	80046ac <_printf_i+0x200>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1a7      	bne.n	8004628 <_printf_i+0x17c>
 80046d8:	780b      	ldrb	r3, [r1, #0]
 80046da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e2:	e765      	b.n	80045b0 <_printf_i+0x104>
 80046e4:	0800720b 	.word	0x0800720b
 80046e8:	080071fa 	.word	0x080071fa

080046ec <iprintf>:
 80046ec:	b40f      	push	{r0, r1, r2, r3}
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <iprintf+0x2c>)
 80046f0:	b513      	push	{r0, r1, r4, lr}
 80046f2:	681c      	ldr	r4, [r3, #0]
 80046f4:	b124      	cbz	r4, 8004700 <iprintf+0x14>
 80046f6:	69a3      	ldr	r3, [r4, #24]
 80046f8:	b913      	cbnz	r3, 8004700 <iprintf+0x14>
 80046fa:	4620      	mov	r0, r4
 80046fc:	f001 f880 	bl	8005800 <__sinit>
 8004700:	ab05      	add	r3, sp, #20
 8004702:	9a04      	ldr	r2, [sp, #16]
 8004704:	68a1      	ldr	r1, [r4, #8]
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	4620      	mov	r0, r4
 800470a:	f001 fd3d 	bl	8006188 <_vfiprintf_r>
 800470e:	b002      	add	sp, #8
 8004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004714:	b004      	add	sp, #16
 8004716:	4770      	bx	lr
 8004718:	2000000c 	.word	0x2000000c

0800471c <_puts_r>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	460e      	mov	r6, r1
 8004720:	4605      	mov	r5, r0
 8004722:	b118      	cbz	r0, 800472c <_puts_r+0x10>
 8004724:	6983      	ldr	r3, [r0, #24]
 8004726:	b90b      	cbnz	r3, 800472c <_puts_r+0x10>
 8004728:	f001 f86a 	bl	8005800 <__sinit>
 800472c:	69ab      	ldr	r3, [r5, #24]
 800472e:	68ac      	ldr	r4, [r5, #8]
 8004730:	b913      	cbnz	r3, 8004738 <_puts_r+0x1c>
 8004732:	4628      	mov	r0, r5
 8004734:	f001 f864 	bl	8005800 <__sinit>
 8004738:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <_puts_r+0xac>)
 800473a:	429c      	cmp	r4, r3
 800473c:	d117      	bne.n	800476e <_puts_r+0x52>
 800473e:	686c      	ldr	r4, [r5, #4]
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	071b      	lsls	r3, r3, #28
 8004744:	d51d      	bpl.n	8004782 <_puts_r+0x66>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	b1db      	cbz	r3, 8004782 <_puts_r+0x66>
 800474a:	3e01      	subs	r6, #1
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004752:	3b01      	subs	r3, #1
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	b9e9      	cbnz	r1, 8004794 <_puts_r+0x78>
 8004758:	2b00      	cmp	r3, #0
 800475a:	da2e      	bge.n	80047ba <_puts_r+0x9e>
 800475c:	4622      	mov	r2, r4
 800475e:	210a      	movs	r1, #10
 8004760:	4628      	mov	r0, r5
 8004762:	f000 f83f 	bl	80047e4 <__swbuf_r>
 8004766:	3001      	adds	r0, #1
 8004768:	d011      	beq.n	800478e <_puts_r+0x72>
 800476a:	200a      	movs	r0, #10
 800476c:	bd70      	pop	{r4, r5, r6, pc}
 800476e:	4b17      	ldr	r3, [pc, #92]	; (80047cc <_puts_r+0xb0>)
 8004770:	429c      	cmp	r4, r3
 8004772:	d101      	bne.n	8004778 <_puts_r+0x5c>
 8004774:	68ac      	ldr	r4, [r5, #8]
 8004776:	e7e3      	b.n	8004740 <_puts_r+0x24>
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <_puts_r+0xb4>)
 800477a:	429c      	cmp	r4, r3
 800477c:	bf08      	it	eq
 800477e:	68ec      	ldreq	r4, [r5, #12]
 8004780:	e7de      	b.n	8004740 <_puts_r+0x24>
 8004782:	4621      	mov	r1, r4
 8004784:	4628      	mov	r0, r5
 8004786:	f000 f87f 	bl	8004888 <__swsetup_r>
 800478a:	2800      	cmp	r0, #0
 800478c:	d0dd      	beq.n	800474a <_puts_r+0x2e>
 800478e:	f04f 30ff 	mov.w	r0, #4294967295
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	2b00      	cmp	r3, #0
 8004796:	da04      	bge.n	80047a2 <_puts_r+0x86>
 8004798:	69a2      	ldr	r2, [r4, #24]
 800479a:	4293      	cmp	r3, r2
 800479c:	db06      	blt.n	80047ac <_puts_r+0x90>
 800479e:	290a      	cmp	r1, #10
 80047a0:	d004      	beq.n	80047ac <_puts_r+0x90>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	7019      	strb	r1, [r3, #0]
 80047aa:	e7cf      	b.n	800474c <_puts_r+0x30>
 80047ac:	4622      	mov	r2, r4
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 f818 	bl	80047e4 <__swbuf_r>
 80047b4:	3001      	adds	r0, #1
 80047b6:	d1c9      	bne.n	800474c <_puts_r+0x30>
 80047b8:	e7e9      	b.n	800478e <_puts_r+0x72>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	200a      	movs	r0, #10
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	6022      	str	r2, [r4, #0]
 80047c2:	7018      	strb	r0, [r3, #0]
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	bf00      	nop
 80047c8:	0800724c 	.word	0x0800724c
 80047cc:	0800726c 	.word	0x0800726c
 80047d0:	0800722c 	.word	0x0800722c

080047d4 <puts>:
 80047d4:	4b02      	ldr	r3, [pc, #8]	; (80047e0 <puts+0xc>)
 80047d6:	4601      	mov	r1, r0
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	f7ff bf9f 	b.w	800471c <_puts_r>
 80047de:	bf00      	nop
 80047e0:	2000000c 	.word	0x2000000c

080047e4 <__swbuf_r>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	460e      	mov	r6, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	4605      	mov	r5, r0
 80047ec:	b118      	cbz	r0, 80047f6 <__swbuf_r+0x12>
 80047ee:	6983      	ldr	r3, [r0, #24]
 80047f0:	b90b      	cbnz	r3, 80047f6 <__swbuf_r+0x12>
 80047f2:	f001 f805 	bl	8005800 <__sinit>
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <__swbuf_r+0x98>)
 80047f8:	429c      	cmp	r4, r3
 80047fa:	d12a      	bne.n	8004852 <__swbuf_r+0x6e>
 80047fc:	686c      	ldr	r4, [r5, #4]
 80047fe:	69a3      	ldr	r3, [r4, #24]
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	071a      	lsls	r2, r3, #28
 8004806:	d52e      	bpl.n	8004866 <__swbuf_r+0x82>
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	b363      	cbz	r3, 8004866 <__swbuf_r+0x82>
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	1ac0      	subs	r0, r0, r3
 8004812:	6963      	ldr	r3, [r4, #20]
 8004814:	b2f6      	uxtb	r6, r6
 8004816:	4298      	cmp	r0, r3
 8004818:	4637      	mov	r7, r6
 800481a:	db04      	blt.n	8004826 <__swbuf_r+0x42>
 800481c:	4621      	mov	r1, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f000 ff84 	bl	800572c <_fflush_r>
 8004824:	bb28      	cbnz	r0, 8004872 <__swbuf_r+0x8e>
 8004826:	68a3      	ldr	r3, [r4, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	60a3      	str	r3, [r4, #8]
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	701e      	strb	r6, [r3, #0]
 8004834:	6963      	ldr	r3, [r4, #20]
 8004836:	3001      	adds	r0, #1
 8004838:	4298      	cmp	r0, r3
 800483a:	d004      	beq.n	8004846 <__swbuf_r+0x62>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	07db      	lsls	r3, r3, #31
 8004840:	d519      	bpl.n	8004876 <__swbuf_r+0x92>
 8004842:	2e0a      	cmp	r6, #10
 8004844:	d117      	bne.n	8004876 <__swbuf_r+0x92>
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 ff6f 	bl	800572c <_fflush_r>
 800484e:	b190      	cbz	r0, 8004876 <__swbuf_r+0x92>
 8004850:	e00f      	b.n	8004872 <__swbuf_r+0x8e>
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <__swbuf_r+0x9c>)
 8004854:	429c      	cmp	r4, r3
 8004856:	d101      	bne.n	800485c <__swbuf_r+0x78>
 8004858:	68ac      	ldr	r4, [r5, #8]
 800485a:	e7d0      	b.n	80047fe <__swbuf_r+0x1a>
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <__swbuf_r+0xa0>)
 800485e:	429c      	cmp	r4, r3
 8004860:	bf08      	it	eq
 8004862:	68ec      	ldreq	r4, [r5, #12]
 8004864:	e7cb      	b.n	80047fe <__swbuf_r+0x1a>
 8004866:	4621      	mov	r1, r4
 8004868:	4628      	mov	r0, r5
 800486a:	f000 f80d 	bl	8004888 <__swsetup_r>
 800486e:	2800      	cmp	r0, #0
 8004870:	d0cc      	beq.n	800480c <__swbuf_r+0x28>
 8004872:	f04f 37ff 	mov.w	r7, #4294967295
 8004876:	4638      	mov	r0, r7
 8004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487a:	bf00      	nop
 800487c:	0800724c 	.word	0x0800724c
 8004880:	0800726c 	.word	0x0800726c
 8004884:	0800722c 	.word	0x0800722c

08004888 <__swsetup_r>:
 8004888:	4b32      	ldr	r3, [pc, #200]	; (8004954 <__swsetup_r+0xcc>)
 800488a:	b570      	push	{r4, r5, r6, lr}
 800488c:	681d      	ldr	r5, [r3, #0]
 800488e:	4606      	mov	r6, r0
 8004890:	460c      	mov	r4, r1
 8004892:	b125      	cbz	r5, 800489e <__swsetup_r+0x16>
 8004894:	69ab      	ldr	r3, [r5, #24]
 8004896:	b913      	cbnz	r3, 800489e <__swsetup_r+0x16>
 8004898:	4628      	mov	r0, r5
 800489a:	f000 ffb1 	bl	8005800 <__sinit>
 800489e:	4b2e      	ldr	r3, [pc, #184]	; (8004958 <__swsetup_r+0xd0>)
 80048a0:	429c      	cmp	r4, r3
 80048a2:	d10f      	bne.n	80048c4 <__swsetup_r+0x3c>
 80048a4:	686c      	ldr	r4, [r5, #4]
 80048a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	0715      	lsls	r5, r2, #28
 80048ae:	d42c      	bmi.n	800490a <__swsetup_r+0x82>
 80048b0:	06d0      	lsls	r0, r2, #27
 80048b2:	d411      	bmi.n	80048d8 <__swsetup_r+0x50>
 80048b4:	2209      	movs	r2, #9
 80048b6:	6032      	str	r2, [r6, #0]
 80048b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	f04f 30ff 	mov.w	r0, #4294967295
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <__swsetup_r+0xd4>)
 80048c6:	429c      	cmp	r4, r3
 80048c8:	d101      	bne.n	80048ce <__swsetup_r+0x46>
 80048ca:	68ac      	ldr	r4, [r5, #8]
 80048cc:	e7eb      	b.n	80048a6 <__swsetup_r+0x1e>
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <__swsetup_r+0xd8>)
 80048d0:	429c      	cmp	r4, r3
 80048d2:	bf08      	it	eq
 80048d4:	68ec      	ldreq	r4, [r5, #12]
 80048d6:	e7e6      	b.n	80048a6 <__swsetup_r+0x1e>
 80048d8:	0751      	lsls	r1, r2, #29
 80048da:	d512      	bpl.n	8004902 <__swsetup_r+0x7a>
 80048dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048de:	b141      	cbz	r1, 80048f2 <__swsetup_r+0x6a>
 80048e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e4:	4299      	cmp	r1, r3
 80048e6:	d002      	beq.n	80048ee <__swsetup_r+0x66>
 80048e8:	4630      	mov	r0, r6
 80048ea:	f001 fb77 	bl	8005fdc <_free_r>
 80048ee:	2300      	movs	r3, #0
 80048f0:	6363      	str	r3, [r4, #52]	; 0x34
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	2300      	movs	r3, #0
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	f043 0308 	orr.w	r3, r3, #8
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	b94b      	cbnz	r3, 8004922 <__swsetup_r+0x9a>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004918:	d003      	beq.n	8004922 <__swsetup_r+0x9a>
 800491a:	4621      	mov	r1, r4
 800491c:	4630      	mov	r0, r6
 800491e:	f001 f82b 	bl	8005978 <__smakebuf_r>
 8004922:	89a2      	ldrh	r2, [r4, #12]
 8004924:	f012 0301 	ands.w	r3, r2, #1
 8004928:	d00c      	beq.n	8004944 <__swsetup_r+0xbc>
 800492a:	2300      	movs	r3, #0
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	6963      	ldr	r3, [r4, #20]
 8004930:	425b      	negs	r3, r3
 8004932:	61a3      	str	r3, [r4, #24]
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	b953      	cbnz	r3, 800494e <__swsetup_r+0xc6>
 8004938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800493c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004940:	d1ba      	bne.n	80048b8 <__swsetup_r+0x30>
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	0792      	lsls	r2, r2, #30
 8004946:	bf58      	it	pl
 8004948:	6963      	ldrpl	r3, [r4, #20]
 800494a:	60a3      	str	r3, [r4, #8]
 800494c:	e7f2      	b.n	8004934 <__swsetup_r+0xac>
 800494e:	2000      	movs	r0, #0
 8004950:	e7f7      	b.n	8004942 <__swsetup_r+0xba>
 8004952:	bf00      	nop
 8004954:	2000000c 	.word	0x2000000c
 8004958:	0800724c 	.word	0x0800724c
 800495c:	0800726c 	.word	0x0800726c
 8004960:	0800722c 	.word	0x0800722c

08004964 <quorem>:
 8004964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004968:	6903      	ldr	r3, [r0, #16]
 800496a:	690c      	ldr	r4, [r1, #16]
 800496c:	429c      	cmp	r4, r3
 800496e:	4680      	mov	r8, r0
 8004970:	f300 8082 	bgt.w	8004a78 <quorem+0x114>
 8004974:	3c01      	subs	r4, #1
 8004976:	f101 0714 	add.w	r7, r1, #20
 800497a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800497e:	f100 0614 	add.w	r6, r0, #20
 8004982:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004986:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800498a:	eb06 030e 	add.w	r3, r6, lr
 800498e:	3501      	adds	r5, #1
 8004990:	eb07 090e 	add.w	r9, r7, lr
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	fbb0 f5f5 	udiv	r5, r0, r5
 800499a:	b395      	cbz	r5, 8004a02 <quorem+0x9e>
 800499c:	f04f 0a00 	mov.w	sl, #0
 80049a0:	4638      	mov	r0, r7
 80049a2:	46b4      	mov	ip, r6
 80049a4:	46d3      	mov	fp, sl
 80049a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80049aa:	b293      	uxth	r3, r2
 80049ac:	fb05 a303 	mla	r3, r5, r3, sl
 80049b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	ebab 0303 	sub.w	r3, fp, r3
 80049ba:	0c12      	lsrs	r2, r2, #16
 80049bc:	f8bc b000 	ldrh.w	fp, [ip]
 80049c0:	fb05 a202 	mla	r2, r5, r2, sl
 80049c4:	fa13 f38b 	uxtah	r3, r3, fp
 80049c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80049cc:	fa1f fb82 	uxth.w	fp, r2
 80049d0:	f8dc 2000 	ldr.w	r2, [ip]
 80049d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80049d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049dc:	b29b      	uxth	r3, r3
 80049de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049e2:	4581      	cmp	r9, r0
 80049e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80049e8:	f84c 3b04 	str.w	r3, [ip], #4
 80049ec:	d2db      	bcs.n	80049a6 <quorem+0x42>
 80049ee:	f856 300e 	ldr.w	r3, [r6, lr]
 80049f2:	b933      	cbnz	r3, 8004a02 <quorem+0x9e>
 80049f4:	9b01      	ldr	r3, [sp, #4]
 80049f6:	3b04      	subs	r3, #4
 80049f8:	429e      	cmp	r6, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	d330      	bcc.n	8004a60 <quorem+0xfc>
 80049fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a02:	4640      	mov	r0, r8
 8004a04:	f001 fa15 	bl	8005e32 <__mcmp>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	db25      	blt.n	8004a58 <quorem+0xf4>
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f04f 0e00 	mov.w	lr, #0
 8004a14:	f857 2b04 	ldr.w	r2, [r7], #4
 8004a18:	f8d0 c000 	ldr.w	ip, [r0]
 8004a1c:	b293      	uxth	r3, r2
 8004a1e:	ebae 0303 	sub.w	r3, lr, r3
 8004a22:	0c12      	lsrs	r2, r2, #16
 8004a24:	fa13 f38c 	uxtah	r3, r3, ip
 8004a28:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a36:	45b9      	cmp	r9, r7
 8004a38:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004a3c:	f840 3b04 	str.w	r3, [r0], #4
 8004a40:	d2e8      	bcs.n	8004a14 <quorem+0xb0>
 8004a42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a4a:	b92a      	cbnz	r2, 8004a58 <quorem+0xf4>
 8004a4c:	3b04      	subs	r3, #4
 8004a4e:	429e      	cmp	r6, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	d30b      	bcc.n	8004a6c <quorem+0x108>
 8004a54:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a58:	4628      	mov	r0, r5
 8004a5a:	b003      	add	sp, #12
 8004a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	3b04      	subs	r3, #4
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	d1ca      	bne.n	80049fe <quorem+0x9a>
 8004a68:	3c01      	subs	r4, #1
 8004a6a:	e7c5      	b.n	80049f8 <quorem+0x94>
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	3b04      	subs	r3, #4
 8004a70:	2a00      	cmp	r2, #0
 8004a72:	d1ef      	bne.n	8004a54 <quorem+0xf0>
 8004a74:	3c01      	subs	r4, #1
 8004a76:	e7ea      	b.n	8004a4e <quorem+0xea>
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e7ee      	b.n	8004a5a <quorem+0xf6>
 8004a7c:	0000      	movs	r0, r0
	...

08004a80 <_dtoa_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	ec57 6b10 	vmov	r6, r7, d0
 8004a88:	b097      	sub	sp, #92	; 0x5c
 8004a8a:	e9cd 6700 	strd	r6, r7, [sp]
 8004a8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a90:	9107      	str	r1, [sp, #28]
 8004a92:	4604      	mov	r4, r0
 8004a94:	920a      	str	r2, [sp, #40]	; 0x28
 8004a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a98:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004a9a:	b93e      	cbnz	r6, 8004aac <_dtoa_r+0x2c>
 8004a9c:	2010      	movs	r0, #16
 8004a9e:	f000 ffab 	bl	80059f8 <malloc>
 8004aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8004aa4:	6046      	str	r6, [r0, #4]
 8004aa6:	6086      	str	r6, [r0, #8]
 8004aa8:	6006      	str	r6, [r0, #0]
 8004aaa:	60c6      	str	r6, [r0, #12]
 8004aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	b151      	cbz	r1, 8004ac8 <_dtoa_r+0x48>
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	604a      	str	r2, [r1, #4]
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4093      	lsls	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 ffe2 	bl	8005a86 <_Bfree>
 8004ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	9b01      	ldr	r3, [sp, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfbf      	itttt	lt
 8004ace:	2301      	movlt	r3, #1
 8004ad0:	602b      	strlt	r3, [r5, #0]
 8004ad2:	9b01      	ldrlt	r3, [sp, #4]
 8004ad4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ad8:	bfb2      	itee	lt
 8004ada:	9301      	strlt	r3, [sp, #4]
 8004adc:	2300      	movge	r3, #0
 8004ade:	602b      	strge	r3, [r5, #0]
 8004ae0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ae4:	4ba8      	ldr	r3, [pc, #672]	; (8004d88 <_dtoa_r+0x308>)
 8004ae6:	ea33 0308 	bics.w	r3, r3, r8
 8004aea:	d11b      	bne.n	8004b24 <_dtoa_r+0xa4>
 8004aec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004aee:	f242 730f 	movw	r3, #9999	; 0x270f
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	9b00      	ldr	r3, [sp, #0]
 8004af6:	b923      	cbnz	r3, 8004b02 <_dtoa_r+0x82>
 8004af8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004afc:	2800      	cmp	r0, #0
 8004afe:	f000 8578 	beq.w	80055f2 <_dtoa_r+0xb72>
 8004b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b04:	b953      	cbnz	r3, 8004b1c <_dtoa_r+0x9c>
 8004b06:	4ba1      	ldr	r3, [pc, #644]	; (8004d8c <_dtoa_r+0x30c>)
 8004b08:	e021      	b.n	8004b4e <_dtoa_r+0xce>
 8004b0a:	4ba1      	ldr	r3, [pc, #644]	; (8004d90 <_dtoa_r+0x310>)
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	9802      	ldr	r0, [sp, #8]
 8004b16:	b017      	add	sp, #92	; 0x5c
 8004b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1c:	4b9b      	ldr	r3, [pc, #620]	; (8004d8c <_dtoa_r+0x30c>)
 8004b1e:	9302      	str	r3, [sp, #8]
 8004b20:	3303      	adds	r3, #3
 8004b22:	e7f5      	b.n	8004b10 <_dtoa_r+0x90>
 8004b24:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	4639      	mov	r1, r7
 8004b30:	f7fb ffc6 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b34:	4681      	mov	r9, r0
 8004b36:	b160      	cbz	r0, 8004b52 <_dtoa_r+0xd2>
 8004b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8553 	beq.w	80055ec <_dtoa_r+0xb6c>
 8004b46:	4b93      	ldr	r3, [pc, #588]	; (8004d94 <_dtoa_r+0x314>)
 8004b48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	e7e0      	b.n	8004b14 <_dtoa_r+0x94>
 8004b52:	aa14      	add	r2, sp, #80	; 0x50
 8004b54:	a915      	add	r1, sp, #84	; 0x54
 8004b56:	ec47 6b10 	vmov	d0, r6, r7
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f001 f9e1 	bl	8005f22 <__d2b>
 8004b60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004b64:	4682      	mov	sl, r0
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	d07e      	beq.n	8004c68 <_dtoa_r+0x1e8>
 8004b6a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b72:	4630      	mov	r0, r6
 8004b74:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b7c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004b80:	2200      	movs	r2, #0
 8004b82:	4b85      	ldr	r3, [pc, #532]	; (8004d98 <_dtoa_r+0x318>)
 8004b84:	f7fb fb80 	bl	8000288 <__aeabi_dsub>
 8004b88:	a379      	add	r3, pc, #484	; (adr r3, 8004d70 <_dtoa_r+0x2f0>)
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f7fb fd2f 	bl	80005f0 <__aeabi_dmul>
 8004b92:	a379      	add	r3, pc, #484	; (adr r3, 8004d78 <_dtoa_r+0x2f8>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fb78 	bl	800028c <__adddf3>
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	460f      	mov	r7, r1
 8004ba2:	f7fb fcbf 	bl	8000524 <__aeabi_i2d>
 8004ba6:	a376      	add	r3, pc, #472	; (adr r3, 8004d80 <_dtoa_r+0x300>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f7fb fd20 	bl	80005f0 <__aeabi_dmul>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	f7fb fb68 	bl	800028c <__adddf3>
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	460f      	mov	r7, r1
 8004bc0:	f7fb ffc6 	bl	8000b50 <__aeabi_d2iz>
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4683      	mov	fp, r0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4630      	mov	r0, r6
 8004bcc:	4639      	mov	r1, r7
 8004bce:	f7fb ff81 	bl	8000ad4 <__aeabi_dcmplt>
 8004bd2:	b158      	cbz	r0, 8004bec <_dtoa_r+0x16c>
 8004bd4:	4658      	mov	r0, fp
 8004bd6:	f7fb fca5 	bl	8000524 <__aeabi_i2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4630      	mov	r0, r6
 8004be0:	4639      	mov	r1, r7
 8004be2:	f7fb ff6d 	bl	8000ac0 <__aeabi_dcmpeq>
 8004be6:	b908      	cbnz	r0, 8004bec <_dtoa_r+0x16c>
 8004be8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004bec:	f1bb 0f16 	cmp.w	fp, #22
 8004bf0:	d859      	bhi.n	8004ca6 <_dtoa_r+0x226>
 8004bf2:	496a      	ldr	r1, [pc, #424]	; (8004d9c <_dtoa_r+0x31c>)
 8004bf4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c00:	f7fb ff86 	bl	8000b10 <__aeabi_dcmpgt>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d050      	beq.n	8004caa <_dtoa_r+0x22a>
 8004c08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8004c10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c12:	1b5d      	subs	r5, r3, r5
 8004c14:	1e6b      	subs	r3, r5, #1
 8004c16:	9306      	str	r3, [sp, #24]
 8004c18:	bf45      	ittet	mi
 8004c1a:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c1e:	9305      	strmi	r3, [sp, #20]
 8004c20:	2300      	movpl	r3, #0
 8004c22:	2300      	movmi	r3, #0
 8004c24:	bf4c      	ite	mi
 8004c26:	9306      	strmi	r3, [sp, #24]
 8004c28:	9305      	strpl	r3, [sp, #20]
 8004c2a:	f1bb 0f00 	cmp.w	fp, #0
 8004c2e:	db3e      	blt.n	8004cae <_dtoa_r+0x22e>
 8004c30:	9b06      	ldr	r3, [sp, #24]
 8004c32:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004c36:	445b      	add	r3, fp
 8004c38:	9306      	str	r3, [sp, #24]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9308      	str	r3, [sp, #32]
 8004c3e:	9b07      	ldr	r3, [sp, #28]
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	f200 80af 	bhi.w	8004da4 <_dtoa_r+0x324>
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	bfc4      	itt	gt
 8004c4a:	3b04      	subgt	r3, #4
 8004c4c:	9307      	strgt	r3, [sp, #28]
 8004c4e:	9b07      	ldr	r3, [sp, #28]
 8004c50:	f1a3 0302 	sub.w	r3, r3, #2
 8004c54:	bfcc      	ite	gt
 8004c56:	2600      	movgt	r6, #0
 8004c58:	2601      	movle	r6, #1
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	f200 80ae 	bhi.w	8004dbc <_dtoa_r+0x33c>
 8004c60:	e8df f003 	tbb	[pc, r3]
 8004c64:	772f8482 	.word	0x772f8482
 8004c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c6a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004c6c:	441d      	add	r5, r3
 8004c6e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	dd11      	ble.n	8004c9a <_dtoa_r+0x21a>
 8004c76:	9a00      	ldr	r2, [sp, #0]
 8004c78:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004c7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004c80:	fa22 f000 	lsr.w	r0, r2, r0
 8004c84:	fa08 f303 	lsl.w	r3, r8, r3
 8004c88:	4318      	orrs	r0, r3
 8004c8a:	f7fb fc3b 	bl	8000504 <__aeabi_ui2d>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004c94:	3d01      	subs	r5, #1
 8004c96:	9312      	str	r3, [sp, #72]	; 0x48
 8004c98:	e772      	b.n	8004b80 <_dtoa_r+0x100>
 8004c9a:	f1c3 0020 	rsb	r0, r3, #32
 8004c9e:	9b00      	ldr	r3, [sp, #0]
 8004ca0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ca4:	e7f1      	b.n	8004c8a <_dtoa_r+0x20a>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e7b1      	b.n	8004c0e <_dtoa_r+0x18e>
 8004caa:	900e      	str	r0, [sp, #56]	; 0x38
 8004cac:	e7b0      	b.n	8004c10 <_dtoa_r+0x190>
 8004cae:	9b05      	ldr	r3, [sp, #20]
 8004cb0:	eba3 030b 	sub.w	r3, r3, fp
 8004cb4:	9305      	str	r3, [sp, #20]
 8004cb6:	f1cb 0300 	rsb	r3, fp, #0
 8004cba:	9308      	str	r3, [sp, #32]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cc0:	e7bd      	b.n	8004c3e <_dtoa_r+0x1be>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dd7a      	ble.n	8004dc2 <_dtoa_r+0x342>
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	9303      	str	r3, [sp, #12]
 8004cd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	606a      	str	r2, [r5, #4]
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	f101 0214 	add.w	r2, r1, #20
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d975      	bls.n	8004dcc <_dtoa_r+0x34c>
 8004ce0:	6869      	ldr	r1, [r5, #4]
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 fe9b 	bl	8005a1e <_Balloc>
 8004ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cea:	6028      	str	r0, [r5, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	9302      	str	r3, [sp, #8]
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	2b0e      	cmp	r3, #14
 8004cf4:	f200 80e5 	bhi.w	8004ec2 <_dtoa_r+0x442>
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	f000 80e2 	beq.w	8004ec2 <_dtoa_r+0x442>
 8004cfe:	ed9d 7b00 	vldr	d7, [sp]
 8004d02:	f1bb 0f00 	cmp.w	fp, #0
 8004d06:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004d0a:	dd74      	ble.n	8004df6 <_dtoa_r+0x376>
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <_dtoa_r+0x31c>)
 8004d0e:	f00b 030f 	and.w	r3, fp, #15
 8004d12:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004d16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d1a:	06f0      	lsls	r0, r6, #27
 8004d1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d20:	d559      	bpl.n	8004dd6 <_dtoa_r+0x356>
 8004d22:	4b1f      	ldr	r3, [pc, #124]	; (8004da0 <_dtoa_r+0x320>)
 8004d24:	ec51 0b17 	vmov	r0, r1, d7
 8004d28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d2c:	f7fb fd8a 	bl	8000844 <__aeabi_ddiv>
 8004d30:	e9cd 0100 	strd	r0, r1, [sp]
 8004d34:	f006 060f 	and.w	r6, r6, #15
 8004d38:	2503      	movs	r5, #3
 8004d3a:	4f19      	ldr	r7, [pc, #100]	; (8004da0 <_dtoa_r+0x320>)
 8004d3c:	2e00      	cmp	r6, #0
 8004d3e:	d14c      	bne.n	8004dda <_dtoa_r+0x35a>
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d48:	f7fb fd7c 	bl	8000844 <__aeabi_ddiv>
 8004d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8004d50:	e06a      	b.n	8004e28 <_dtoa_r+0x3a8>
 8004d52:	2301      	movs	r3, #1
 8004d54:	9309      	str	r3, [sp, #36]	; 0x24
 8004d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d58:	445b      	add	r3, fp
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	bfb8      	it	lt
 8004d64:	2301      	movlt	r3, #1
 8004d66:	e7b3      	b.n	8004cd0 <_dtoa_r+0x250>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e7ab      	b.n	8004cc4 <_dtoa_r+0x244>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e7f1      	b.n	8004d54 <_dtoa_r+0x2d4>
 8004d70:	636f4361 	.word	0x636f4361
 8004d74:	3fd287a7 	.word	0x3fd287a7
 8004d78:	8b60c8b3 	.word	0x8b60c8b3
 8004d7c:	3fc68a28 	.word	0x3fc68a28
 8004d80:	509f79fb 	.word	0x509f79fb
 8004d84:	3fd34413 	.word	0x3fd34413
 8004d88:	7ff00000 	.word	0x7ff00000
 8004d8c:	08007225 	.word	0x08007225
 8004d90:	0800721c 	.word	0x0800721c
 8004d94:	080071f9 	.word	0x080071f9
 8004d98:	3ff80000 	.word	0x3ff80000
 8004d9c:	080072b8 	.word	0x080072b8
 8004da0:	08007290 	.word	0x08007290
 8004da4:	2601      	movs	r6, #1
 8004da6:	2300      	movs	r3, #0
 8004da8:	9307      	str	r3, [sp, #28]
 8004daa:	9609      	str	r6, [sp, #36]	; 0x24
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	9304      	str	r3, [sp, #16]
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2312      	movs	r3, #18
 8004db8:	920a      	str	r2, [sp, #40]	; 0x28
 8004dba:	e789      	b.n	8004cd0 <_dtoa_r+0x250>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc0:	e7f4      	b.n	8004dac <_dtoa_r+0x32c>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	e7f5      	b.n	8004db8 <_dtoa_r+0x338>
 8004dcc:	686a      	ldr	r2, [r5, #4]
 8004dce:	3201      	adds	r2, #1
 8004dd0:	606a      	str	r2, [r5, #4]
 8004dd2:	0049      	lsls	r1, r1, #1
 8004dd4:	e780      	b.n	8004cd8 <_dtoa_r+0x258>
 8004dd6:	2502      	movs	r5, #2
 8004dd8:	e7af      	b.n	8004d3a <_dtoa_r+0x2ba>
 8004dda:	07f1      	lsls	r1, r6, #31
 8004ddc:	d508      	bpl.n	8004df0 <_dtoa_r+0x370>
 8004dde:	4640      	mov	r0, r8
 8004de0:	4649      	mov	r1, r9
 8004de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de6:	f7fb fc03 	bl	80005f0 <__aeabi_dmul>
 8004dea:	3501      	adds	r5, #1
 8004dec:	4680      	mov	r8, r0
 8004dee:	4689      	mov	r9, r1
 8004df0:	1076      	asrs	r6, r6, #1
 8004df2:	3708      	adds	r7, #8
 8004df4:	e7a2      	b.n	8004d3c <_dtoa_r+0x2bc>
 8004df6:	f000 809d 	beq.w	8004f34 <_dtoa_r+0x4b4>
 8004dfa:	f1cb 0600 	rsb	r6, fp, #0
 8004dfe:	4b9f      	ldr	r3, [pc, #636]	; (800507c <_dtoa_r+0x5fc>)
 8004e00:	4f9f      	ldr	r7, [pc, #636]	; (8005080 <_dtoa_r+0x600>)
 8004e02:	f006 020f 	and.w	r2, r6, #15
 8004e06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e12:	f7fb fbed 	bl	80005f0 <__aeabi_dmul>
 8004e16:	e9cd 0100 	strd	r0, r1, [sp]
 8004e1a:	1136      	asrs	r6, r6, #4
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2502      	movs	r5, #2
 8004e20:	2e00      	cmp	r6, #0
 8004e22:	d17c      	bne.n	8004f1e <_dtoa_r+0x49e>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d191      	bne.n	8004d4c <_dtoa_r+0x2cc>
 8004e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8084 	beq.w	8004f38 <_dtoa_r+0x4b8>
 8004e30:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004e34:	2200      	movs	r2, #0
 8004e36:	4b93      	ldr	r3, [pc, #588]	; (8005084 <_dtoa_r+0x604>)
 8004e38:	4640      	mov	r0, r8
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	f7fb fe4a 	bl	8000ad4 <__aeabi_dcmplt>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d079      	beq.n	8004f38 <_dtoa_r+0x4b8>
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d076      	beq.n	8004f38 <_dtoa_r+0x4b8>
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dd34      	ble.n	8004eba <_dtoa_r+0x43a>
 8004e50:	2200      	movs	r2, #0
 8004e52:	4b8d      	ldr	r3, [pc, #564]	; (8005088 <_dtoa_r+0x608>)
 8004e54:	4640      	mov	r0, r8
 8004e56:	4649      	mov	r1, r9
 8004e58:	f7fb fbca 	bl	80005f0 <__aeabi_dmul>
 8004e5c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e60:	9e04      	ldr	r6, [sp, #16]
 8004e62:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004e66:	3501      	adds	r5, #1
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f7fb fb5b 	bl	8000524 <__aeabi_i2d>
 8004e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e72:	f7fb fbbd 	bl	80005f0 <__aeabi_dmul>
 8004e76:	2200      	movs	r2, #0
 8004e78:	4b84      	ldr	r3, [pc, #528]	; (800508c <_dtoa_r+0x60c>)
 8004e7a:	f7fb fa07 	bl	800028c <__adddf3>
 8004e7e:	4680      	mov	r8, r0
 8004e80:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004e84:	2e00      	cmp	r6, #0
 8004e86:	d15a      	bne.n	8004f3e <_dtoa_r+0x4be>
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4b81      	ldr	r3, [pc, #516]	; (8005090 <_dtoa_r+0x610>)
 8004e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e90:	f7fb f9fa 	bl	8000288 <__aeabi_dsub>
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	e9cd 0100 	strd	r0, r1, [sp]
 8004e9c:	f7fb fe38 	bl	8000b10 <__aeabi_dcmpgt>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f040 829b 	bne.w	80053dc <_dtoa_r+0x95c>
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eb0:	f7fb fe10 	bl	8000ad4 <__aeabi_dcmplt>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f040 828f 	bne.w	80053d8 <_dtoa_r+0x958>
 8004eba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ebe:	e9cd 2300 	strd	r2, r3, [sp]
 8004ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f2c0 8150 	blt.w	800516a <_dtoa_r+0x6ea>
 8004eca:	f1bb 0f0e 	cmp.w	fp, #14
 8004ece:	f300 814c 	bgt.w	800516a <_dtoa_r+0x6ea>
 8004ed2:	4b6a      	ldr	r3, [pc, #424]	; (800507c <_dtoa_r+0x5fc>)
 8004ed4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f280 80da 	bge.w	8005098 <_dtoa_r+0x618>
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f300 80d6 	bgt.w	8005098 <_dtoa_r+0x618>
 8004eec:	f040 8273 	bne.w	80053d6 <_dtoa_r+0x956>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4b67      	ldr	r3, [pc, #412]	; (8005090 <_dtoa_r+0x610>)
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	f7fb fb7a 	bl	80005f0 <__aeabi_dmul>
 8004efc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f00:	f7fb fdfc 	bl	8000afc <__aeabi_dcmpge>
 8004f04:	9e03      	ldr	r6, [sp, #12]
 8004f06:	4637      	mov	r7, r6
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f040 824a 	bne.w	80053a2 <_dtoa_r+0x922>
 8004f0e:	9b02      	ldr	r3, [sp, #8]
 8004f10:	9a02      	ldr	r2, [sp, #8]
 8004f12:	1c5d      	adds	r5, r3, #1
 8004f14:	2331      	movs	r3, #49	; 0x31
 8004f16:	7013      	strb	r3, [r2, #0]
 8004f18:	f10b 0b01 	add.w	fp, fp, #1
 8004f1c:	e245      	b.n	80053aa <_dtoa_r+0x92a>
 8004f1e:	07f2      	lsls	r2, r6, #31
 8004f20:	d505      	bpl.n	8004f2e <_dtoa_r+0x4ae>
 8004f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f26:	f7fb fb63 	bl	80005f0 <__aeabi_dmul>
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	1076      	asrs	r6, r6, #1
 8004f30:	3708      	adds	r7, #8
 8004f32:	e775      	b.n	8004e20 <_dtoa_r+0x3a0>
 8004f34:	2502      	movs	r5, #2
 8004f36:	e777      	b.n	8004e28 <_dtoa_r+0x3a8>
 8004f38:	465f      	mov	r7, fp
 8004f3a:	9e03      	ldr	r6, [sp, #12]
 8004f3c:	e794      	b.n	8004e68 <_dtoa_r+0x3e8>
 8004f3e:	9a02      	ldr	r2, [sp, #8]
 8004f40:	4b4e      	ldr	r3, [pc, #312]	; (800507c <_dtoa_r+0x5fc>)
 8004f42:	4432      	add	r2, r6
 8004f44:	9213      	str	r2, [sp, #76]	; 0x4c
 8004f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f48:	1e71      	subs	r1, r6, #1
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	d048      	beq.n	8004fe0 <_dtoa_r+0x560>
 8004f4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	2000      	movs	r0, #0
 8004f58:	494e      	ldr	r1, [pc, #312]	; (8005094 <_dtoa_r+0x614>)
 8004f5a:	f7fb fc73 	bl	8000844 <__aeabi_ddiv>
 8004f5e:	4642      	mov	r2, r8
 8004f60:	464b      	mov	r3, r9
 8004f62:	f7fb f991 	bl	8000288 <__aeabi_dsub>
 8004f66:	9d02      	ldr	r5, [sp, #8]
 8004f68:	4680      	mov	r8, r0
 8004f6a:	4689      	mov	r9, r1
 8004f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f70:	f7fb fdee 	bl	8000b50 <__aeabi_d2iz>
 8004f74:	4606      	mov	r6, r0
 8004f76:	f7fb fad5 	bl	8000524 <__aeabi_i2d>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f82:	f7fb f981 	bl	8000288 <__aeabi_dsub>
 8004f86:	3630      	adds	r6, #48	; 0x30
 8004f88:	f805 6b01 	strb.w	r6, [r5], #1
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	e9cd 0100 	strd	r0, r1, [sp]
 8004f94:	f7fb fd9e 	bl	8000ad4 <__aeabi_dcmplt>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d165      	bne.n	8005068 <_dtoa_r+0x5e8>
 8004f9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	4938      	ldr	r1, [pc, #224]	; (8005084 <_dtoa_r+0x604>)
 8004fa4:	f7fb f970 	bl	8000288 <__aeabi_dsub>
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	f7fb fd92 	bl	8000ad4 <__aeabi_dcmplt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 80ba 	bne.w	800512a <_dtoa_r+0x6aa>
 8004fb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fb8:	429d      	cmp	r5, r3
 8004fba:	f43f af7e 	beq.w	8004eba <_dtoa_r+0x43a>
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4b31      	ldr	r3, [pc, #196]	; (8005088 <_dtoa_r+0x608>)
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	f7fb fb13 	bl	80005f0 <__aeabi_dmul>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4680      	mov	r8, r0
 8004fce:	4689      	mov	r9, r1
 8004fd0:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <_dtoa_r+0x608>)
 8004fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fd6:	f7fb fb0b 	bl	80005f0 <__aeabi_dmul>
 8004fda:	e9cd 0100 	strd	r0, r1, [sp]
 8004fde:	e7c5      	b.n	8004f6c <_dtoa_r+0x4ec>
 8004fe0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fec:	f7fb fb00 	bl	80005f0 <__aeabi_dmul>
 8004ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ff4:	9d02      	ldr	r5, [sp, #8]
 8004ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ffa:	f7fb fda9 	bl	8000b50 <__aeabi_d2iz>
 8004ffe:	4606      	mov	r6, r0
 8005000:	f7fb fa90 	bl	8000524 <__aeabi_i2d>
 8005004:	3630      	adds	r6, #48	; 0x30
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800500e:	f7fb f93b 	bl	8000288 <__aeabi_dsub>
 8005012:	f805 6b01 	strb.w	r6, [r5], #1
 8005016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005018:	42ab      	cmp	r3, r5
 800501a:	4680      	mov	r8, r0
 800501c:	4689      	mov	r9, r1
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	d125      	bne.n	8005070 <_dtoa_r+0x5f0>
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <_dtoa_r+0x614>)
 8005026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800502a:	f7fb f92f 	bl	800028c <__adddf3>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4640      	mov	r0, r8
 8005034:	4649      	mov	r1, r9
 8005036:	f7fb fd6b 	bl	8000b10 <__aeabi_dcmpgt>
 800503a:	2800      	cmp	r0, #0
 800503c:	d175      	bne.n	800512a <_dtoa_r+0x6aa>
 800503e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005042:	2000      	movs	r0, #0
 8005044:	4913      	ldr	r1, [pc, #76]	; (8005094 <_dtoa_r+0x614>)
 8005046:	f7fb f91f 	bl	8000288 <__aeabi_dsub>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4640      	mov	r0, r8
 8005050:	4649      	mov	r1, r9
 8005052:	f7fb fd3f 	bl	8000ad4 <__aeabi_dcmplt>
 8005056:	2800      	cmp	r0, #0
 8005058:	f43f af2f 	beq.w	8004eba <_dtoa_r+0x43a>
 800505c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005060:	2b30      	cmp	r3, #48	; 0x30
 8005062:	f105 32ff 	add.w	r2, r5, #4294967295
 8005066:	d001      	beq.n	800506c <_dtoa_r+0x5ec>
 8005068:	46bb      	mov	fp, r7
 800506a:	e04d      	b.n	8005108 <_dtoa_r+0x688>
 800506c:	4615      	mov	r5, r2
 800506e:	e7f5      	b.n	800505c <_dtoa_r+0x5dc>
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <_dtoa_r+0x608>)
 8005072:	f7fb fabd 	bl	80005f0 <__aeabi_dmul>
 8005076:	e9cd 0100 	strd	r0, r1, [sp]
 800507a:	e7bc      	b.n	8004ff6 <_dtoa_r+0x576>
 800507c:	080072b8 	.word	0x080072b8
 8005080:	08007290 	.word	0x08007290
 8005084:	3ff00000 	.word	0x3ff00000
 8005088:	40240000 	.word	0x40240000
 800508c:	401c0000 	.word	0x401c0000
 8005090:	40140000 	.word	0x40140000
 8005094:	3fe00000 	.word	0x3fe00000
 8005098:	e9dd 6700 	ldrd	r6, r7, [sp]
 800509c:	9d02      	ldr	r5, [sp, #8]
 800509e:	4642      	mov	r2, r8
 80050a0:	464b      	mov	r3, r9
 80050a2:	4630      	mov	r0, r6
 80050a4:	4639      	mov	r1, r7
 80050a6:	f7fb fbcd 	bl	8000844 <__aeabi_ddiv>
 80050aa:	f7fb fd51 	bl	8000b50 <__aeabi_d2iz>
 80050ae:	9000      	str	r0, [sp, #0]
 80050b0:	f7fb fa38 	bl	8000524 <__aeabi_i2d>
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	f7fb fa9a 	bl	80005f0 <__aeabi_dmul>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4630      	mov	r0, r6
 80050c2:	4639      	mov	r1, r7
 80050c4:	f7fb f8e0 	bl	8000288 <__aeabi_dsub>
 80050c8:	9e00      	ldr	r6, [sp, #0]
 80050ca:	9f03      	ldr	r7, [sp, #12]
 80050cc:	3630      	adds	r6, #48	; 0x30
 80050ce:	f805 6b01 	strb.w	r6, [r5], #1
 80050d2:	9e02      	ldr	r6, [sp, #8]
 80050d4:	1bae      	subs	r6, r5, r6
 80050d6:	42b7      	cmp	r7, r6
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	d138      	bne.n	8005150 <_dtoa_r+0x6d0>
 80050de:	f7fb f8d5 	bl	800028c <__adddf3>
 80050e2:	4606      	mov	r6, r0
 80050e4:	460f      	mov	r7, r1
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4640      	mov	r0, r8
 80050ec:	4649      	mov	r1, r9
 80050ee:	f7fb fcf1 	bl	8000ad4 <__aeabi_dcmplt>
 80050f2:	b9c8      	cbnz	r0, 8005128 <_dtoa_r+0x6a8>
 80050f4:	4632      	mov	r2, r6
 80050f6:	463b      	mov	r3, r7
 80050f8:	4640      	mov	r0, r8
 80050fa:	4649      	mov	r1, r9
 80050fc:	f7fb fce0 	bl	8000ac0 <__aeabi_dcmpeq>
 8005100:	b110      	cbz	r0, 8005108 <_dtoa_r+0x688>
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	07db      	lsls	r3, r3, #31
 8005106:	d40f      	bmi.n	8005128 <_dtoa_r+0x6a8>
 8005108:	4651      	mov	r1, sl
 800510a:	4620      	mov	r0, r4
 800510c:	f000 fcbb 	bl	8005a86 <_Bfree>
 8005110:	2300      	movs	r3, #0
 8005112:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005114:	702b      	strb	r3, [r5, #0]
 8005116:	f10b 0301 	add.w	r3, fp, #1
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800511e:	2b00      	cmp	r3, #0
 8005120:	f43f acf8 	beq.w	8004b14 <_dtoa_r+0x94>
 8005124:	601d      	str	r5, [r3, #0]
 8005126:	e4f5      	b.n	8004b14 <_dtoa_r+0x94>
 8005128:	465f      	mov	r7, fp
 800512a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800512e:	2a39      	cmp	r2, #57	; 0x39
 8005130:	f105 33ff 	add.w	r3, r5, #4294967295
 8005134:	d106      	bne.n	8005144 <_dtoa_r+0x6c4>
 8005136:	9a02      	ldr	r2, [sp, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	d107      	bne.n	800514c <_dtoa_r+0x6cc>
 800513c:	2330      	movs	r3, #48	; 0x30
 800513e:	7013      	strb	r3, [r2, #0]
 8005140:	3701      	adds	r7, #1
 8005142:	4613      	mov	r3, r2
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	3201      	adds	r2, #1
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	e78d      	b.n	8005068 <_dtoa_r+0x5e8>
 800514c:	461d      	mov	r5, r3
 800514e:	e7ec      	b.n	800512a <_dtoa_r+0x6aa>
 8005150:	2200      	movs	r2, #0
 8005152:	4ba4      	ldr	r3, [pc, #656]	; (80053e4 <_dtoa_r+0x964>)
 8005154:	f7fb fa4c 	bl	80005f0 <__aeabi_dmul>
 8005158:	2200      	movs	r2, #0
 800515a:	2300      	movs	r3, #0
 800515c:	4606      	mov	r6, r0
 800515e:	460f      	mov	r7, r1
 8005160:	f7fb fcae 	bl	8000ac0 <__aeabi_dcmpeq>
 8005164:	2800      	cmp	r0, #0
 8005166:	d09a      	beq.n	800509e <_dtoa_r+0x61e>
 8005168:	e7ce      	b.n	8005108 <_dtoa_r+0x688>
 800516a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800516c:	2a00      	cmp	r2, #0
 800516e:	f000 80cd 	beq.w	800530c <_dtoa_r+0x88c>
 8005172:	9a07      	ldr	r2, [sp, #28]
 8005174:	2a01      	cmp	r2, #1
 8005176:	f300 80af 	bgt.w	80052d8 <_dtoa_r+0x858>
 800517a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800517c:	2a00      	cmp	r2, #0
 800517e:	f000 80a7 	beq.w	80052d0 <_dtoa_r+0x850>
 8005182:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005186:	9e08      	ldr	r6, [sp, #32]
 8005188:	9d05      	ldr	r5, [sp, #20]
 800518a:	9a05      	ldr	r2, [sp, #20]
 800518c:	441a      	add	r2, r3
 800518e:	9205      	str	r2, [sp, #20]
 8005190:	9a06      	ldr	r2, [sp, #24]
 8005192:	2101      	movs	r1, #1
 8005194:	441a      	add	r2, r3
 8005196:	4620      	mov	r0, r4
 8005198:	9206      	str	r2, [sp, #24]
 800519a:	f000 fd14 	bl	8005bc6 <__i2b>
 800519e:	4607      	mov	r7, r0
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	dd0c      	ble.n	80051be <_dtoa_r+0x73e>
 80051a4:	9b06      	ldr	r3, [sp, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dd09      	ble.n	80051be <_dtoa_r+0x73e>
 80051aa:	42ab      	cmp	r3, r5
 80051ac:	9a05      	ldr	r2, [sp, #20]
 80051ae:	bfa8      	it	ge
 80051b0:	462b      	movge	r3, r5
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	9205      	str	r2, [sp, #20]
 80051b6:	9a06      	ldr	r2, [sp, #24]
 80051b8:	1aed      	subs	r5, r5, r3
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	9306      	str	r3, [sp, #24]
 80051be:	9b08      	ldr	r3, [sp, #32]
 80051c0:	b1f3      	cbz	r3, 8005200 <_dtoa_r+0x780>
 80051c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80a5 	beq.w	8005314 <_dtoa_r+0x894>
 80051ca:	2e00      	cmp	r6, #0
 80051cc:	dd10      	ble.n	80051f0 <_dtoa_r+0x770>
 80051ce:	4639      	mov	r1, r7
 80051d0:	4632      	mov	r2, r6
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 fd8e 	bl	8005cf4 <__pow5mult>
 80051d8:	4652      	mov	r2, sl
 80051da:	4601      	mov	r1, r0
 80051dc:	4607      	mov	r7, r0
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 fcfa 	bl	8005bd8 <__multiply>
 80051e4:	4651      	mov	r1, sl
 80051e6:	4680      	mov	r8, r0
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 fc4c 	bl	8005a86 <_Bfree>
 80051ee:	46c2      	mov	sl, r8
 80051f0:	9b08      	ldr	r3, [sp, #32]
 80051f2:	1b9a      	subs	r2, r3, r6
 80051f4:	d004      	beq.n	8005200 <_dtoa_r+0x780>
 80051f6:	4651      	mov	r1, sl
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 fd7b 	bl	8005cf4 <__pow5mult>
 80051fe:	4682      	mov	sl, r0
 8005200:	2101      	movs	r1, #1
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fcdf 	bl	8005bc6 <__i2b>
 8005208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800520a:	2b00      	cmp	r3, #0
 800520c:	4606      	mov	r6, r0
 800520e:	f340 8083 	ble.w	8005318 <_dtoa_r+0x898>
 8005212:	461a      	mov	r2, r3
 8005214:	4601      	mov	r1, r0
 8005216:	4620      	mov	r0, r4
 8005218:	f000 fd6c 	bl	8005cf4 <__pow5mult>
 800521c:	9b07      	ldr	r3, [sp, #28]
 800521e:	2b01      	cmp	r3, #1
 8005220:	4606      	mov	r6, r0
 8005222:	dd7c      	ble.n	800531e <_dtoa_r+0x89e>
 8005224:	f04f 0800 	mov.w	r8, #0
 8005228:	6933      	ldr	r3, [r6, #16]
 800522a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800522e:	6918      	ldr	r0, [r3, #16]
 8005230:	f000 fc7b 	bl	8005b2a <__hi0bits>
 8005234:	f1c0 0020 	rsb	r0, r0, #32
 8005238:	9b06      	ldr	r3, [sp, #24]
 800523a:	4418      	add	r0, r3
 800523c:	f010 001f 	ands.w	r0, r0, #31
 8005240:	f000 8096 	beq.w	8005370 <_dtoa_r+0x8f0>
 8005244:	f1c0 0320 	rsb	r3, r0, #32
 8005248:	2b04      	cmp	r3, #4
 800524a:	f340 8087 	ble.w	800535c <_dtoa_r+0x8dc>
 800524e:	9b05      	ldr	r3, [sp, #20]
 8005250:	f1c0 001c 	rsb	r0, r0, #28
 8005254:	4403      	add	r3, r0
 8005256:	9305      	str	r3, [sp, #20]
 8005258:	9b06      	ldr	r3, [sp, #24]
 800525a:	4405      	add	r5, r0
 800525c:	4403      	add	r3, r0
 800525e:	9306      	str	r3, [sp, #24]
 8005260:	9b05      	ldr	r3, [sp, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	dd05      	ble.n	8005272 <_dtoa_r+0x7f2>
 8005266:	4651      	mov	r1, sl
 8005268:	461a      	mov	r2, r3
 800526a:	4620      	mov	r0, r4
 800526c:	f000 fd90 	bl	8005d90 <__lshift>
 8005270:	4682      	mov	sl, r0
 8005272:	9b06      	ldr	r3, [sp, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	dd05      	ble.n	8005284 <_dtoa_r+0x804>
 8005278:	4631      	mov	r1, r6
 800527a:	461a      	mov	r2, r3
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fd87 	bl	8005d90 <__lshift>
 8005282:	4606      	mov	r6, r0
 8005284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005286:	2b00      	cmp	r3, #0
 8005288:	d074      	beq.n	8005374 <_dtoa_r+0x8f4>
 800528a:	4631      	mov	r1, r6
 800528c:	4650      	mov	r0, sl
 800528e:	f000 fdd0 	bl	8005e32 <__mcmp>
 8005292:	2800      	cmp	r0, #0
 8005294:	da6e      	bge.n	8005374 <_dtoa_r+0x8f4>
 8005296:	2300      	movs	r3, #0
 8005298:	4651      	mov	r1, sl
 800529a:	220a      	movs	r2, #10
 800529c:	4620      	mov	r0, r4
 800529e:	f000 fc09 	bl	8005ab4 <__multadd>
 80052a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052a8:	4682      	mov	sl, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 81a8 	beq.w	8005600 <_dtoa_r+0xb80>
 80052b0:	2300      	movs	r3, #0
 80052b2:	4639      	mov	r1, r7
 80052b4:	220a      	movs	r2, #10
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fbfc 	bl	8005ab4 <__multadd>
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	4607      	mov	r7, r0
 80052c2:	f300 80c8 	bgt.w	8005456 <_dtoa_r+0x9d6>
 80052c6:	9b07      	ldr	r3, [sp, #28]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	f340 80c4 	ble.w	8005456 <_dtoa_r+0x9d6>
 80052ce:	e059      	b.n	8005384 <_dtoa_r+0x904>
 80052d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052d6:	e756      	b.n	8005186 <_dtoa_r+0x706>
 80052d8:	9b03      	ldr	r3, [sp, #12]
 80052da:	1e5e      	subs	r6, r3, #1
 80052dc:	9b08      	ldr	r3, [sp, #32]
 80052de:	42b3      	cmp	r3, r6
 80052e0:	bfbf      	itttt	lt
 80052e2:	9b08      	ldrlt	r3, [sp, #32]
 80052e4:	9608      	strlt	r6, [sp, #32]
 80052e6:	1af2      	sublt	r2, r6, r3
 80052e8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80052ea:	bfb6      	itet	lt
 80052ec:	189b      	addlt	r3, r3, r2
 80052ee:	1b9e      	subge	r6, r3, r6
 80052f0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	bfb8      	it	lt
 80052f6:	2600      	movlt	r6, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	bfb9      	ittee	lt
 80052fc:	9b05      	ldrlt	r3, [sp, #20]
 80052fe:	9a03      	ldrlt	r2, [sp, #12]
 8005300:	9d05      	ldrge	r5, [sp, #20]
 8005302:	9b03      	ldrge	r3, [sp, #12]
 8005304:	bfbc      	itt	lt
 8005306:	1a9d      	sublt	r5, r3, r2
 8005308:	2300      	movlt	r3, #0
 800530a:	e73e      	b.n	800518a <_dtoa_r+0x70a>
 800530c:	9e08      	ldr	r6, [sp, #32]
 800530e:	9d05      	ldr	r5, [sp, #20]
 8005310:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005312:	e745      	b.n	80051a0 <_dtoa_r+0x720>
 8005314:	9a08      	ldr	r2, [sp, #32]
 8005316:	e76e      	b.n	80051f6 <_dtoa_r+0x776>
 8005318:	9b07      	ldr	r3, [sp, #28]
 800531a:	2b01      	cmp	r3, #1
 800531c:	dc19      	bgt.n	8005352 <_dtoa_r+0x8d2>
 800531e:	9b00      	ldr	r3, [sp, #0]
 8005320:	b9bb      	cbnz	r3, 8005352 <_dtoa_r+0x8d2>
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005328:	b99b      	cbnz	r3, 8005352 <_dtoa_r+0x8d2>
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005330:	0d1b      	lsrs	r3, r3, #20
 8005332:	051b      	lsls	r3, r3, #20
 8005334:	b183      	cbz	r3, 8005358 <_dtoa_r+0x8d8>
 8005336:	9b05      	ldr	r3, [sp, #20]
 8005338:	3301      	adds	r3, #1
 800533a:	9305      	str	r3, [sp, #20]
 800533c:	9b06      	ldr	r3, [sp, #24]
 800533e:	3301      	adds	r3, #1
 8005340:	9306      	str	r3, [sp, #24]
 8005342:	f04f 0801 	mov.w	r8, #1
 8005346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005348:	2b00      	cmp	r3, #0
 800534a:	f47f af6d 	bne.w	8005228 <_dtoa_r+0x7a8>
 800534e:	2001      	movs	r0, #1
 8005350:	e772      	b.n	8005238 <_dtoa_r+0x7b8>
 8005352:	f04f 0800 	mov.w	r8, #0
 8005356:	e7f6      	b.n	8005346 <_dtoa_r+0x8c6>
 8005358:	4698      	mov	r8, r3
 800535a:	e7f4      	b.n	8005346 <_dtoa_r+0x8c6>
 800535c:	d080      	beq.n	8005260 <_dtoa_r+0x7e0>
 800535e:	9a05      	ldr	r2, [sp, #20]
 8005360:	331c      	adds	r3, #28
 8005362:	441a      	add	r2, r3
 8005364:	9205      	str	r2, [sp, #20]
 8005366:	9a06      	ldr	r2, [sp, #24]
 8005368:	441a      	add	r2, r3
 800536a:	441d      	add	r5, r3
 800536c:	4613      	mov	r3, r2
 800536e:	e776      	b.n	800525e <_dtoa_r+0x7de>
 8005370:	4603      	mov	r3, r0
 8005372:	e7f4      	b.n	800535e <_dtoa_r+0x8de>
 8005374:	9b03      	ldr	r3, [sp, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	dc36      	bgt.n	80053e8 <_dtoa_r+0x968>
 800537a:	9b07      	ldr	r3, [sp, #28]
 800537c:	2b02      	cmp	r3, #2
 800537e:	dd33      	ble.n	80053e8 <_dtoa_r+0x968>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	9304      	str	r3, [sp, #16]
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	b963      	cbnz	r3, 80053a2 <_dtoa_r+0x922>
 8005388:	4631      	mov	r1, r6
 800538a:	2205      	movs	r2, #5
 800538c:	4620      	mov	r0, r4
 800538e:	f000 fb91 	bl	8005ab4 <__multadd>
 8005392:	4601      	mov	r1, r0
 8005394:	4606      	mov	r6, r0
 8005396:	4650      	mov	r0, sl
 8005398:	f000 fd4b 	bl	8005e32 <__mcmp>
 800539c:	2800      	cmp	r0, #0
 800539e:	f73f adb6 	bgt.w	8004f0e <_dtoa_r+0x48e>
 80053a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a4:	9d02      	ldr	r5, [sp, #8]
 80053a6:	ea6f 0b03 	mvn.w	fp, r3
 80053aa:	2300      	movs	r3, #0
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	4631      	mov	r1, r6
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 fb68 	bl	8005a86 <_Bfree>
 80053b6:	2f00      	cmp	r7, #0
 80053b8:	f43f aea6 	beq.w	8005108 <_dtoa_r+0x688>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	b12b      	cbz	r3, 80053cc <_dtoa_r+0x94c>
 80053c0:	42bb      	cmp	r3, r7
 80053c2:	d003      	beq.n	80053cc <_dtoa_r+0x94c>
 80053c4:	4619      	mov	r1, r3
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 fb5d 	bl	8005a86 <_Bfree>
 80053cc:	4639      	mov	r1, r7
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 fb59 	bl	8005a86 <_Bfree>
 80053d4:	e698      	b.n	8005108 <_dtoa_r+0x688>
 80053d6:	2600      	movs	r6, #0
 80053d8:	4637      	mov	r7, r6
 80053da:	e7e2      	b.n	80053a2 <_dtoa_r+0x922>
 80053dc:	46bb      	mov	fp, r7
 80053de:	4637      	mov	r7, r6
 80053e0:	e595      	b.n	8004f0e <_dtoa_r+0x48e>
 80053e2:	bf00      	nop
 80053e4:	40240000 	.word	0x40240000
 80053e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ea:	bb93      	cbnz	r3, 8005452 <_dtoa_r+0x9d2>
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	9304      	str	r3, [sp, #16]
 80053f0:	9d02      	ldr	r5, [sp, #8]
 80053f2:	4631      	mov	r1, r6
 80053f4:	4650      	mov	r0, sl
 80053f6:	f7ff fab5 	bl	8004964 <quorem>
 80053fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80053fe:	f805 9b01 	strb.w	r9, [r5], #1
 8005402:	9b02      	ldr	r3, [sp, #8]
 8005404:	9a04      	ldr	r2, [sp, #16]
 8005406:	1aeb      	subs	r3, r5, r3
 8005408:	429a      	cmp	r2, r3
 800540a:	f300 80dc 	bgt.w	80055c6 <_dtoa_r+0xb46>
 800540e:	9b02      	ldr	r3, [sp, #8]
 8005410:	2a01      	cmp	r2, #1
 8005412:	bfac      	ite	ge
 8005414:	189b      	addge	r3, r3, r2
 8005416:	3301      	addlt	r3, #1
 8005418:	4698      	mov	r8, r3
 800541a:	2300      	movs	r3, #0
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	4651      	mov	r1, sl
 8005420:	2201      	movs	r2, #1
 8005422:	4620      	mov	r0, r4
 8005424:	f000 fcb4 	bl	8005d90 <__lshift>
 8005428:	4631      	mov	r1, r6
 800542a:	4682      	mov	sl, r0
 800542c:	f000 fd01 	bl	8005e32 <__mcmp>
 8005430:	2800      	cmp	r0, #0
 8005432:	f300 808d 	bgt.w	8005550 <_dtoa_r+0xad0>
 8005436:	d103      	bne.n	8005440 <_dtoa_r+0x9c0>
 8005438:	f019 0f01 	tst.w	r9, #1
 800543c:	f040 8088 	bne.w	8005550 <_dtoa_r+0xad0>
 8005440:	4645      	mov	r5, r8
 8005442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005446:	2b30      	cmp	r3, #48	; 0x30
 8005448:	f105 32ff 	add.w	r2, r5, #4294967295
 800544c:	d1af      	bne.n	80053ae <_dtoa_r+0x92e>
 800544e:	4615      	mov	r5, r2
 8005450:	e7f7      	b.n	8005442 <_dtoa_r+0x9c2>
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	2d00      	cmp	r5, #0
 8005458:	dd05      	ble.n	8005466 <_dtoa_r+0x9e6>
 800545a:	4639      	mov	r1, r7
 800545c:	462a      	mov	r2, r5
 800545e:	4620      	mov	r0, r4
 8005460:	f000 fc96 	bl	8005d90 <__lshift>
 8005464:	4607      	mov	r7, r0
 8005466:	f1b8 0f00 	cmp.w	r8, #0
 800546a:	d04c      	beq.n	8005506 <_dtoa_r+0xa86>
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4620      	mov	r0, r4
 8005470:	f000 fad5 	bl	8005a1e <_Balloc>
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	3202      	adds	r2, #2
 8005478:	4605      	mov	r5, r0
 800547a:	0092      	lsls	r2, r2, #2
 800547c:	f107 010c 	add.w	r1, r7, #12
 8005480:	300c      	adds	r0, #12
 8005482:	f000 fac1 	bl	8005a08 <memcpy>
 8005486:	2201      	movs	r2, #1
 8005488:	4629      	mov	r1, r5
 800548a:	4620      	mov	r0, r4
 800548c:	f000 fc80 	bl	8005d90 <__lshift>
 8005490:	9b00      	ldr	r3, [sp, #0]
 8005492:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005496:	9703      	str	r7, [sp, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	4607      	mov	r7, r0
 800549e:	9305      	str	r3, [sp, #20]
 80054a0:	4631      	mov	r1, r6
 80054a2:	4650      	mov	r0, sl
 80054a4:	f7ff fa5e 	bl	8004964 <quorem>
 80054a8:	9903      	ldr	r1, [sp, #12]
 80054aa:	4605      	mov	r5, r0
 80054ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80054b0:	4650      	mov	r0, sl
 80054b2:	f000 fcbe 	bl	8005e32 <__mcmp>
 80054b6:	463a      	mov	r2, r7
 80054b8:	9000      	str	r0, [sp, #0]
 80054ba:	4631      	mov	r1, r6
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 fcd2 	bl	8005e66 <__mdiff>
 80054c2:	68c3      	ldr	r3, [r0, #12]
 80054c4:	4602      	mov	r2, r0
 80054c6:	bb03      	cbnz	r3, 800550a <_dtoa_r+0xa8a>
 80054c8:	4601      	mov	r1, r0
 80054ca:	9006      	str	r0, [sp, #24]
 80054cc:	4650      	mov	r0, sl
 80054ce:	f000 fcb0 	bl	8005e32 <__mcmp>
 80054d2:	9a06      	ldr	r2, [sp, #24]
 80054d4:	4603      	mov	r3, r0
 80054d6:	4611      	mov	r1, r2
 80054d8:	4620      	mov	r0, r4
 80054da:	9306      	str	r3, [sp, #24]
 80054dc:	f000 fad3 	bl	8005a86 <_Bfree>
 80054e0:	9b06      	ldr	r3, [sp, #24]
 80054e2:	b9a3      	cbnz	r3, 800550e <_dtoa_r+0xa8e>
 80054e4:	9a07      	ldr	r2, [sp, #28]
 80054e6:	b992      	cbnz	r2, 800550e <_dtoa_r+0xa8e>
 80054e8:	9a05      	ldr	r2, [sp, #20]
 80054ea:	b982      	cbnz	r2, 800550e <_dtoa_r+0xa8e>
 80054ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80054f0:	d029      	beq.n	8005546 <_dtoa_r+0xac6>
 80054f2:	9b00      	ldr	r3, [sp, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd01      	ble.n	80054fc <_dtoa_r+0xa7c>
 80054f8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80054fc:	f108 0501 	add.w	r5, r8, #1
 8005500:	f888 9000 	strb.w	r9, [r8]
 8005504:	e753      	b.n	80053ae <_dtoa_r+0x92e>
 8005506:	4638      	mov	r0, r7
 8005508:	e7c2      	b.n	8005490 <_dtoa_r+0xa10>
 800550a:	2301      	movs	r3, #1
 800550c:	e7e3      	b.n	80054d6 <_dtoa_r+0xa56>
 800550e:	9a00      	ldr	r2, [sp, #0]
 8005510:	2a00      	cmp	r2, #0
 8005512:	db04      	blt.n	800551e <_dtoa_r+0xa9e>
 8005514:	d125      	bne.n	8005562 <_dtoa_r+0xae2>
 8005516:	9a07      	ldr	r2, [sp, #28]
 8005518:	bb1a      	cbnz	r2, 8005562 <_dtoa_r+0xae2>
 800551a:	9a05      	ldr	r2, [sp, #20]
 800551c:	bb0a      	cbnz	r2, 8005562 <_dtoa_r+0xae2>
 800551e:	2b00      	cmp	r3, #0
 8005520:	ddec      	ble.n	80054fc <_dtoa_r+0xa7c>
 8005522:	4651      	mov	r1, sl
 8005524:	2201      	movs	r2, #1
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fc32 	bl	8005d90 <__lshift>
 800552c:	4631      	mov	r1, r6
 800552e:	4682      	mov	sl, r0
 8005530:	f000 fc7f 	bl	8005e32 <__mcmp>
 8005534:	2800      	cmp	r0, #0
 8005536:	dc03      	bgt.n	8005540 <_dtoa_r+0xac0>
 8005538:	d1e0      	bne.n	80054fc <_dtoa_r+0xa7c>
 800553a:	f019 0f01 	tst.w	r9, #1
 800553e:	d0dd      	beq.n	80054fc <_dtoa_r+0xa7c>
 8005540:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005544:	d1d8      	bne.n	80054f8 <_dtoa_r+0xa78>
 8005546:	2339      	movs	r3, #57	; 0x39
 8005548:	f888 3000 	strb.w	r3, [r8]
 800554c:	f108 0801 	add.w	r8, r8, #1
 8005550:	4645      	mov	r5, r8
 8005552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005556:	2b39      	cmp	r3, #57	; 0x39
 8005558:	f105 32ff 	add.w	r2, r5, #4294967295
 800555c:	d03b      	beq.n	80055d6 <_dtoa_r+0xb56>
 800555e:	3301      	adds	r3, #1
 8005560:	e040      	b.n	80055e4 <_dtoa_r+0xb64>
 8005562:	2b00      	cmp	r3, #0
 8005564:	f108 0501 	add.w	r5, r8, #1
 8005568:	dd05      	ble.n	8005576 <_dtoa_r+0xaf6>
 800556a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800556e:	d0ea      	beq.n	8005546 <_dtoa_r+0xac6>
 8005570:	f109 0901 	add.w	r9, r9, #1
 8005574:	e7c4      	b.n	8005500 <_dtoa_r+0xa80>
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	9a04      	ldr	r2, [sp, #16]
 800557a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800557e:	1aeb      	subs	r3, r5, r3
 8005580:	4293      	cmp	r3, r2
 8005582:	46a8      	mov	r8, r5
 8005584:	f43f af4b 	beq.w	800541e <_dtoa_r+0x99e>
 8005588:	4651      	mov	r1, sl
 800558a:	2300      	movs	r3, #0
 800558c:	220a      	movs	r2, #10
 800558e:	4620      	mov	r0, r4
 8005590:	f000 fa90 	bl	8005ab4 <__multadd>
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	9903      	ldr	r1, [sp, #12]
 8005598:	42bb      	cmp	r3, r7
 800559a:	4682      	mov	sl, r0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	f04f 020a 	mov.w	r2, #10
 80055a4:	4620      	mov	r0, r4
 80055a6:	d104      	bne.n	80055b2 <_dtoa_r+0xb32>
 80055a8:	f000 fa84 	bl	8005ab4 <__multadd>
 80055ac:	9003      	str	r0, [sp, #12]
 80055ae:	4607      	mov	r7, r0
 80055b0:	e776      	b.n	80054a0 <_dtoa_r+0xa20>
 80055b2:	f000 fa7f 	bl	8005ab4 <__multadd>
 80055b6:	2300      	movs	r3, #0
 80055b8:	9003      	str	r0, [sp, #12]
 80055ba:	220a      	movs	r2, #10
 80055bc:	4639      	mov	r1, r7
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 fa78 	bl	8005ab4 <__multadd>
 80055c4:	e7f3      	b.n	80055ae <_dtoa_r+0xb2e>
 80055c6:	4651      	mov	r1, sl
 80055c8:	2300      	movs	r3, #0
 80055ca:	220a      	movs	r2, #10
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fa71 	bl	8005ab4 <__multadd>
 80055d2:	4682      	mov	sl, r0
 80055d4:	e70d      	b.n	80053f2 <_dtoa_r+0x972>
 80055d6:	9b02      	ldr	r3, [sp, #8]
 80055d8:	4293      	cmp	r3, r2
 80055da:	d105      	bne.n	80055e8 <_dtoa_r+0xb68>
 80055dc:	9a02      	ldr	r2, [sp, #8]
 80055de:	f10b 0b01 	add.w	fp, fp, #1
 80055e2:	2331      	movs	r3, #49	; 0x31
 80055e4:	7013      	strb	r3, [r2, #0]
 80055e6:	e6e2      	b.n	80053ae <_dtoa_r+0x92e>
 80055e8:	4615      	mov	r5, r2
 80055ea:	e7b2      	b.n	8005552 <_dtoa_r+0xad2>
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <_dtoa_r+0xb94>)
 80055ee:	f7ff baae 	b.w	8004b4e <_dtoa_r+0xce>
 80055f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f47f aa88 	bne.w	8004b0a <_dtoa_r+0x8a>
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <_dtoa_r+0xb98>)
 80055fc:	f7ff baa7 	b.w	8004b4e <_dtoa_r+0xce>
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f73f aef4 	bgt.w	80053f0 <_dtoa_r+0x970>
 8005608:	9b07      	ldr	r3, [sp, #28]
 800560a:	2b02      	cmp	r3, #2
 800560c:	f77f aef0 	ble.w	80053f0 <_dtoa_r+0x970>
 8005610:	e6b8      	b.n	8005384 <_dtoa_r+0x904>
 8005612:	bf00      	nop
 8005614:	080071f8 	.word	0x080071f8
 8005618:	0800721c 	.word	0x0800721c

0800561c <__sflush_r>:
 800561c:	898a      	ldrh	r2, [r1, #12]
 800561e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	0710      	lsls	r0, r2, #28
 8005626:	460c      	mov	r4, r1
 8005628:	d45a      	bmi.n	80056e0 <__sflush_r+0xc4>
 800562a:	684b      	ldr	r3, [r1, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	dc05      	bgt.n	800563c <__sflush_r+0x20>
 8005630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	dc02      	bgt.n	800563c <__sflush_r+0x20>
 8005636:	2000      	movs	r0, #0
 8005638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800563c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563e:	2e00      	cmp	r6, #0
 8005640:	d0f9      	beq.n	8005636 <__sflush_r+0x1a>
 8005642:	2300      	movs	r3, #0
 8005644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005648:	682f      	ldr	r7, [r5, #0]
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	d033      	beq.n	80056b6 <__sflush_r+0x9a>
 800564e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	075a      	lsls	r2, r3, #29
 8005654:	d505      	bpl.n	8005662 <__sflush_r+0x46>
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	1ac0      	subs	r0, r0, r3
 800565a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800565c:	b10b      	cbz	r3, 8005662 <__sflush_r+0x46>
 800565e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005660:	1ac0      	subs	r0, r0, r3
 8005662:	2300      	movs	r3, #0
 8005664:	4602      	mov	r2, r0
 8005666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005668:	6a21      	ldr	r1, [r4, #32]
 800566a:	4628      	mov	r0, r5
 800566c:	47b0      	blx	r6
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	d106      	bne.n	8005682 <__sflush_r+0x66>
 8005674:	6829      	ldr	r1, [r5, #0]
 8005676:	291d      	cmp	r1, #29
 8005678:	d84b      	bhi.n	8005712 <__sflush_r+0xf6>
 800567a:	4a2b      	ldr	r2, [pc, #172]	; (8005728 <__sflush_r+0x10c>)
 800567c:	40ca      	lsrs	r2, r1
 800567e:	07d6      	lsls	r6, r2, #31
 8005680:	d547      	bpl.n	8005712 <__sflush_r+0xf6>
 8005682:	2200      	movs	r2, #0
 8005684:	6062      	str	r2, [r4, #4]
 8005686:	04d9      	lsls	r1, r3, #19
 8005688:	6922      	ldr	r2, [r4, #16]
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	d504      	bpl.n	8005698 <__sflush_r+0x7c>
 800568e:	1c42      	adds	r2, r0, #1
 8005690:	d101      	bne.n	8005696 <__sflush_r+0x7a>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	b903      	cbnz	r3, 8005698 <__sflush_r+0x7c>
 8005696:	6560      	str	r0, [r4, #84]	; 0x54
 8005698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569a:	602f      	str	r7, [r5, #0]
 800569c:	2900      	cmp	r1, #0
 800569e:	d0ca      	beq.n	8005636 <__sflush_r+0x1a>
 80056a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a4:	4299      	cmp	r1, r3
 80056a6:	d002      	beq.n	80056ae <__sflush_r+0x92>
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 fc97 	bl	8005fdc <_free_r>
 80056ae:	2000      	movs	r0, #0
 80056b0:	6360      	str	r0, [r4, #52]	; 0x34
 80056b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b6:	6a21      	ldr	r1, [r4, #32]
 80056b8:	2301      	movs	r3, #1
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b0      	blx	r6
 80056be:	1c41      	adds	r1, r0, #1
 80056c0:	d1c6      	bne.n	8005650 <__sflush_r+0x34>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0c3      	beq.n	8005650 <__sflush_r+0x34>
 80056c8:	2b1d      	cmp	r3, #29
 80056ca:	d001      	beq.n	80056d0 <__sflush_r+0xb4>
 80056cc:	2b16      	cmp	r3, #22
 80056ce:	d101      	bne.n	80056d4 <__sflush_r+0xb8>
 80056d0:	602f      	str	r7, [r5, #0]
 80056d2:	e7b0      	b.n	8005636 <__sflush_r+0x1a>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e0:	690f      	ldr	r7, [r1, #16]
 80056e2:	2f00      	cmp	r7, #0
 80056e4:	d0a7      	beq.n	8005636 <__sflush_r+0x1a>
 80056e6:	0793      	lsls	r3, r2, #30
 80056e8:	680e      	ldr	r6, [r1, #0]
 80056ea:	bf08      	it	eq
 80056ec:	694b      	ldreq	r3, [r1, #20]
 80056ee:	600f      	str	r7, [r1, #0]
 80056f0:	bf18      	it	ne
 80056f2:	2300      	movne	r3, #0
 80056f4:	eba6 0807 	sub.w	r8, r6, r7
 80056f8:	608b      	str	r3, [r1, #8]
 80056fa:	f1b8 0f00 	cmp.w	r8, #0
 80056fe:	dd9a      	ble.n	8005636 <__sflush_r+0x1a>
 8005700:	4643      	mov	r3, r8
 8005702:	463a      	mov	r2, r7
 8005704:	6a21      	ldr	r1, [r4, #32]
 8005706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005708:	4628      	mov	r0, r5
 800570a:	47b0      	blx	r6
 800570c:	2800      	cmp	r0, #0
 800570e:	dc07      	bgt.n	8005720 <__sflush_r+0x104>
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	4407      	add	r7, r0
 8005722:	eba8 0800 	sub.w	r8, r8, r0
 8005726:	e7e8      	b.n	80056fa <__sflush_r+0xde>
 8005728:	20400001 	.word	0x20400001

0800572c <_fflush_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	690b      	ldr	r3, [r1, #16]
 8005730:	4605      	mov	r5, r0
 8005732:	460c      	mov	r4, r1
 8005734:	b1db      	cbz	r3, 800576e <_fflush_r+0x42>
 8005736:	b118      	cbz	r0, 8005740 <_fflush_r+0x14>
 8005738:	6983      	ldr	r3, [r0, #24]
 800573a:	b90b      	cbnz	r3, 8005740 <_fflush_r+0x14>
 800573c:	f000 f860 	bl	8005800 <__sinit>
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <_fflush_r+0x48>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d109      	bne.n	800575a <_fflush_r+0x2e>
 8005746:	686c      	ldr	r4, [r5, #4]
 8005748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574c:	b17b      	cbz	r3, 800576e <_fflush_r+0x42>
 800574e:	4621      	mov	r1, r4
 8005750:	4628      	mov	r0, r5
 8005752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005756:	f7ff bf61 	b.w	800561c <__sflush_r>
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <_fflush_r+0x4c>)
 800575c:	429c      	cmp	r4, r3
 800575e:	d101      	bne.n	8005764 <_fflush_r+0x38>
 8005760:	68ac      	ldr	r4, [r5, #8]
 8005762:	e7f1      	b.n	8005748 <_fflush_r+0x1c>
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <_fflush_r+0x50>)
 8005766:	429c      	cmp	r4, r3
 8005768:	bf08      	it	eq
 800576a:	68ec      	ldreq	r4, [r5, #12]
 800576c:	e7ec      	b.n	8005748 <_fflush_r+0x1c>
 800576e:	2000      	movs	r0, #0
 8005770:	bd38      	pop	{r3, r4, r5, pc}
 8005772:	bf00      	nop
 8005774:	0800724c 	.word	0x0800724c
 8005778:	0800726c 	.word	0x0800726c
 800577c:	0800722c 	.word	0x0800722c

08005780 <_cleanup_r>:
 8005780:	4901      	ldr	r1, [pc, #4]	; (8005788 <_cleanup_r+0x8>)
 8005782:	f000 b8a9 	b.w	80058d8 <_fwalk_reent>
 8005786:	bf00      	nop
 8005788:	0800572d 	.word	0x0800572d

0800578c <std.isra.0>:
 800578c:	2300      	movs	r3, #0
 800578e:	b510      	push	{r4, lr}
 8005790:	4604      	mov	r4, r0
 8005792:	6003      	str	r3, [r0, #0]
 8005794:	6043      	str	r3, [r0, #4]
 8005796:	6083      	str	r3, [r0, #8]
 8005798:	8181      	strh	r1, [r0, #12]
 800579a:	6643      	str	r3, [r0, #100]	; 0x64
 800579c:	81c2      	strh	r2, [r0, #14]
 800579e:	6103      	str	r3, [r0, #16]
 80057a0:	6143      	str	r3, [r0, #20]
 80057a2:	6183      	str	r3, [r0, #24]
 80057a4:	4619      	mov	r1, r3
 80057a6:	2208      	movs	r2, #8
 80057a8:	305c      	adds	r0, #92	; 0x5c
 80057aa:	f7fe fb2b 	bl	8003e04 <memset>
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <std.isra.0+0x38>)
 80057b0:	6263      	str	r3, [r4, #36]	; 0x24
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <std.isra.0+0x3c>)
 80057b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <std.isra.0+0x40>)
 80057b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <std.isra.0+0x44>)
 80057bc:	6224      	str	r4, [r4, #32]
 80057be:	6323      	str	r3, [r4, #48]	; 0x30
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	bf00      	nop
 80057c4:	080063d5 	.word	0x080063d5
 80057c8:	080063f7 	.word	0x080063f7
 80057cc:	0800642f 	.word	0x0800642f
 80057d0:	08006453 	.word	0x08006453

080057d4 <__sfmoreglue>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	1e4a      	subs	r2, r1, #1
 80057d8:	2568      	movs	r5, #104	; 0x68
 80057da:	4355      	muls	r5, r2
 80057dc:	460e      	mov	r6, r1
 80057de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057e2:	f000 fc49 	bl	8006078 <_malloc_r>
 80057e6:	4604      	mov	r4, r0
 80057e8:	b140      	cbz	r0, 80057fc <__sfmoreglue+0x28>
 80057ea:	2100      	movs	r1, #0
 80057ec:	e880 0042 	stmia.w	r0, {r1, r6}
 80057f0:	300c      	adds	r0, #12
 80057f2:	60a0      	str	r0, [r4, #8]
 80057f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057f8:	f7fe fb04 	bl	8003e04 <memset>
 80057fc:	4620      	mov	r0, r4
 80057fe:	bd70      	pop	{r4, r5, r6, pc}

08005800 <__sinit>:
 8005800:	6983      	ldr	r3, [r0, #24]
 8005802:	b510      	push	{r4, lr}
 8005804:	4604      	mov	r4, r0
 8005806:	bb33      	cbnz	r3, 8005856 <__sinit+0x56>
 8005808:	6483      	str	r3, [r0, #72]	; 0x48
 800580a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800580c:	6503      	str	r3, [r0, #80]	; 0x50
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <__sinit+0x58>)
 8005810:	4a12      	ldr	r2, [pc, #72]	; (800585c <__sinit+0x5c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6282      	str	r2, [r0, #40]	; 0x28
 8005816:	4298      	cmp	r0, r3
 8005818:	bf04      	itt	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	6183      	streq	r3, [r0, #24]
 800581e:	f000 f81f 	bl	8005860 <__sfp>
 8005822:	6060      	str	r0, [r4, #4]
 8005824:	4620      	mov	r0, r4
 8005826:	f000 f81b 	bl	8005860 <__sfp>
 800582a:	60a0      	str	r0, [r4, #8]
 800582c:	4620      	mov	r0, r4
 800582e:	f000 f817 	bl	8005860 <__sfp>
 8005832:	2200      	movs	r2, #0
 8005834:	60e0      	str	r0, [r4, #12]
 8005836:	2104      	movs	r1, #4
 8005838:	6860      	ldr	r0, [r4, #4]
 800583a:	f7ff ffa7 	bl	800578c <std.isra.0>
 800583e:	2201      	movs	r2, #1
 8005840:	2109      	movs	r1, #9
 8005842:	68a0      	ldr	r0, [r4, #8]
 8005844:	f7ff ffa2 	bl	800578c <std.isra.0>
 8005848:	2202      	movs	r2, #2
 800584a:	2112      	movs	r1, #18
 800584c:	68e0      	ldr	r0, [r4, #12]
 800584e:	f7ff ff9d 	bl	800578c <std.isra.0>
 8005852:	2301      	movs	r3, #1
 8005854:	61a3      	str	r3, [r4, #24]
 8005856:	bd10      	pop	{r4, pc}
 8005858:	080071e4 	.word	0x080071e4
 800585c:	08005781 	.word	0x08005781

08005860 <__sfp>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <__sfp+0x74>)
 8005864:	681e      	ldr	r6, [r3, #0]
 8005866:	69b3      	ldr	r3, [r6, #24]
 8005868:	4607      	mov	r7, r0
 800586a:	b913      	cbnz	r3, 8005872 <__sfp+0x12>
 800586c:	4630      	mov	r0, r6
 800586e:	f7ff ffc7 	bl	8005800 <__sinit>
 8005872:	3648      	adds	r6, #72	; 0x48
 8005874:	68b4      	ldr	r4, [r6, #8]
 8005876:	6873      	ldr	r3, [r6, #4]
 8005878:	3b01      	subs	r3, #1
 800587a:	d503      	bpl.n	8005884 <__sfp+0x24>
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	b133      	cbz	r3, 800588e <__sfp+0x2e>
 8005880:	6836      	ldr	r6, [r6, #0]
 8005882:	e7f7      	b.n	8005874 <__sfp+0x14>
 8005884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005888:	b16d      	cbz	r5, 80058a6 <__sfp+0x46>
 800588a:	3468      	adds	r4, #104	; 0x68
 800588c:	e7f4      	b.n	8005878 <__sfp+0x18>
 800588e:	2104      	movs	r1, #4
 8005890:	4638      	mov	r0, r7
 8005892:	f7ff ff9f 	bl	80057d4 <__sfmoreglue>
 8005896:	6030      	str	r0, [r6, #0]
 8005898:	2800      	cmp	r0, #0
 800589a:	d1f1      	bne.n	8005880 <__sfp+0x20>
 800589c:	230c      	movs	r3, #12
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4604      	mov	r4, r0
 80058a2:	4620      	mov	r0, r4
 80058a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058aa:	81e3      	strh	r3, [r4, #14]
 80058ac:	2301      	movs	r3, #1
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	6665      	str	r5, [r4, #100]	; 0x64
 80058b2:	6025      	str	r5, [r4, #0]
 80058b4:	60a5      	str	r5, [r4, #8]
 80058b6:	6065      	str	r5, [r4, #4]
 80058b8:	6125      	str	r5, [r4, #16]
 80058ba:	6165      	str	r5, [r4, #20]
 80058bc:	61a5      	str	r5, [r4, #24]
 80058be:	2208      	movs	r2, #8
 80058c0:	4629      	mov	r1, r5
 80058c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058c6:	f7fe fa9d 	bl	8003e04 <memset>
 80058ca:	6365      	str	r5, [r4, #52]	; 0x34
 80058cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80058ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80058d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80058d2:	e7e6      	b.n	80058a2 <__sfp+0x42>
 80058d4:	080071e4 	.word	0x080071e4

080058d8 <_fwalk_reent>:
 80058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058dc:	4680      	mov	r8, r0
 80058de:	4689      	mov	r9, r1
 80058e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058e4:	2600      	movs	r6, #0
 80058e6:	b914      	cbnz	r4, 80058ee <_fwalk_reent+0x16>
 80058e8:	4630      	mov	r0, r6
 80058ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ee:	68a5      	ldr	r5, [r4, #8]
 80058f0:	6867      	ldr	r7, [r4, #4]
 80058f2:	3f01      	subs	r7, #1
 80058f4:	d501      	bpl.n	80058fa <_fwalk_reent+0x22>
 80058f6:	6824      	ldr	r4, [r4, #0]
 80058f8:	e7f5      	b.n	80058e6 <_fwalk_reent+0xe>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d907      	bls.n	8005910 <_fwalk_reent+0x38>
 8005900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005904:	3301      	adds	r3, #1
 8005906:	d003      	beq.n	8005910 <_fwalk_reent+0x38>
 8005908:	4629      	mov	r1, r5
 800590a:	4640      	mov	r0, r8
 800590c:	47c8      	blx	r9
 800590e:	4306      	orrs	r6, r0
 8005910:	3568      	adds	r5, #104	; 0x68
 8005912:	e7ee      	b.n	80058f2 <_fwalk_reent+0x1a>

08005914 <_localeconv_r>:
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <_localeconv_r+0x14>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6a18      	ldr	r0, [r3, #32]
 800591a:	4b04      	ldr	r3, [pc, #16]	; (800592c <_localeconv_r+0x18>)
 800591c:	2800      	cmp	r0, #0
 800591e:	bf08      	it	eq
 8005920:	4618      	moveq	r0, r3
 8005922:	30f0      	adds	r0, #240	; 0xf0
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	2000000c 	.word	0x2000000c
 800592c:	20000070 	.word	0x20000070

08005930 <__swhatbuf_r>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	460e      	mov	r6, r1
 8005934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005938:	2900      	cmp	r1, #0
 800593a:	b090      	sub	sp, #64	; 0x40
 800593c:	4614      	mov	r4, r2
 800593e:	461d      	mov	r5, r3
 8005940:	da07      	bge.n	8005952 <__swhatbuf_r+0x22>
 8005942:	2300      	movs	r3, #0
 8005944:	602b      	str	r3, [r5, #0]
 8005946:	89b3      	ldrh	r3, [r6, #12]
 8005948:	061a      	lsls	r2, r3, #24
 800594a:	d410      	bmi.n	800596e <__swhatbuf_r+0x3e>
 800594c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005950:	e00e      	b.n	8005970 <__swhatbuf_r+0x40>
 8005952:	aa01      	add	r2, sp, #4
 8005954:	f000 fda4 	bl	80064a0 <_fstat_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	dbf2      	blt.n	8005942 <__swhatbuf_r+0x12>
 800595c:	9a02      	ldr	r2, [sp, #8]
 800595e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005962:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005966:	425a      	negs	r2, r3
 8005968:	415a      	adcs	r2, r3
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	e7ee      	b.n	800594c <__swhatbuf_r+0x1c>
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	2000      	movs	r0, #0
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	b010      	add	sp, #64	; 0x40
 8005976:	bd70      	pop	{r4, r5, r6, pc}

08005978 <__smakebuf_r>:
 8005978:	898b      	ldrh	r3, [r1, #12]
 800597a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800597c:	079d      	lsls	r5, r3, #30
 800597e:	4606      	mov	r6, r0
 8005980:	460c      	mov	r4, r1
 8005982:	d507      	bpl.n	8005994 <__smakebuf_r+0x1c>
 8005984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	2301      	movs	r3, #1
 800598e:	6163      	str	r3, [r4, #20]
 8005990:	b002      	add	sp, #8
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	ab01      	add	r3, sp, #4
 8005996:	466a      	mov	r2, sp
 8005998:	f7ff ffca 	bl	8005930 <__swhatbuf_r>
 800599c:	9900      	ldr	r1, [sp, #0]
 800599e:	4605      	mov	r5, r0
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 fb69 	bl	8006078 <_malloc_r>
 80059a6:	b948      	cbnz	r0, 80059bc <__smakebuf_r+0x44>
 80059a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ac:	059a      	lsls	r2, r3, #22
 80059ae:	d4ef      	bmi.n	8005990 <__smakebuf_r+0x18>
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	e7e3      	b.n	8005984 <__smakebuf_r+0xc>
 80059bc:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <__smakebuf_r+0x7c>)
 80059be:	62b3      	str	r3, [r6, #40]	; 0x28
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	6020      	str	r0, [r4, #0]
 80059c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	9b00      	ldr	r3, [sp, #0]
 80059cc:	6163      	str	r3, [r4, #20]
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	6120      	str	r0, [r4, #16]
 80059d2:	b15b      	cbz	r3, 80059ec <__smakebuf_r+0x74>
 80059d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d8:	4630      	mov	r0, r6
 80059da:	f000 fd73 	bl	80064c4 <_isatty_r>
 80059de:	b128      	cbz	r0, 80059ec <__smakebuf_r+0x74>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	431d      	orrs	r5, r3
 80059f0:	81a5      	strh	r5, [r4, #12]
 80059f2:	e7cd      	b.n	8005990 <__smakebuf_r+0x18>
 80059f4:	08005781 	.word	0x08005781

080059f8 <malloc>:
 80059f8:	4b02      	ldr	r3, [pc, #8]	; (8005a04 <malloc+0xc>)
 80059fa:	4601      	mov	r1, r0
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	f000 bb3b 	b.w	8006078 <_malloc_r>
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c

08005a08 <memcpy>:
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	1e43      	subs	r3, r0, #1
 8005a0c:	440a      	add	r2, r1
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	d100      	bne.n	8005a14 <memcpy+0xc>
 8005a12:	bd10      	pop	{r4, pc}
 8005a14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1c:	e7f7      	b.n	8005a0e <memcpy+0x6>

08005a1e <_Balloc>:
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a22:	4604      	mov	r4, r0
 8005a24:	460e      	mov	r6, r1
 8005a26:	b93d      	cbnz	r5, 8005a38 <_Balloc+0x1a>
 8005a28:	2010      	movs	r0, #16
 8005a2a:	f7ff ffe5 	bl	80059f8 <malloc>
 8005a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8005a30:	6045      	str	r5, [r0, #4]
 8005a32:	6085      	str	r5, [r0, #8]
 8005a34:	6005      	str	r5, [r0, #0]
 8005a36:	60c5      	str	r5, [r0, #12]
 8005a38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a3a:	68eb      	ldr	r3, [r5, #12]
 8005a3c:	b183      	cbz	r3, 8005a60 <_Balloc+0x42>
 8005a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a46:	b9b8      	cbnz	r0, 8005a78 <_Balloc+0x5a>
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f506 	lsl.w	r5, r1, r6
 8005a4e:	1d6a      	adds	r2, r5, #5
 8005a50:	0092      	lsls	r2, r2, #2
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 fab4 	bl	8005fc0 <_calloc_r>
 8005a58:	b160      	cbz	r0, 8005a74 <_Balloc+0x56>
 8005a5a:	6046      	str	r6, [r0, #4]
 8005a5c:	6085      	str	r5, [r0, #8]
 8005a5e:	e00e      	b.n	8005a7e <_Balloc+0x60>
 8005a60:	2221      	movs	r2, #33	; 0x21
 8005a62:	2104      	movs	r1, #4
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 faab 	bl	8005fc0 <_calloc_r>
 8005a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a6c:	60e8      	str	r0, [r5, #12]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e4      	bne.n	8005a3e <_Balloc+0x20>
 8005a74:	2000      	movs	r0, #0
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	6802      	ldr	r2, [r0, #0]
 8005a7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6103      	str	r3, [r0, #16]
 8005a82:	60c3      	str	r3, [r0, #12]
 8005a84:	bd70      	pop	{r4, r5, r6, pc}

08005a86 <_Bfree>:
 8005a86:	b570      	push	{r4, r5, r6, lr}
 8005a88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	b93c      	cbnz	r4, 8005aa0 <_Bfree+0x1a>
 8005a90:	2010      	movs	r0, #16
 8005a92:	f7ff ffb1 	bl	80059f8 <malloc>
 8005a96:	6270      	str	r0, [r6, #36]	; 0x24
 8005a98:	6044      	str	r4, [r0, #4]
 8005a9a:	6084      	str	r4, [r0, #8]
 8005a9c:	6004      	str	r4, [r0, #0]
 8005a9e:	60c4      	str	r4, [r0, #12]
 8005aa0:	b13d      	cbz	r5, 8005ab2 <_Bfree+0x2c>
 8005aa2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005aa4:	686a      	ldr	r2, [r5, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005aac:	6029      	str	r1, [r5, #0]
 8005aae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}

08005ab4 <__multadd>:
 8005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab8:	690d      	ldr	r5, [r1, #16]
 8005aba:	461f      	mov	r7, r3
 8005abc:	4606      	mov	r6, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	f101 0e14 	add.w	lr, r1, #20
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f8de 0000 	ldr.w	r0, [lr]
 8005aca:	b281      	uxth	r1, r0
 8005acc:	fb02 7101 	mla	r1, r2, r1, r7
 8005ad0:	0c0f      	lsrs	r7, r1, #16
 8005ad2:	0c00      	lsrs	r0, r0, #16
 8005ad4:	fb02 7000 	mla	r0, r2, r0, r7
 8005ad8:	b289      	uxth	r1, r1
 8005ada:	3301      	adds	r3, #1
 8005adc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005ae0:	429d      	cmp	r5, r3
 8005ae2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005ae6:	f84e 1b04 	str.w	r1, [lr], #4
 8005aea:	dcec      	bgt.n	8005ac6 <__multadd+0x12>
 8005aec:	b1d7      	cbz	r7, 8005b24 <__multadd+0x70>
 8005aee:	68a3      	ldr	r3, [r4, #8]
 8005af0:	429d      	cmp	r5, r3
 8005af2:	db12      	blt.n	8005b1a <__multadd+0x66>
 8005af4:	6861      	ldr	r1, [r4, #4]
 8005af6:	4630      	mov	r0, r6
 8005af8:	3101      	adds	r1, #1
 8005afa:	f7ff ff90 	bl	8005a1e <_Balloc>
 8005afe:	6922      	ldr	r2, [r4, #16]
 8005b00:	3202      	adds	r2, #2
 8005b02:	f104 010c 	add.w	r1, r4, #12
 8005b06:	4680      	mov	r8, r0
 8005b08:	0092      	lsls	r2, r2, #2
 8005b0a:	300c      	adds	r0, #12
 8005b0c:	f7ff ff7c 	bl	8005a08 <memcpy>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7ff ffb7 	bl	8005a86 <_Bfree>
 8005b18:	4644      	mov	r4, r8
 8005b1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b1e:	3501      	adds	r5, #1
 8005b20:	615f      	str	r7, [r3, #20]
 8005b22:	6125      	str	r5, [r4, #16]
 8005b24:	4620      	mov	r0, r4
 8005b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b2a <__hi0bits>:
 8005b2a:	0c02      	lsrs	r2, r0, #16
 8005b2c:	0412      	lsls	r2, r2, #16
 8005b2e:	4603      	mov	r3, r0
 8005b30:	b9b2      	cbnz	r2, 8005b60 <__hi0bits+0x36>
 8005b32:	0403      	lsls	r3, r0, #16
 8005b34:	2010      	movs	r0, #16
 8005b36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b3a:	bf04      	itt	eq
 8005b3c:	021b      	lsleq	r3, r3, #8
 8005b3e:	3008      	addeq	r0, #8
 8005b40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b44:	bf04      	itt	eq
 8005b46:	011b      	lsleq	r3, r3, #4
 8005b48:	3004      	addeq	r0, #4
 8005b4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b4e:	bf04      	itt	eq
 8005b50:	009b      	lsleq	r3, r3, #2
 8005b52:	3002      	addeq	r0, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	db06      	blt.n	8005b66 <__hi0bits+0x3c>
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	d503      	bpl.n	8005b64 <__hi0bits+0x3a>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	4770      	bx	lr
 8005b60:	2000      	movs	r0, #0
 8005b62:	e7e8      	b.n	8005b36 <__hi0bits+0xc>
 8005b64:	2020      	movs	r0, #32
 8005b66:	4770      	bx	lr

08005b68 <__lo0bits>:
 8005b68:	6803      	ldr	r3, [r0, #0]
 8005b6a:	f013 0207 	ands.w	r2, r3, #7
 8005b6e:	4601      	mov	r1, r0
 8005b70:	d00b      	beq.n	8005b8a <__lo0bits+0x22>
 8005b72:	07da      	lsls	r2, r3, #31
 8005b74:	d423      	bmi.n	8005bbe <__lo0bits+0x56>
 8005b76:	0798      	lsls	r0, r3, #30
 8005b78:	bf49      	itett	mi
 8005b7a:	085b      	lsrmi	r3, r3, #1
 8005b7c:	089b      	lsrpl	r3, r3, #2
 8005b7e:	2001      	movmi	r0, #1
 8005b80:	600b      	strmi	r3, [r1, #0]
 8005b82:	bf5c      	itt	pl
 8005b84:	600b      	strpl	r3, [r1, #0]
 8005b86:	2002      	movpl	r0, #2
 8005b88:	4770      	bx	lr
 8005b8a:	b298      	uxth	r0, r3
 8005b8c:	b9a8      	cbnz	r0, 8005bba <__lo0bits+0x52>
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	2010      	movs	r0, #16
 8005b92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b96:	bf04      	itt	eq
 8005b98:	0a1b      	lsreq	r3, r3, #8
 8005b9a:	3008      	addeq	r0, #8
 8005b9c:	071a      	lsls	r2, r3, #28
 8005b9e:	bf04      	itt	eq
 8005ba0:	091b      	lsreq	r3, r3, #4
 8005ba2:	3004      	addeq	r0, #4
 8005ba4:	079a      	lsls	r2, r3, #30
 8005ba6:	bf04      	itt	eq
 8005ba8:	089b      	lsreq	r3, r3, #2
 8005baa:	3002      	addeq	r0, #2
 8005bac:	07da      	lsls	r2, r3, #31
 8005bae:	d402      	bmi.n	8005bb6 <__lo0bits+0x4e>
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	d006      	beq.n	8005bc2 <__lo0bits+0x5a>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	600b      	str	r3, [r1, #0]
 8005bb8:	4770      	bx	lr
 8005bba:	4610      	mov	r0, r2
 8005bbc:	e7e9      	b.n	8005b92 <__lo0bits+0x2a>
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	4770      	bx	lr
 8005bc2:	2020      	movs	r0, #32
 8005bc4:	4770      	bx	lr

08005bc6 <__i2b>:
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	2101      	movs	r1, #1
 8005bcc:	f7ff ff27 	bl	8005a1e <_Balloc>
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	6144      	str	r4, [r0, #20]
 8005bd4:	6102      	str	r2, [r0, #16]
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <__multiply>:
 8005bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	4614      	mov	r4, r2
 8005bde:	690a      	ldr	r2, [r1, #16]
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	bfb8      	it	lt
 8005be6:	460b      	movlt	r3, r1
 8005be8:	4689      	mov	r9, r1
 8005bea:	bfbc      	itt	lt
 8005bec:	46a1      	movlt	r9, r4
 8005bee:	461c      	movlt	r4, r3
 8005bf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005bf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005bf8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005bfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c00:	eb07 060a 	add.w	r6, r7, sl
 8005c04:	429e      	cmp	r6, r3
 8005c06:	bfc8      	it	gt
 8005c08:	3101      	addgt	r1, #1
 8005c0a:	f7ff ff08 	bl	8005a1e <_Balloc>
 8005c0e:	f100 0514 	add.w	r5, r0, #20
 8005c12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c16:	462b      	mov	r3, r5
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4543      	cmp	r3, r8
 8005c1c:	d316      	bcc.n	8005c4c <__multiply+0x74>
 8005c1e:	f104 0214 	add.w	r2, r4, #20
 8005c22:	f109 0114 	add.w	r1, r9, #20
 8005c26:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005c2a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	9c01      	ldr	r4, [sp, #4]
 8005c32:	4294      	cmp	r4, r2
 8005c34:	4613      	mov	r3, r2
 8005c36:	d80c      	bhi.n	8005c52 <__multiply+0x7a>
 8005c38:	2e00      	cmp	r6, #0
 8005c3a:	dd03      	ble.n	8005c44 <__multiply+0x6c>
 8005c3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d054      	beq.n	8005cee <__multiply+0x116>
 8005c44:	6106      	str	r6, [r0, #16]
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	f843 2b04 	str.w	r2, [r3], #4
 8005c50:	e7e3      	b.n	8005c1a <__multiply+0x42>
 8005c52:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c56:	3204      	adds	r2, #4
 8005c58:	f1ba 0f00 	cmp.w	sl, #0
 8005c5c:	d020      	beq.n	8005ca0 <__multiply+0xc8>
 8005c5e:	46ae      	mov	lr, r5
 8005c60:	4689      	mov	r9, r1
 8005c62:	f04f 0c00 	mov.w	ip, #0
 8005c66:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c6a:	f8be b000 	ldrh.w	fp, [lr]
 8005c6e:	b2a3      	uxth	r3, r4
 8005c70:	fb0a b303 	mla	r3, sl, r3, fp
 8005c74:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005c78:	f8de 4000 	ldr.w	r4, [lr]
 8005c7c:	4463      	add	r3, ip
 8005c7e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005c82:	fb0a c40b 	mla	r4, sl, fp, ip
 8005c86:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c90:	454f      	cmp	r7, r9
 8005c92:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005c96:	f84e 3b04 	str.w	r3, [lr], #4
 8005c9a:	d8e4      	bhi.n	8005c66 <__multiply+0x8e>
 8005c9c:	f8ce c000 	str.w	ip, [lr]
 8005ca0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005ca4:	f1b9 0f00 	cmp.w	r9, #0
 8005ca8:	d01f      	beq.n	8005cea <__multiply+0x112>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	46ae      	mov	lr, r5
 8005cae:	468c      	mov	ip, r1
 8005cb0:	f04f 0a00 	mov.w	sl, #0
 8005cb4:	f8bc 4000 	ldrh.w	r4, [ip]
 8005cb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005cbc:	fb09 b404 	mla	r4, r9, r4, fp
 8005cc0:	44a2      	add	sl, r4
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005cc8:	f84e 3b04 	str.w	r3, [lr], #4
 8005ccc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cd0:	f8be 4000 	ldrh.w	r4, [lr]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	fb09 4303 	mla	r3, r9, r3, r4
 8005cda:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005cde:	4567      	cmp	r7, ip
 8005ce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ce4:	d8e6      	bhi.n	8005cb4 <__multiply+0xdc>
 8005ce6:	f8ce 3000 	str.w	r3, [lr]
 8005cea:	3504      	adds	r5, #4
 8005cec:	e7a0      	b.n	8005c30 <__multiply+0x58>
 8005cee:	3e01      	subs	r6, #1
 8005cf0:	e7a2      	b.n	8005c38 <__multiply+0x60>
	...

08005cf4 <__pow5mult>:
 8005cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf8:	4615      	mov	r5, r2
 8005cfa:	f012 0203 	ands.w	r2, r2, #3
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460f      	mov	r7, r1
 8005d02:	d007      	beq.n	8005d14 <__pow5mult+0x20>
 8005d04:	3a01      	subs	r2, #1
 8005d06:	4c21      	ldr	r4, [pc, #132]	; (8005d8c <__pow5mult+0x98>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d0e:	f7ff fed1 	bl	8005ab4 <__multadd>
 8005d12:	4607      	mov	r7, r0
 8005d14:	10ad      	asrs	r5, r5, #2
 8005d16:	d035      	beq.n	8005d84 <__pow5mult+0x90>
 8005d18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d1a:	b93c      	cbnz	r4, 8005d2c <__pow5mult+0x38>
 8005d1c:	2010      	movs	r0, #16
 8005d1e:	f7ff fe6b 	bl	80059f8 <malloc>
 8005d22:	6270      	str	r0, [r6, #36]	; 0x24
 8005d24:	6044      	str	r4, [r0, #4]
 8005d26:	6084      	str	r4, [r0, #8]
 8005d28:	6004      	str	r4, [r0, #0]
 8005d2a:	60c4      	str	r4, [r0, #12]
 8005d2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d34:	b94c      	cbnz	r4, 8005d4a <__pow5mult+0x56>
 8005d36:	f240 2171 	movw	r1, #625	; 0x271
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff ff43 	bl	8005bc6 <__i2b>
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d46:	4604      	mov	r4, r0
 8005d48:	6003      	str	r3, [r0, #0]
 8005d4a:	f04f 0800 	mov.w	r8, #0
 8005d4e:	07eb      	lsls	r3, r5, #31
 8005d50:	d50a      	bpl.n	8005d68 <__pow5mult+0x74>
 8005d52:	4639      	mov	r1, r7
 8005d54:	4622      	mov	r2, r4
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff ff3e 	bl	8005bd8 <__multiply>
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	4681      	mov	r9, r0
 8005d60:	4630      	mov	r0, r6
 8005d62:	f7ff fe90 	bl	8005a86 <_Bfree>
 8005d66:	464f      	mov	r7, r9
 8005d68:	106d      	asrs	r5, r5, #1
 8005d6a:	d00b      	beq.n	8005d84 <__pow5mult+0x90>
 8005d6c:	6820      	ldr	r0, [r4, #0]
 8005d6e:	b938      	cbnz	r0, 8005d80 <__pow5mult+0x8c>
 8005d70:	4622      	mov	r2, r4
 8005d72:	4621      	mov	r1, r4
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7ff ff2f 	bl	8005bd8 <__multiply>
 8005d7a:	6020      	str	r0, [r4, #0]
 8005d7c:	f8c0 8000 	str.w	r8, [r0]
 8005d80:	4604      	mov	r4, r0
 8005d82:	e7e4      	b.n	8005d4e <__pow5mult+0x5a>
 8005d84:	4638      	mov	r0, r7
 8005d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8a:	bf00      	nop
 8005d8c:	08007380 	.word	0x08007380

08005d90 <__lshift>:
 8005d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d94:	460c      	mov	r4, r1
 8005d96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	6849      	ldr	r1, [r1, #4]
 8005d9e:	eb0a 0903 	add.w	r9, sl, r3
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	4607      	mov	r7, r0
 8005da6:	4616      	mov	r6, r2
 8005da8:	f109 0501 	add.w	r5, r9, #1
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	db31      	blt.n	8005e14 <__lshift+0x84>
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff fe34 	bl	8005a1e <_Balloc>
 8005db6:	2200      	movs	r2, #0
 8005db8:	4680      	mov	r8, r0
 8005dba:	f100 0314 	add.w	r3, r0, #20
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4552      	cmp	r2, sl
 8005dc2:	db2a      	blt.n	8005e1a <__lshift+0x8a>
 8005dc4:	6920      	ldr	r0, [r4, #16]
 8005dc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dca:	f104 0114 	add.w	r1, r4, #20
 8005dce:	f016 021f 	ands.w	r2, r6, #31
 8005dd2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005dd6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005dda:	d022      	beq.n	8005e22 <__lshift+0x92>
 8005ddc:	f1c2 0c20 	rsb	ip, r2, #32
 8005de0:	2000      	movs	r0, #0
 8005de2:	680e      	ldr	r6, [r1, #0]
 8005de4:	4096      	lsls	r6, r2
 8005de6:	4330      	orrs	r0, r6
 8005de8:	f843 0b04 	str.w	r0, [r3], #4
 8005dec:	f851 0b04 	ldr.w	r0, [r1], #4
 8005df0:	458e      	cmp	lr, r1
 8005df2:	fa20 f00c 	lsr.w	r0, r0, ip
 8005df6:	d8f4      	bhi.n	8005de2 <__lshift+0x52>
 8005df8:	6018      	str	r0, [r3, #0]
 8005dfa:	b108      	cbz	r0, 8005e00 <__lshift+0x70>
 8005dfc:	f109 0502 	add.w	r5, r9, #2
 8005e00:	3d01      	subs	r5, #1
 8005e02:	4638      	mov	r0, r7
 8005e04:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e08:	4621      	mov	r1, r4
 8005e0a:	f7ff fe3c 	bl	8005a86 <_Bfree>
 8005e0e:	4640      	mov	r0, r8
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	3101      	adds	r1, #1
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	e7c8      	b.n	8005dac <__lshift+0x1c>
 8005e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e1e:	3201      	adds	r2, #1
 8005e20:	e7ce      	b.n	8005dc0 <__lshift+0x30>
 8005e22:	3b04      	subs	r3, #4
 8005e24:	f851 2b04 	ldr.w	r2, [r1], #4
 8005e28:	f843 2f04 	str.w	r2, [r3, #4]!
 8005e2c:	458e      	cmp	lr, r1
 8005e2e:	d8f9      	bhi.n	8005e24 <__lshift+0x94>
 8005e30:	e7e6      	b.n	8005e00 <__lshift+0x70>

08005e32 <__mcmp>:
 8005e32:	6903      	ldr	r3, [r0, #16]
 8005e34:	690a      	ldr	r2, [r1, #16]
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	b530      	push	{r4, r5, lr}
 8005e3a:	d10c      	bne.n	8005e56 <__mcmp+0x24>
 8005e3c:	0092      	lsls	r2, r2, #2
 8005e3e:	3014      	adds	r0, #20
 8005e40:	3114      	adds	r1, #20
 8005e42:	1884      	adds	r4, r0, r2
 8005e44:	4411      	add	r1, r2
 8005e46:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e4a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e4e:	4295      	cmp	r5, r2
 8005e50:	d003      	beq.n	8005e5a <__mcmp+0x28>
 8005e52:	d305      	bcc.n	8005e60 <__mcmp+0x2e>
 8005e54:	2301      	movs	r3, #1
 8005e56:	4618      	mov	r0, r3
 8005e58:	bd30      	pop	{r4, r5, pc}
 8005e5a:	42a0      	cmp	r0, r4
 8005e5c:	d3f3      	bcc.n	8005e46 <__mcmp+0x14>
 8005e5e:	e7fa      	b.n	8005e56 <__mcmp+0x24>
 8005e60:	f04f 33ff 	mov.w	r3, #4294967295
 8005e64:	e7f7      	b.n	8005e56 <__mcmp+0x24>

08005e66 <__mdiff>:
 8005e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4628      	mov	r0, r5
 8005e72:	4614      	mov	r4, r2
 8005e74:	f7ff ffdd 	bl	8005e32 <__mcmp>
 8005e78:	1e06      	subs	r6, r0, #0
 8005e7a:	d108      	bne.n	8005e8e <__mdiff+0x28>
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4638      	mov	r0, r7
 8005e80:	f7ff fdcd 	bl	8005a1e <_Balloc>
 8005e84:	2301      	movs	r3, #1
 8005e86:	6103      	str	r3, [r0, #16]
 8005e88:	6146      	str	r6, [r0, #20]
 8005e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8e:	bfa4      	itt	ge
 8005e90:	4623      	movge	r3, r4
 8005e92:	462c      	movge	r4, r5
 8005e94:	4638      	mov	r0, r7
 8005e96:	6861      	ldr	r1, [r4, #4]
 8005e98:	bfa6      	itte	ge
 8005e9a:	461d      	movge	r5, r3
 8005e9c:	2600      	movge	r6, #0
 8005e9e:	2601      	movlt	r6, #1
 8005ea0:	f7ff fdbd 	bl	8005a1e <_Balloc>
 8005ea4:	692b      	ldr	r3, [r5, #16]
 8005ea6:	60c6      	str	r6, [r0, #12]
 8005ea8:	6926      	ldr	r6, [r4, #16]
 8005eaa:	f105 0914 	add.w	r9, r5, #20
 8005eae:	f104 0214 	add.w	r2, r4, #20
 8005eb2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005eb6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005eba:	f100 0514 	add.w	r5, r0, #20
 8005ebe:	f04f 0c00 	mov.w	ip, #0
 8005ec2:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ec6:	f859 4b04 	ldr.w	r4, [r9], #4
 8005eca:	fa1c f18a 	uxtah	r1, ip, sl
 8005ece:	b2a3      	uxth	r3, r4
 8005ed0:	1ac9      	subs	r1, r1, r3
 8005ed2:	0c23      	lsrs	r3, r4, #16
 8005ed4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005ed8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005edc:	b289      	uxth	r1, r1
 8005ede:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ee2:	45c8      	cmp	r8, r9
 8005ee4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ee8:	4696      	mov	lr, r2
 8005eea:	f845 3b04 	str.w	r3, [r5], #4
 8005eee:	d8e8      	bhi.n	8005ec2 <__mdiff+0x5c>
 8005ef0:	45be      	cmp	lr, r7
 8005ef2:	d305      	bcc.n	8005f00 <__mdiff+0x9a>
 8005ef4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005ef8:	b18b      	cbz	r3, 8005f1e <__mdiff+0xb8>
 8005efa:	6106      	str	r6, [r0, #16]
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005f04:	fa1c f381 	uxtah	r3, ip, r1
 8005f08:	141a      	asrs	r2, r3, #16
 8005f0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f18:	f845 3b04 	str.w	r3, [r5], #4
 8005f1c:	e7e8      	b.n	8005ef0 <__mdiff+0x8a>
 8005f1e:	3e01      	subs	r6, #1
 8005f20:	e7e8      	b.n	8005ef4 <__mdiff+0x8e>

08005f22 <__d2b>:
 8005f22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f26:	460e      	mov	r6, r1
 8005f28:	2101      	movs	r1, #1
 8005f2a:	ec59 8b10 	vmov	r8, r9, d0
 8005f2e:	4615      	mov	r5, r2
 8005f30:	f7ff fd75 	bl	8005a1e <_Balloc>
 8005f34:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005f38:	4607      	mov	r7, r0
 8005f3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f3e:	bb34      	cbnz	r4, 8005f8e <__d2b+0x6c>
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	f1b8 0f00 	cmp.w	r8, #0
 8005f46:	d027      	beq.n	8005f98 <__d2b+0x76>
 8005f48:	a802      	add	r0, sp, #8
 8005f4a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005f4e:	f7ff fe0b 	bl	8005b68 <__lo0bits>
 8005f52:	9900      	ldr	r1, [sp, #0]
 8005f54:	b1f0      	cbz	r0, 8005f94 <__d2b+0x72>
 8005f56:	9a01      	ldr	r2, [sp, #4]
 8005f58:	f1c0 0320 	rsb	r3, r0, #32
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	430b      	orrs	r3, r1
 8005f62:	40c2      	lsrs	r2, r0
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	9201      	str	r2, [sp, #4]
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf14      	ite	ne
 8005f70:	2102      	movne	r1, #2
 8005f72:	2101      	moveq	r1, #1
 8005f74:	6139      	str	r1, [r7, #16]
 8005f76:	b1c4      	cbz	r4, 8005faa <__d2b+0x88>
 8005f78:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005f7c:	4404      	add	r4, r0
 8005f7e:	6034      	str	r4, [r6, #0]
 8005f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f84:	6028      	str	r0, [r5, #0]
 8005f86:	4638      	mov	r0, r7
 8005f88:	b003      	add	sp, #12
 8005f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f92:	e7d5      	b.n	8005f40 <__d2b+0x1e>
 8005f94:	6179      	str	r1, [r7, #20]
 8005f96:	e7e7      	b.n	8005f68 <__d2b+0x46>
 8005f98:	a801      	add	r0, sp, #4
 8005f9a:	f7ff fde5 	bl	8005b68 <__lo0bits>
 8005f9e:	9b01      	ldr	r3, [sp, #4]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	6139      	str	r1, [r7, #16]
 8005fa6:	3020      	adds	r0, #32
 8005fa8:	e7e5      	b.n	8005f76 <__d2b+0x54>
 8005faa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005fae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fb2:	6030      	str	r0, [r6, #0]
 8005fb4:	6918      	ldr	r0, [r3, #16]
 8005fb6:	f7ff fdb8 	bl	8005b2a <__hi0bits>
 8005fba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005fbe:	e7e1      	b.n	8005f84 <__d2b+0x62>

08005fc0 <_calloc_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	fb02 f401 	mul.w	r4, r2, r1
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	f000 f856 	bl	8006078 <_malloc_r>
 8005fcc:	4605      	mov	r5, r0
 8005fce:	b118      	cbz	r0, 8005fd8 <_calloc_r+0x18>
 8005fd0:	4622      	mov	r2, r4
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	f7fd ff16 	bl	8003e04 <memset>
 8005fd8:	4628      	mov	r0, r5
 8005fda:	bd38      	pop	{r3, r4, r5, pc}

08005fdc <_free_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4605      	mov	r5, r0
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	d045      	beq.n	8006070 <_free_r+0x94>
 8005fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe8:	1f0c      	subs	r4, r1, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bfb8      	it	lt
 8005fee:	18e4      	addlt	r4, r4, r3
 8005ff0:	f000 fa9c 	bl	800652c <__malloc_lock>
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	; (8006074 <_free_r+0x98>)
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	b933      	cbnz	r3, 800600a <_free_r+0x2e>
 8005ffc:	6063      	str	r3, [r4, #4]
 8005ffe:	6014      	str	r4, [r2, #0]
 8006000:	4628      	mov	r0, r5
 8006002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006006:	f000 ba92 	b.w	800652e <__malloc_unlock>
 800600a:	42a3      	cmp	r3, r4
 800600c:	d90c      	bls.n	8006028 <_free_r+0x4c>
 800600e:	6821      	ldr	r1, [r4, #0]
 8006010:	1862      	adds	r2, r4, r1
 8006012:	4293      	cmp	r3, r2
 8006014:	bf04      	itt	eq
 8006016:	681a      	ldreq	r2, [r3, #0]
 8006018:	685b      	ldreq	r3, [r3, #4]
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	bf04      	itt	eq
 800601e:	1852      	addeq	r2, r2, r1
 8006020:	6022      	streq	r2, [r4, #0]
 8006022:	6004      	str	r4, [r0, #0]
 8006024:	e7ec      	b.n	8006000 <_free_r+0x24>
 8006026:	4613      	mov	r3, r2
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	b10a      	cbz	r2, 8006030 <_free_r+0x54>
 800602c:	42a2      	cmp	r2, r4
 800602e:	d9fa      	bls.n	8006026 <_free_r+0x4a>
 8006030:	6819      	ldr	r1, [r3, #0]
 8006032:	1858      	adds	r0, r3, r1
 8006034:	42a0      	cmp	r0, r4
 8006036:	d10b      	bne.n	8006050 <_free_r+0x74>
 8006038:	6820      	ldr	r0, [r4, #0]
 800603a:	4401      	add	r1, r0
 800603c:	1858      	adds	r0, r3, r1
 800603e:	4282      	cmp	r2, r0
 8006040:	6019      	str	r1, [r3, #0]
 8006042:	d1dd      	bne.n	8006000 <_free_r+0x24>
 8006044:	6810      	ldr	r0, [r2, #0]
 8006046:	6852      	ldr	r2, [r2, #4]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	4401      	add	r1, r0
 800604c:	6019      	str	r1, [r3, #0]
 800604e:	e7d7      	b.n	8006000 <_free_r+0x24>
 8006050:	d902      	bls.n	8006058 <_free_r+0x7c>
 8006052:	230c      	movs	r3, #12
 8006054:	602b      	str	r3, [r5, #0]
 8006056:	e7d3      	b.n	8006000 <_free_r+0x24>
 8006058:	6820      	ldr	r0, [r4, #0]
 800605a:	1821      	adds	r1, r4, r0
 800605c:	428a      	cmp	r2, r1
 800605e:	bf04      	itt	eq
 8006060:	6811      	ldreq	r1, [r2, #0]
 8006062:	6852      	ldreq	r2, [r2, #4]
 8006064:	6062      	str	r2, [r4, #4]
 8006066:	bf04      	itt	eq
 8006068:	1809      	addeq	r1, r1, r0
 800606a:	6021      	streq	r1, [r4, #0]
 800606c:	605c      	str	r4, [r3, #4]
 800606e:	e7c7      	b.n	8006000 <_free_r+0x24>
 8006070:	bd38      	pop	{r3, r4, r5, pc}
 8006072:	bf00      	nop
 8006074:	20000200 	.word	0x20000200

08006078 <_malloc_r>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	1ccd      	adds	r5, r1, #3
 800607c:	f025 0503 	bic.w	r5, r5, #3
 8006080:	3508      	adds	r5, #8
 8006082:	2d0c      	cmp	r5, #12
 8006084:	bf38      	it	cc
 8006086:	250c      	movcc	r5, #12
 8006088:	2d00      	cmp	r5, #0
 800608a:	4606      	mov	r6, r0
 800608c:	db01      	blt.n	8006092 <_malloc_r+0x1a>
 800608e:	42a9      	cmp	r1, r5
 8006090:	d903      	bls.n	800609a <_malloc_r+0x22>
 8006092:	230c      	movs	r3, #12
 8006094:	6033      	str	r3, [r6, #0]
 8006096:	2000      	movs	r0, #0
 8006098:	bd70      	pop	{r4, r5, r6, pc}
 800609a:	f000 fa47 	bl	800652c <__malloc_lock>
 800609e:	4a23      	ldr	r2, [pc, #140]	; (800612c <_malloc_r+0xb4>)
 80060a0:	6814      	ldr	r4, [r2, #0]
 80060a2:	4621      	mov	r1, r4
 80060a4:	b991      	cbnz	r1, 80060cc <_malloc_r+0x54>
 80060a6:	4c22      	ldr	r4, [pc, #136]	; (8006130 <_malloc_r+0xb8>)
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	b91b      	cbnz	r3, 80060b4 <_malloc_r+0x3c>
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 f981 	bl	80063b4 <_sbrk_r>
 80060b2:	6020      	str	r0, [r4, #0]
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f000 f97c 	bl	80063b4 <_sbrk_r>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d126      	bne.n	800610e <_malloc_r+0x96>
 80060c0:	230c      	movs	r3, #12
 80060c2:	6033      	str	r3, [r6, #0]
 80060c4:	4630      	mov	r0, r6
 80060c6:	f000 fa32 	bl	800652e <__malloc_unlock>
 80060ca:	e7e4      	b.n	8006096 <_malloc_r+0x1e>
 80060cc:	680b      	ldr	r3, [r1, #0]
 80060ce:	1b5b      	subs	r3, r3, r5
 80060d0:	d41a      	bmi.n	8006108 <_malloc_r+0x90>
 80060d2:	2b0b      	cmp	r3, #11
 80060d4:	d90f      	bls.n	80060f6 <_malloc_r+0x7e>
 80060d6:	600b      	str	r3, [r1, #0]
 80060d8:	50cd      	str	r5, [r1, r3]
 80060da:	18cc      	adds	r4, r1, r3
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 fa26 	bl	800652e <__malloc_unlock>
 80060e2:	f104 000b 	add.w	r0, r4, #11
 80060e6:	1d23      	adds	r3, r4, #4
 80060e8:	f020 0007 	bic.w	r0, r0, #7
 80060ec:	1ac3      	subs	r3, r0, r3
 80060ee:	d01b      	beq.n	8006128 <_malloc_r+0xb0>
 80060f0:	425a      	negs	r2, r3
 80060f2:	50e2      	str	r2, [r4, r3]
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
 80060f6:	428c      	cmp	r4, r1
 80060f8:	bf0d      	iteet	eq
 80060fa:	6863      	ldreq	r3, [r4, #4]
 80060fc:	684b      	ldrne	r3, [r1, #4]
 80060fe:	6063      	strne	r3, [r4, #4]
 8006100:	6013      	streq	r3, [r2, #0]
 8006102:	bf18      	it	ne
 8006104:	460c      	movne	r4, r1
 8006106:	e7e9      	b.n	80060dc <_malloc_r+0x64>
 8006108:	460c      	mov	r4, r1
 800610a:	6849      	ldr	r1, [r1, #4]
 800610c:	e7ca      	b.n	80060a4 <_malloc_r+0x2c>
 800610e:	1cc4      	adds	r4, r0, #3
 8006110:	f024 0403 	bic.w	r4, r4, #3
 8006114:	42a0      	cmp	r0, r4
 8006116:	d005      	beq.n	8006124 <_malloc_r+0xac>
 8006118:	1a21      	subs	r1, r4, r0
 800611a:	4630      	mov	r0, r6
 800611c:	f000 f94a 	bl	80063b4 <_sbrk_r>
 8006120:	3001      	adds	r0, #1
 8006122:	d0cd      	beq.n	80060c0 <_malloc_r+0x48>
 8006124:	6025      	str	r5, [r4, #0]
 8006126:	e7d9      	b.n	80060dc <_malloc_r+0x64>
 8006128:	bd70      	pop	{r4, r5, r6, pc}
 800612a:	bf00      	nop
 800612c:	20000200 	.word	0x20000200
 8006130:	20000204 	.word	0x20000204

08006134 <__sfputc_r>:
 8006134:	6893      	ldr	r3, [r2, #8]
 8006136:	3b01      	subs	r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	b410      	push	{r4}
 800613c:	6093      	str	r3, [r2, #8]
 800613e:	da09      	bge.n	8006154 <__sfputc_r+0x20>
 8006140:	6994      	ldr	r4, [r2, #24]
 8006142:	42a3      	cmp	r3, r4
 8006144:	db02      	blt.n	800614c <__sfputc_r+0x18>
 8006146:	b2cb      	uxtb	r3, r1
 8006148:	2b0a      	cmp	r3, #10
 800614a:	d103      	bne.n	8006154 <__sfputc_r+0x20>
 800614c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006150:	f7fe bb48 	b.w	80047e4 <__swbuf_r>
 8006154:	6813      	ldr	r3, [r2, #0]
 8006156:	1c58      	adds	r0, r3, #1
 8006158:	6010      	str	r0, [r2, #0]
 800615a:	7019      	strb	r1, [r3, #0]
 800615c:	b2c8      	uxtb	r0, r1
 800615e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006162:	4770      	bx	lr

08006164 <__sfputs_r>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	4606      	mov	r6, r0
 8006168:	460f      	mov	r7, r1
 800616a:	4614      	mov	r4, r2
 800616c:	18d5      	adds	r5, r2, r3
 800616e:	42ac      	cmp	r4, r5
 8006170:	d101      	bne.n	8006176 <__sfputs_r+0x12>
 8006172:	2000      	movs	r0, #0
 8006174:	e007      	b.n	8006186 <__sfputs_r+0x22>
 8006176:	463a      	mov	r2, r7
 8006178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617c:	4630      	mov	r0, r6
 800617e:	f7ff ffd9 	bl	8006134 <__sfputc_r>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d1f3      	bne.n	800616e <__sfputs_r+0xa>
 8006186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006188 <_vfiprintf_r>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	b09d      	sub	sp, #116	; 0x74
 800618e:	460c      	mov	r4, r1
 8006190:	4617      	mov	r7, r2
 8006192:	9303      	str	r3, [sp, #12]
 8006194:	4606      	mov	r6, r0
 8006196:	b118      	cbz	r0, 80061a0 <_vfiprintf_r+0x18>
 8006198:	6983      	ldr	r3, [r0, #24]
 800619a:	b90b      	cbnz	r3, 80061a0 <_vfiprintf_r+0x18>
 800619c:	f7ff fb30 	bl	8005800 <__sinit>
 80061a0:	4b7c      	ldr	r3, [pc, #496]	; (8006394 <_vfiprintf_r+0x20c>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d157      	bne.n	8006256 <_vfiprintf_r+0xce>
 80061a6:	6874      	ldr	r4, [r6, #4]
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	0718      	lsls	r0, r3, #28
 80061ac:	d55d      	bpl.n	800626a <_vfiprintf_r+0xe2>
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05a      	beq.n	800626a <_vfiprintf_r+0xe2>
 80061b4:	2300      	movs	r3, #0
 80061b6:	9309      	str	r3, [sp, #36]	; 0x24
 80061b8:	2320      	movs	r3, #32
 80061ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061be:	2330      	movs	r3, #48	; 0x30
 80061c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061c4:	f04f 0b01 	mov.w	fp, #1
 80061c8:	46b8      	mov	r8, r7
 80061ca:	4645      	mov	r5, r8
 80061cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d155      	bne.n	8006280 <_vfiprintf_r+0xf8>
 80061d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80061d8:	d00b      	beq.n	80061f2 <_vfiprintf_r+0x6a>
 80061da:	4653      	mov	r3, sl
 80061dc:	463a      	mov	r2, r7
 80061de:	4621      	mov	r1, r4
 80061e0:	4630      	mov	r0, r6
 80061e2:	f7ff ffbf 	bl	8006164 <__sfputs_r>
 80061e6:	3001      	adds	r0, #1
 80061e8:	f000 80c4 	beq.w	8006374 <_vfiprintf_r+0x1ec>
 80061ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ee:	4453      	add	r3, sl
 80061f0:	9309      	str	r3, [sp, #36]	; 0x24
 80061f2:	f898 3000 	ldrb.w	r3, [r8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80bc 	beq.w	8006374 <_vfiprintf_r+0x1ec>
 80061fc:	2300      	movs	r3, #0
 80061fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	9307      	str	r3, [sp, #28]
 8006206:	9205      	str	r2, [sp, #20]
 8006208:	9306      	str	r3, [sp, #24]
 800620a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800620e:	931a      	str	r3, [sp, #104]	; 0x68
 8006210:	2205      	movs	r2, #5
 8006212:	7829      	ldrb	r1, [r5, #0]
 8006214:	4860      	ldr	r0, [pc, #384]	; (8006398 <_vfiprintf_r+0x210>)
 8006216:	f7f9 ffe3 	bl	80001e0 <memchr>
 800621a:	f105 0801 	add.w	r8, r5, #1
 800621e:	9b04      	ldr	r3, [sp, #16]
 8006220:	2800      	cmp	r0, #0
 8006222:	d131      	bne.n	8006288 <_vfiprintf_r+0x100>
 8006224:	06d9      	lsls	r1, r3, #27
 8006226:	bf44      	itt	mi
 8006228:	2220      	movmi	r2, #32
 800622a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800622e:	071a      	lsls	r2, r3, #28
 8006230:	bf44      	itt	mi
 8006232:	222b      	movmi	r2, #43	; 0x2b
 8006234:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006238:	782a      	ldrb	r2, [r5, #0]
 800623a:	2a2a      	cmp	r2, #42	; 0x2a
 800623c:	d02c      	beq.n	8006298 <_vfiprintf_r+0x110>
 800623e:	9a07      	ldr	r2, [sp, #28]
 8006240:	2100      	movs	r1, #0
 8006242:	200a      	movs	r0, #10
 8006244:	46a8      	mov	r8, r5
 8006246:	3501      	adds	r5, #1
 8006248:	f898 3000 	ldrb.w	r3, [r8]
 800624c:	3b30      	subs	r3, #48	; 0x30
 800624e:	2b09      	cmp	r3, #9
 8006250:	d96d      	bls.n	800632e <_vfiprintf_r+0x1a6>
 8006252:	b371      	cbz	r1, 80062b2 <_vfiprintf_r+0x12a>
 8006254:	e026      	b.n	80062a4 <_vfiprintf_r+0x11c>
 8006256:	4b51      	ldr	r3, [pc, #324]	; (800639c <_vfiprintf_r+0x214>)
 8006258:	429c      	cmp	r4, r3
 800625a:	d101      	bne.n	8006260 <_vfiprintf_r+0xd8>
 800625c:	68b4      	ldr	r4, [r6, #8]
 800625e:	e7a3      	b.n	80061a8 <_vfiprintf_r+0x20>
 8006260:	4b4f      	ldr	r3, [pc, #316]	; (80063a0 <_vfiprintf_r+0x218>)
 8006262:	429c      	cmp	r4, r3
 8006264:	bf08      	it	eq
 8006266:	68f4      	ldreq	r4, [r6, #12]
 8006268:	e79e      	b.n	80061a8 <_vfiprintf_r+0x20>
 800626a:	4621      	mov	r1, r4
 800626c:	4630      	mov	r0, r6
 800626e:	f7fe fb0b 	bl	8004888 <__swsetup_r>
 8006272:	2800      	cmp	r0, #0
 8006274:	d09e      	beq.n	80061b4 <_vfiprintf_r+0x2c>
 8006276:	f04f 30ff 	mov.w	r0, #4294967295
 800627a:	b01d      	add	sp, #116	; 0x74
 800627c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006280:	2b25      	cmp	r3, #37	; 0x25
 8006282:	d0a7      	beq.n	80061d4 <_vfiprintf_r+0x4c>
 8006284:	46a8      	mov	r8, r5
 8006286:	e7a0      	b.n	80061ca <_vfiprintf_r+0x42>
 8006288:	4a43      	ldr	r2, [pc, #268]	; (8006398 <_vfiprintf_r+0x210>)
 800628a:	1a80      	subs	r0, r0, r2
 800628c:	fa0b f000 	lsl.w	r0, fp, r0
 8006290:	4318      	orrs	r0, r3
 8006292:	9004      	str	r0, [sp, #16]
 8006294:	4645      	mov	r5, r8
 8006296:	e7bb      	b.n	8006210 <_vfiprintf_r+0x88>
 8006298:	9a03      	ldr	r2, [sp, #12]
 800629a:	1d11      	adds	r1, r2, #4
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	9103      	str	r1, [sp, #12]
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	db01      	blt.n	80062a8 <_vfiprintf_r+0x120>
 80062a4:	9207      	str	r2, [sp, #28]
 80062a6:	e004      	b.n	80062b2 <_vfiprintf_r+0x12a>
 80062a8:	4252      	negs	r2, r2
 80062aa:	f043 0302 	orr.w	r3, r3, #2
 80062ae:	9207      	str	r2, [sp, #28]
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	f898 3000 	ldrb.w	r3, [r8]
 80062b6:	2b2e      	cmp	r3, #46	; 0x2e
 80062b8:	d110      	bne.n	80062dc <_vfiprintf_r+0x154>
 80062ba:	f898 3001 	ldrb.w	r3, [r8, #1]
 80062be:	2b2a      	cmp	r3, #42	; 0x2a
 80062c0:	f108 0101 	add.w	r1, r8, #1
 80062c4:	d137      	bne.n	8006336 <_vfiprintf_r+0x1ae>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	1d1a      	adds	r2, r3, #4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	9203      	str	r2, [sp, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bfb8      	it	lt
 80062d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d6:	f108 0802 	add.w	r8, r8, #2
 80062da:	9305      	str	r3, [sp, #20]
 80062dc:	4d31      	ldr	r5, [pc, #196]	; (80063a4 <_vfiprintf_r+0x21c>)
 80062de:	f898 1000 	ldrb.w	r1, [r8]
 80062e2:	2203      	movs	r2, #3
 80062e4:	4628      	mov	r0, r5
 80062e6:	f7f9 ff7b 	bl	80001e0 <memchr>
 80062ea:	b140      	cbz	r0, 80062fe <_vfiprintf_r+0x176>
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	1b40      	subs	r0, r0, r5
 80062f0:	fa03 f000 	lsl.w	r0, r3, r0
 80062f4:	9b04      	ldr	r3, [sp, #16]
 80062f6:	4303      	orrs	r3, r0
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	f108 0801 	add.w	r8, r8, #1
 80062fe:	f898 1000 	ldrb.w	r1, [r8]
 8006302:	4829      	ldr	r0, [pc, #164]	; (80063a8 <_vfiprintf_r+0x220>)
 8006304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006308:	2206      	movs	r2, #6
 800630a:	f108 0701 	add.w	r7, r8, #1
 800630e:	f7f9 ff67 	bl	80001e0 <memchr>
 8006312:	2800      	cmp	r0, #0
 8006314:	d034      	beq.n	8006380 <_vfiprintf_r+0x1f8>
 8006316:	4b25      	ldr	r3, [pc, #148]	; (80063ac <_vfiprintf_r+0x224>)
 8006318:	bb03      	cbnz	r3, 800635c <_vfiprintf_r+0x1d4>
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	3307      	adds	r3, #7
 800631e:	f023 0307 	bic.w	r3, r3, #7
 8006322:	3308      	adds	r3, #8
 8006324:	9303      	str	r3, [sp, #12]
 8006326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006328:	444b      	add	r3, r9
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	e74c      	b.n	80061c8 <_vfiprintf_r+0x40>
 800632e:	fb00 3202 	mla	r2, r0, r2, r3
 8006332:	2101      	movs	r1, #1
 8006334:	e786      	b.n	8006244 <_vfiprintf_r+0xbc>
 8006336:	2300      	movs	r3, #0
 8006338:	9305      	str	r3, [sp, #20]
 800633a:	4618      	mov	r0, r3
 800633c:	250a      	movs	r5, #10
 800633e:	4688      	mov	r8, r1
 8006340:	3101      	adds	r1, #1
 8006342:	f898 2000 	ldrb.w	r2, [r8]
 8006346:	3a30      	subs	r2, #48	; 0x30
 8006348:	2a09      	cmp	r2, #9
 800634a:	d903      	bls.n	8006354 <_vfiprintf_r+0x1cc>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0c5      	beq.n	80062dc <_vfiprintf_r+0x154>
 8006350:	9005      	str	r0, [sp, #20]
 8006352:	e7c3      	b.n	80062dc <_vfiprintf_r+0x154>
 8006354:	fb05 2000 	mla	r0, r5, r0, r2
 8006358:	2301      	movs	r3, #1
 800635a:	e7f0      	b.n	800633e <_vfiprintf_r+0x1b6>
 800635c:	ab03      	add	r3, sp, #12
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4622      	mov	r2, r4
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <_vfiprintf_r+0x228>)
 8006364:	a904      	add	r1, sp, #16
 8006366:	4630      	mov	r0, r6
 8006368:	f7fd fdea 	bl	8003f40 <_printf_float>
 800636c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006370:	4681      	mov	r9, r0
 8006372:	d1d8      	bne.n	8006326 <_vfiprintf_r+0x19e>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	065b      	lsls	r3, r3, #25
 8006378:	f53f af7d 	bmi.w	8006276 <_vfiprintf_r+0xee>
 800637c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800637e:	e77c      	b.n	800627a <_vfiprintf_r+0xf2>
 8006380:	ab03      	add	r3, sp, #12
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4622      	mov	r2, r4
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <_vfiprintf_r+0x228>)
 8006388:	a904      	add	r1, sp, #16
 800638a:	4630      	mov	r0, r6
 800638c:	f7fe f88e 	bl	80044ac <_printf_i>
 8006390:	e7ec      	b.n	800636c <_vfiprintf_r+0x1e4>
 8006392:	bf00      	nop
 8006394:	0800724c 	.word	0x0800724c
 8006398:	0800738c 	.word	0x0800738c
 800639c:	0800726c 	.word	0x0800726c
 80063a0:	0800722c 	.word	0x0800722c
 80063a4:	08007392 	.word	0x08007392
 80063a8:	08007396 	.word	0x08007396
 80063ac:	08003f41 	.word	0x08003f41
 80063b0:	08006165 	.word	0x08006165

080063b4 <_sbrk_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4c06      	ldr	r4, [pc, #24]	; (80063d0 <_sbrk_r+0x1c>)
 80063b8:	2300      	movs	r3, #0
 80063ba:	4605      	mov	r5, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	f7fd fa46 	bl	8003850 <_sbrk>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_sbrk_r+0x1a>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_sbrk_r+0x1a>
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	20000384 	.word	0x20000384

080063d4 <__sread>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	460c      	mov	r4, r1
 80063d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063dc:	f000 f8a8 	bl	8006530 <_read_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	bfab      	itete	ge
 80063e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063e6:	89a3      	ldrhlt	r3, [r4, #12]
 80063e8:	181b      	addge	r3, r3, r0
 80063ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ee:	bfac      	ite	ge
 80063f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063f2:	81a3      	strhlt	r3, [r4, #12]
 80063f4:	bd10      	pop	{r4, pc}

080063f6 <__swrite>:
 80063f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	461f      	mov	r7, r3
 80063fc:	898b      	ldrh	r3, [r1, #12]
 80063fe:	05db      	lsls	r3, r3, #23
 8006400:	4605      	mov	r5, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4616      	mov	r6, r2
 8006406:	d505      	bpl.n	8006414 <__swrite+0x1e>
 8006408:	2302      	movs	r3, #2
 800640a:	2200      	movs	r2, #0
 800640c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006410:	f000 f868 	bl	80064e4 <_lseek_r>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800641a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	4632      	mov	r2, r6
 8006422:	463b      	mov	r3, r7
 8006424:	4628      	mov	r0, r5
 8006426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800642a:	f000 b817 	b.w	800645c <_write_r>

0800642e <__sseek>:
 800642e:	b510      	push	{r4, lr}
 8006430:	460c      	mov	r4, r1
 8006432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006436:	f000 f855 	bl	80064e4 <_lseek_r>
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	bf15      	itete	ne
 8006440:	6560      	strne	r0, [r4, #84]	; 0x54
 8006442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800644a:	81a3      	strheq	r3, [r4, #12]
 800644c:	bf18      	it	ne
 800644e:	81a3      	strhne	r3, [r4, #12]
 8006450:	bd10      	pop	{r4, pc}

08006452 <__sclose>:
 8006452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006456:	f000 b813 	b.w	8006480 <_close_r>
	...

0800645c <_write_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4c07      	ldr	r4, [pc, #28]	; (800647c <_write_r+0x20>)
 8006460:	4605      	mov	r5, r0
 8006462:	4608      	mov	r0, r1
 8006464:	4611      	mov	r1, r2
 8006466:	2200      	movs	r2, #0
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	f7fd f9e2 	bl	8003834 <_write>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_write_r+0x1e>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	b103      	cbz	r3, 800647a <_write_r+0x1e>
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	20000384 	.word	0x20000384

08006480 <_close_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4c06      	ldr	r4, [pc, #24]	; (800649c <_close_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4605      	mov	r5, r0
 8006488:	4608      	mov	r0, r1
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	f7fd f9fa 	bl	8003884 <_close>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_close_r+0x1a>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	b103      	cbz	r3, 800649a <_close_r+0x1a>
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20000384 	.word	0x20000384

080064a0 <_fstat_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4c07      	ldr	r4, [pc, #28]	; (80064c0 <_fstat_r+0x20>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4605      	mov	r5, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	f7fd f9ec 	bl	800388a <_fstat>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d102      	bne.n	80064bc <_fstat_r+0x1c>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	b103      	cbz	r3, 80064bc <_fstat_r+0x1c>
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	bd38      	pop	{r3, r4, r5, pc}
 80064be:	bf00      	nop
 80064c0:	20000384 	.word	0x20000384

080064c4 <_isatty_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4c06      	ldr	r4, [pc, #24]	; (80064e0 <_isatty_r+0x1c>)
 80064c8:	2300      	movs	r3, #0
 80064ca:	4605      	mov	r5, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	f7fd f9e0 	bl	8003894 <_isatty>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_isatty_r+0x1a>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	b103      	cbz	r3, 80064de <_isatty_r+0x1a>
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	20000384 	.word	0x20000384

080064e4 <_lseek_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4c07      	ldr	r4, [pc, #28]	; (8006504 <_lseek_r+0x20>)
 80064e8:	4605      	mov	r5, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	4611      	mov	r1, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	6022      	str	r2, [r4, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fd f9d0 	bl	8003898 <_lseek>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_lseek_r+0x1e>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_lseek_r+0x1e>
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000384 	.word	0x20000384

08006508 <__ascii_mbtowc>:
 8006508:	b082      	sub	sp, #8
 800650a:	b901      	cbnz	r1, 800650e <__ascii_mbtowc+0x6>
 800650c:	a901      	add	r1, sp, #4
 800650e:	b142      	cbz	r2, 8006522 <__ascii_mbtowc+0x1a>
 8006510:	b14b      	cbz	r3, 8006526 <__ascii_mbtowc+0x1e>
 8006512:	7813      	ldrb	r3, [r2, #0]
 8006514:	600b      	str	r3, [r1, #0]
 8006516:	7812      	ldrb	r2, [r2, #0]
 8006518:	1c10      	adds	r0, r2, #0
 800651a:	bf18      	it	ne
 800651c:	2001      	movne	r0, #1
 800651e:	b002      	add	sp, #8
 8006520:	4770      	bx	lr
 8006522:	4610      	mov	r0, r2
 8006524:	e7fb      	b.n	800651e <__ascii_mbtowc+0x16>
 8006526:	f06f 0001 	mvn.w	r0, #1
 800652a:	e7f8      	b.n	800651e <__ascii_mbtowc+0x16>

0800652c <__malloc_lock>:
 800652c:	4770      	bx	lr

0800652e <__malloc_unlock>:
 800652e:	4770      	bx	lr

08006530 <_read_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4c07      	ldr	r4, [pc, #28]	; (8006550 <_read_r+0x20>)
 8006534:	4605      	mov	r5, r0
 8006536:	4608      	mov	r0, r1
 8006538:	4611      	mov	r1, r2
 800653a:	2200      	movs	r2, #0
 800653c:	6022      	str	r2, [r4, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	f7fd f96a 	bl	8003818 <_read>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_read_r+0x1e>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	b103      	cbz	r3, 800654e <_read_r+0x1e>
 800654c:	602b      	str	r3, [r5, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20000384 	.word	0x20000384

08006554 <__ascii_wctomb>:
 8006554:	b149      	cbz	r1, 800656a <__ascii_wctomb+0x16>
 8006556:	2aff      	cmp	r2, #255	; 0xff
 8006558:	bf85      	ittet	hi
 800655a:	238a      	movhi	r3, #138	; 0x8a
 800655c:	6003      	strhi	r3, [r0, #0]
 800655e:	700a      	strbls	r2, [r1, #0]
 8006560:	f04f 30ff 	movhi.w	r0, #4294967295
 8006564:	bf98      	it	ls
 8006566:	2001      	movls	r0, #1
 8006568:	4770      	bx	lr
 800656a:	4608      	mov	r0, r1
 800656c:	4770      	bx	lr
	...

08006570 <asin>:
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	ed2d 8b02 	vpush	{d8}
 8006576:	4e26      	ldr	r6, [pc, #152]	; (8006610 <asin+0xa0>)
 8006578:	b08b      	sub	sp, #44	; 0x2c
 800657a:	ec55 4b10 	vmov	r4, r5, d0
 800657e:	f000 f8ab 	bl	80066d8 <__ieee754_asin>
 8006582:	f996 3000 	ldrsb.w	r3, [r6]
 8006586:	eeb0 8a40 	vmov.f32	s16, s0
 800658a:	eef0 8a60 	vmov.f32	s17, s1
 800658e:	3301      	adds	r3, #1
 8006590:	d036      	beq.n	8006600 <asin+0x90>
 8006592:	4622      	mov	r2, r4
 8006594:	462b      	mov	r3, r5
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa fac3 	bl	8000b24 <__aeabi_dcmpun>
 800659e:	4607      	mov	r7, r0
 80065a0:	bb70      	cbnz	r0, 8006600 <asin+0x90>
 80065a2:	ec45 4b10 	vmov	d0, r4, r5
 80065a6:	f000 fdd7 	bl	8007158 <fabs>
 80065aa:	2200      	movs	r2, #0
 80065ac:	4b19      	ldr	r3, [pc, #100]	; (8006614 <asin+0xa4>)
 80065ae:	ec51 0b10 	vmov	r0, r1, d0
 80065b2:	f7fa faad 	bl	8000b10 <__aeabi_dcmpgt>
 80065b6:	b318      	cbz	r0, 8006600 <asin+0x90>
 80065b8:	2301      	movs	r3, #1
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4816      	ldr	r0, [pc, #88]	; (8006618 <asin+0xa8>)
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <asin+0xac>)
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	9708      	str	r7, [sp, #32]
 80065c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80065c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80065cc:	f000 fdd0 	bl	8007170 <nan>
 80065d0:	f996 3000 	ldrsb.w	r3, [r6]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80065da:	d104      	bne.n	80065e6 <asin+0x76>
 80065dc:	f7fd fbe8 	bl	8003db0 <__errno>
 80065e0:	2321      	movs	r3, #33	; 0x21
 80065e2:	6003      	str	r3, [r0, #0]
 80065e4:	e004      	b.n	80065f0 <asin+0x80>
 80065e6:	4668      	mov	r0, sp
 80065e8:	f000 fdbd 	bl	8007166 <matherr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d0f5      	beq.n	80065dc <asin+0x6c>
 80065f0:	9b08      	ldr	r3, [sp, #32]
 80065f2:	b11b      	cbz	r3, 80065fc <asin+0x8c>
 80065f4:	f7fd fbdc 	bl	8003db0 <__errno>
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	6003      	str	r3, [r0, #0]
 80065fc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006600:	eeb0 0a48 	vmov.f32	s0, s16
 8006604:	eef0 0a68 	vmov.f32	s1, s17
 8006608:	b00b      	add	sp, #44	; 0x2c
 800660a:	ecbd 8b02 	vpop	{d8}
 800660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006610:	200001dc 	.word	0x200001dc
 8006614:	3ff00000 	.word	0x3ff00000
 8006618:	080071c1 	.word	0x080071c1
 800661c:	080074a8 	.word	0x080074a8

08006620 <atan2>:
 8006620:	f000 ba66 	b.w	8006af0 <__ieee754_atan2>

08006624 <sqrt>:
 8006624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006628:	ed2d 8b02 	vpush	{d8}
 800662c:	b08b      	sub	sp, #44	; 0x2c
 800662e:	ec55 4b10 	vmov	r4, r5, d0
 8006632:	f000 fb37 	bl	8006ca4 <__ieee754_sqrt>
 8006636:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <sqrt+0xac>)
 8006638:	eeb0 8a40 	vmov.f32	s16, s0
 800663c:	eef0 8a60 	vmov.f32	s17, s1
 8006640:	f993 6000 	ldrsb.w	r6, [r3]
 8006644:	1c73      	adds	r3, r6, #1
 8006646:	d02a      	beq.n	800669e <sqrt+0x7a>
 8006648:	4622      	mov	r2, r4
 800664a:	462b      	mov	r3, r5
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7fa fa68 	bl	8000b24 <__aeabi_dcmpun>
 8006654:	4607      	mov	r7, r0
 8006656:	bb10      	cbnz	r0, 800669e <sqrt+0x7a>
 8006658:	f04f 0800 	mov.w	r8, #0
 800665c:	f04f 0900 	mov.w	r9, #0
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	4620      	mov	r0, r4
 8006666:	4629      	mov	r1, r5
 8006668:	f7fa fa34 	bl	8000ad4 <__aeabi_dcmplt>
 800666c:	b1b8      	cbz	r0, 800669e <sqrt+0x7a>
 800666e:	2301      	movs	r3, #1
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <sqrt+0xb0>)
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	9708      	str	r7, [sp, #32]
 8006678:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800667c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006680:	b9b6      	cbnz	r6, 80066b0 <sqrt+0x8c>
 8006682:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006686:	4668      	mov	r0, sp
 8006688:	f000 fd6d 	bl	8007166 <matherr>
 800668c:	b1d0      	cbz	r0, 80066c4 <sqrt+0xa0>
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	b11b      	cbz	r3, 800669a <sqrt+0x76>
 8006692:	f7fd fb8d 	bl	8003db0 <__errno>
 8006696:	9b08      	ldr	r3, [sp, #32]
 8006698:	6003      	str	r3, [r0, #0]
 800669a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800669e:	eeb0 0a48 	vmov.f32	s0, s16
 80066a2:	eef0 0a68 	vmov.f32	s1, s17
 80066a6:	b00b      	add	sp, #44	; 0x2c
 80066a8:	ecbd 8b02 	vpop	{d8}
 80066ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	f7fa f8c4 	bl	8000844 <__aeabi_ddiv>
 80066bc:	2e02      	cmp	r6, #2
 80066be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066c2:	d1e0      	bne.n	8006686 <sqrt+0x62>
 80066c4:	f7fd fb74 	bl	8003db0 <__errno>
 80066c8:	2321      	movs	r3, #33	; 0x21
 80066ca:	6003      	str	r3, [r0, #0]
 80066cc:	e7df      	b.n	800668e <sqrt+0x6a>
 80066ce:	bf00      	nop
 80066d0:	200001dc 	.word	0x200001dc
 80066d4:	080074ad 	.word	0x080074ad

080066d8 <__ieee754_asin>:
 80066d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	ec55 4b10 	vmov	r4, r5, d0
 80066e0:	4bcb      	ldr	r3, [pc, #812]	; (8006a10 <__ieee754_asin+0x338>)
 80066e2:	b085      	sub	sp, #20
 80066e4:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 80066e8:	459b      	cmp	fp, r3
 80066ea:	9501      	str	r5, [sp, #4]
 80066ec:	dd32      	ble.n	8006754 <__ieee754_asin+0x7c>
 80066ee:	ee10 3a10 	vmov	r3, s0
 80066f2:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 80066f6:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 80066fa:	ea5b 0303 	orrs.w	r3, fp, r3
 80066fe:	d117      	bne.n	8006730 <__ieee754_asin+0x58>
 8006700:	a3a9      	add	r3, pc, #676	; (adr r3, 80069a8 <__ieee754_asin+0x2d0>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	ee10 0a10 	vmov	r0, s0
 800670a:	4629      	mov	r1, r5
 800670c:	f7f9 ff70 	bl	80005f0 <__aeabi_dmul>
 8006710:	a3a7      	add	r3, pc, #668	; (adr r3, 80069b0 <__ieee754_asin+0x2d8>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	4620      	mov	r0, r4
 800671c:	4629      	mov	r1, r5
 800671e:	f7f9 ff67 	bl	80005f0 <__aeabi_dmul>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4630      	mov	r0, r6
 8006728:	4639      	mov	r1, r7
 800672a:	f7f9 fdaf 	bl	800028c <__adddf3>
 800672e:	e00a      	b.n	8006746 <__ieee754_asin+0x6e>
 8006730:	ee10 2a10 	vmov	r2, s0
 8006734:	462b      	mov	r3, r5
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7f9 fda5 	bl	8000288 <__aeabi_dsub>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	f7fa f87f 	bl	8000844 <__aeabi_ddiv>
 8006746:	4604      	mov	r4, r0
 8006748:	460d      	mov	r5, r1
 800674a:	ec45 4b10 	vmov	d0, r4, r5
 800674e:	b005      	add	sp, #20
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	4baf      	ldr	r3, [pc, #700]	; (8006a14 <__ieee754_asin+0x33c>)
 8006756:	459b      	cmp	fp, r3
 8006758:	dc11      	bgt.n	800677e <__ieee754_asin+0xa6>
 800675a:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 800675e:	f280 80b0 	bge.w	80068c2 <__ieee754_asin+0x1ea>
 8006762:	a395      	add	r3, pc, #596	; (adr r3, 80069b8 <__ieee754_asin+0x2e0>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	ee10 0a10 	vmov	r0, s0
 800676c:	4629      	mov	r1, r5
 800676e:	f7f9 fd8d 	bl	800028c <__adddf3>
 8006772:	2200      	movs	r2, #0
 8006774:	4ba8      	ldr	r3, [pc, #672]	; (8006a18 <__ieee754_asin+0x340>)
 8006776:	f7fa f9cb 	bl	8000b10 <__aeabi_dcmpgt>
 800677a:	2800      	cmp	r0, #0
 800677c:	d1e5      	bne.n	800674a <__ieee754_asin+0x72>
 800677e:	ec45 4b10 	vmov	d0, r4, r5
 8006782:	f000 fce9 	bl	8007158 <fabs>
 8006786:	2000      	movs	r0, #0
 8006788:	ec53 2b10 	vmov	r2, r3, d0
 800678c:	49a2      	ldr	r1, [pc, #648]	; (8006a18 <__ieee754_asin+0x340>)
 800678e:	f7f9 fd7b 	bl	8000288 <__aeabi_dsub>
 8006792:	2200      	movs	r2, #0
 8006794:	4ba1      	ldr	r3, [pc, #644]	; (8006a1c <__ieee754_asin+0x344>)
 8006796:	f7f9 ff2b 	bl	80005f0 <__aeabi_dmul>
 800679a:	a389      	add	r3, pc, #548	; (adr r3, 80069c0 <__ieee754_asin+0x2e8>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	4604      	mov	r4, r0
 80067a2:	460d      	mov	r5, r1
 80067a4:	f7f9 ff24 	bl	80005f0 <__aeabi_dmul>
 80067a8:	a387      	add	r3, pc, #540	; (adr r3, 80069c8 <__ieee754_asin+0x2f0>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fd6d 	bl	800028c <__adddf3>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 ff1b 	bl	80005f0 <__aeabi_dmul>
 80067ba:	a385      	add	r3, pc, #532	; (adr r3, 80069d0 <__ieee754_asin+0x2f8>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fd62 	bl	8000288 <__aeabi_dsub>
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	f7f9 ff12 	bl	80005f0 <__aeabi_dmul>
 80067cc:	a382      	add	r3, pc, #520	; (adr r3, 80069d8 <__ieee754_asin+0x300>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd5b 	bl	800028c <__adddf3>
 80067d6:	4622      	mov	r2, r4
 80067d8:	462b      	mov	r3, r5
 80067da:	f7f9 ff09 	bl	80005f0 <__aeabi_dmul>
 80067de:	a380      	add	r3, pc, #512	; (adr r3, 80069e0 <__ieee754_asin+0x308>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fd50 	bl	8000288 <__aeabi_dsub>
 80067e8:	4622      	mov	r2, r4
 80067ea:	462b      	mov	r3, r5
 80067ec:	f7f9 ff00 	bl	80005f0 <__aeabi_dmul>
 80067f0:	a37d      	add	r3, pc, #500	; (adr r3, 80069e8 <__ieee754_asin+0x310>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 fd49 	bl	800028c <__adddf3>
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	f7f9 fef7 	bl	80005f0 <__aeabi_dmul>
 8006802:	a37b      	add	r3, pc, #492	; (adr r3, 80069f0 <__ieee754_asin+0x318>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	4680      	mov	r8, r0
 800680a:	4689      	mov	r9, r1
 800680c:	4620      	mov	r0, r4
 800680e:	4629      	mov	r1, r5
 8006810:	f7f9 feee 	bl	80005f0 <__aeabi_dmul>
 8006814:	a378      	add	r3, pc, #480	; (adr r3, 80069f8 <__ieee754_asin+0x320>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fd35 	bl	8000288 <__aeabi_dsub>
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	f7f9 fee5 	bl	80005f0 <__aeabi_dmul>
 8006826:	a376      	add	r3, pc, #472	; (adr r3, 8006a00 <__ieee754_asin+0x328>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fd2e 	bl	800028c <__adddf3>
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	f7f9 fedc 	bl	80005f0 <__aeabi_dmul>
 8006838:	a373      	add	r3, pc, #460	; (adr r3, 8006a08 <__ieee754_asin+0x330>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fd23 	bl	8000288 <__aeabi_dsub>
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fed3 	bl	80005f0 <__aeabi_dmul>
 800684a:	2200      	movs	r2, #0
 800684c:	4b72      	ldr	r3, [pc, #456]	; (8006a18 <__ieee754_asin+0x340>)
 800684e:	f7f9 fd1d 	bl	800028c <__adddf3>
 8006852:	ec45 4b10 	vmov	d0, r4, r5
 8006856:	460b      	mov	r3, r1
 8006858:	4602      	mov	r2, r0
 800685a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800685e:	f000 fa21 	bl	8006ca4 <__ieee754_sqrt>
 8006862:	496f      	ldr	r1, [pc, #444]	; (8006a20 <__ieee754_asin+0x348>)
 8006864:	458b      	cmp	fp, r1
 8006866:	ec57 6b10 	vmov	r6, r7, d0
 800686a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800686e:	f340 80d9 	ble.w	8006a24 <__ieee754_asin+0x34c>
 8006872:	4640      	mov	r0, r8
 8006874:	4649      	mov	r1, r9
 8006876:	f7f9 ffe5 	bl	8000844 <__aeabi_ddiv>
 800687a:	4632      	mov	r2, r6
 800687c:	463b      	mov	r3, r7
 800687e:	f7f9 feb7 	bl	80005f0 <__aeabi_dmul>
 8006882:	4632      	mov	r2, r6
 8006884:	463b      	mov	r3, r7
 8006886:	f7f9 fd01 	bl	800028c <__adddf3>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	f7f9 fcfd 	bl	800028c <__adddf3>
 8006892:	a347      	add	r3, pc, #284	; (adr r3, 80069b0 <__ieee754_asin+0x2d8>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7f9 fcf6 	bl	8000288 <__aeabi_dsub>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	a141      	add	r1, pc, #260	; (adr r1, 80069a8 <__ieee754_asin+0x2d0>)
 80068a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068a6:	f7f9 fcef 	bl	8000288 <__aeabi_dsub>
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfdc      	itt	le
 80068b0:	4602      	movle	r2, r0
 80068b2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80068b6:	4604      	mov	r4, r0
 80068b8:	460d      	mov	r5, r1
 80068ba:	bfdc      	itt	le
 80068bc:	4614      	movle	r4, r2
 80068be:	461d      	movle	r5, r3
 80068c0:	e743      	b.n	800674a <__ieee754_asin+0x72>
 80068c2:	ee10 2a10 	vmov	r2, s0
 80068c6:	ee10 0a10 	vmov	r0, s0
 80068ca:	462b      	mov	r3, r5
 80068cc:	4629      	mov	r1, r5
 80068ce:	f7f9 fe8f 	bl	80005f0 <__aeabi_dmul>
 80068d2:	a33b      	add	r3, pc, #236	; (adr r3, 80069c0 <__ieee754_asin+0x2e8>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	4606      	mov	r6, r0
 80068da:	460f      	mov	r7, r1
 80068dc:	f7f9 fe88 	bl	80005f0 <__aeabi_dmul>
 80068e0:	a339      	add	r3, pc, #228	; (adr r3, 80069c8 <__ieee754_asin+0x2f0>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fcd1 	bl	800028c <__adddf3>
 80068ea:	4632      	mov	r2, r6
 80068ec:	463b      	mov	r3, r7
 80068ee:	f7f9 fe7f 	bl	80005f0 <__aeabi_dmul>
 80068f2:	a337      	add	r3, pc, #220	; (adr r3, 80069d0 <__ieee754_asin+0x2f8>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fcc6 	bl	8000288 <__aeabi_dsub>
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	f7f9 fe76 	bl	80005f0 <__aeabi_dmul>
 8006904:	a334      	add	r3, pc, #208	; (adr r3, 80069d8 <__ieee754_asin+0x300>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	f7f9 fcbf 	bl	800028c <__adddf3>
 800690e:	4632      	mov	r2, r6
 8006910:	463b      	mov	r3, r7
 8006912:	f7f9 fe6d 	bl	80005f0 <__aeabi_dmul>
 8006916:	a332      	add	r3, pc, #200	; (adr r3, 80069e0 <__ieee754_asin+0x308>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7f9 fcb4 	bl	8000288 <__aeabi_dsub>
 8006920:	4632      	mov	r2, r6
 8006922:	463b      	mov	r3, r7
 8006924:	f7f9 fe64 	bl	80005f0 <__aeabi_dmul>
 8006928:	a32f      	add	r3, pc, #188	; (adr r3, 80069e8 <__ieee754_asin+0x310>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f7f9 fcad 	bl	800028c <__adddf3>
 8006932:	4632      	mov	r2, r6
 8006934:	463b      	mov	r3, r7
 8006936:	f7f9 fe5b 	bl	80005f0 <__aeabi_dmul>
 800693a:	a32d      	add	r3, pc, #180	; (adr r3, 80069f0 <__ieee754_asin+0x318>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	4680      	mov	r8, r0
 8006942:	4689      	mov	r9, r1
 8006944:	4630      	mov	r0, r6
 8006946:	4639      	mov	r1, r7
 8006948:	f7f9 fe52 	bl	80005f0 <__aeabi_dmul>
 800694c:	a32a      	add	r3, pc, #168	; (adr r3, 80069f8 <__ieee754_asin+0x320>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fc99 	bl	8000288 <__aeabi_dsub>
 8006956:	4632      	mov	r2, r6
 8006958:	463b      	mov	r3, r7
 800695a:	f7f9 fe49 	bl	80005f0 <__aeabi_dmul>
 800695e:	a328      	add	r3, pc, #160	; (adr r3, 8006a00 <__ieee754_asin+0x328>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f7f9 fc92 	bl	800028c <__adddf3>
 8006968:	4632      	mov	r2, r6
 800696a:	463b      	mov	r3, r7
 800696c:	f7f9 fe40 	bl	80005f0 <__aeabi_dmul>
 8006970:	a325      	add	r3, pc, #148	; (adr r3, 8006a08 <__ieee754_asin+0x330>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f7f9 fc87 	bl	8000288 <__aeabi_dsub>
 800697a:	4632      	mov	r2, r6
 800697c:	463b      	mov	r3, r7
 800697e:	f7f9 fe37 	bl	80005f0 <__aeabi_dmul>
 8006982:	2200      	movs	r2, #0
 8006984:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <__ieee754_asin+0x340>)
 8006986:	f7f9 fc81 	bl	800028c <__adddf3>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7f9 ff57 	bl	8000844 <__aeabi_ddiv>
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	f7f9 fe29 	bl	80005f0 <__aeabi_dmul>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	e6c0      	b.n	800672a <__ieee754_asin+0x52>
 80069a8:	54442d18 	.word	0x54442d18
 80069ac:	3ff921fb 	.word	0x3ff921fb
 80069b0:	33145c07 	.word	0x33145c07
 80069b4:	3c91a626 	.word	0x3c91a626
 80069b8:	8800759c 	.word	0x8800759c
 80069bc:	7e37e43c 	.word	0x7e37e43c
 80069c0:	0dfdf709 	.word	0x0dfdf709
 80069c4:	3f023de1 	.word	0x3f023de1
 80069c8:	7501b288 	.word	0x7501b288
 80069cc:	3f49efe0 	.word	0x3f49efe0
 80069d0:	b5688f3b 	.word	0xb5688f3b
 80069d4:	3fa48228 	.word	0x3fa48228
 80069d8:	0e884455 	.word	0x0e884455
 80069dc:	3fc9c155 	.word	0x3fc9c155
 80069e0:	03eb6f7d 	.word	0x03eb6f7d
 80069e4:	3fd4d612 	.word	0x3fd4d612
 80069e8:	55555555 	.word	0x55555555
 80069ec:	3fc55555 	.word	0x3fc55555
 80069f0:	b12e9282 	.word	0xb12e9282
 80069f4:	3fb3b8c5 	.word	0x3fb3b8c5
 80069f8:	1b8d0159 	.word	0x1b8d0159
 80069fc:	3fe6066c 	.word	0x3fe6066c
 8006a00:	9c598ac8 	.word	0x9c598ac8
 8006a04:	40002ae5 	.word	0x40002ae5
 8006a08:	1c8a2d4b 	.word	0x1c8a2d4b
 8006a0c:	40033a27 	.word	0x40033a27
 8006a10:	3fefffff 	.word	0x3fefffff
 8006a14:	3fdfffff 	.word	0x3fdfffff
 8006a18:	3ff00000 	.word	0x3ff00000
 8006a1c:	3fe00000 	.word	0x3fe00000
 8006a20:	3fef3332 	.word	0x3fef3332
 8006a24:	4640      	mov	r0, r8
 8006a26:	4649      	mov	r1, r9
 8006a28:	f7f9 ff0c 	bl	8000844 <__aeabi_ddiv>
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	4680      	mov	r8, r0
 8006a30:	4689      	mov	r9, r1
 8006a32:	463b      	mov	r3, r7
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7f9 fc28 	bl	800028c <__adddf3>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7f9 fdd4 	bl	80005f0 <__aeabi_dmul>
 8006a48:	f04f 0a00 	mov.w	sl, #0
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	4652      	mov	r2, sl
 8006a52:	463b      	mov	r3, r7
 8006a54:	4650      	mov	r0, sl
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7f9 fdca 	bl	80005f0 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4620      	mov	r0, r4
 8006a62:	4629      	mov	r1, r5
 8006a64:	f7f9 fc10 	bl	8000288 <__aeabi_dsub>
 8006a68:	4652      	mov	r2, sl
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	463b      	mov	r3, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7f9 fc0a 	bl	800028c <__adddf3>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f7f9 fee0 	bl	8000844 <__aeabi_ddiv>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	f7f9 fc00 	bl	800028c <__adddf3>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	a113      	add	r1, pc, #76	; (adr r1, 8006ae0 <__ieee754_asin+0x408>)
 8006a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a96:	f7f9 fbf7 	bl	8000288 <__aeabi_dsub>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	f7f9 fbf1 	bl	8000288 <__aeabi_dsub>
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	460d      	mov	r5, r1
 8006aac:	463b      	mov	r3, r7
 8006aae:	4650      	mov	r0, sl
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 fbeb 	bl	800028c <__adddf3>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	a10b      	add	r1, pc, #44	; (adr r1, 8006ae8 <__ieee754_asin+0x410>)
 8006abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac0:	f7f9 fbe2 	bl	8000288 <__aeabi_dsub>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4620      	mov	r0, r4
 8006aca:	4629      	mov	r1, r5
 8006acc:	f7f9 fbdc 	bl	8000288 <__aeabi_dsub>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	a104      	add	r1, pc, #16	; (adr r1, 8006ae8 <__ieee754_asin+0x410>)
 8006ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ada:	e6e4      	b.n	80068a6 <__ieee754_asin+0x1ce>
 8006adc:	f3af 8000 	nop.w
 8006ae0:	33145c07 	.word	0x33145c07
 8006ae4:	3c91a626 	.word	0x3c91a626
 8006ae8:	54442d18 	.word	0x54442d18
 8006aec:	3fe921fb 	.word	0x3fe921fb

08006af0 <__ieee754_atan2>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	ec57 6b11 	vmov	r6, r7, d1
 8006af8:	4273      	negs	r3, r6
 8006afa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006afe:	4333      	orrs	r3, r6
 8006b00:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006ca0 <__ieee754_atan2+0x1b0>
 8006b04:	ec51 0b10 	vmov	r0, r1, d0
 8006b08:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006b0c:	4563      	cmp	r3, ip
 8006b0e:	ee11 8a10 	vmov	r8, s2
 8006b12:	ee10 9a10 	vmov	r9, s0
 8006b16:	468e      	mov	lr, r1
 8006b18:	d807      	bhi.n	8006b2a <__ieee754_atan2+0x3a>
 8006b1a:	4244      	negs	r4, r0
 8006b1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b20:	4304      	orrs	r4, r0
 8006b22:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006b26:	4564      	cmp	r4, ip
 8006b28:	d907      	bls.n	8006b3a <__ieee754_atan2+0x4a>
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	f7f9 fbad 	bl	800028c <__adddf3>
 8006b32:	ec41 0b10 	vmov	d0, r0, r1
 8006b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006b3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b42:	4334      	orrs	r4, r6
 8006b44:	d103      	bne.n	8006b4e <__ieee754_atan2+0x5e>
 8006b46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b4a:	f000 b95d 	b.w	8006e08 <atan>
 8006b4e:	17bc      	asrs	r4, r7, #30
 8006b50:	f004 0402 	and.w	r4, r4, #2
 8006b54:	ea59 0903 	orrs.w	r9, r9, r3
 8006b58:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006b5c:	d107      	bne.n	8006b6e <__ieee754_atan2+0x7e>
 8006b5e:	2c02      	cmp	r4, #2
 8006b60:	d030      	beq.n	8006bc4 <__ieee754_atan2+0xd4>
 8006b62:	2c03      	cmp	r4, #3
 8006b64:	d1e5      	bne.n	8006b32 <__ieee754_atan2+0x42>
 8006b66:	a13c      	add	r1, pc, #240	; (adr r1, 8006c58 <__ieee754_atan2+0x168>)
 8006b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b6c:	e7e1      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006b6e:	ea58 0802 	orrs.w	r8, r8, r2
 8006b72:	d106      	bne.n	8006b82 <__ieee754_atan2+0x92>
 8006b74:	f1be 0f00 	cmp.w	lr, #0
 8006b78:	da6a      	bge.n	8006c50 <__ieee754_atan2+0x160>
 8006b7a:	a139      	add	r1, pc, #228	; (adr r1, 8006c60 <__ieee754_atan2+0x170>)
 8006b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b80:	e7d7      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006b82:	4562      	cmp	r2, ip
 8006b84:	d122      	bne.n	8006bcc <__ieee754_atan2+0xdc>
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d111      	bne.n	8006bae <__ieee754_atan2+0xbe>
 8006b8a:	2c02      	cmp	r4, #2
 8006b8c:	d007      	beq.n	8006b9e <__ieee754_atan2+0xae>
 8006b8e:	2c03      	cmp	r4, #3
 8006b90:	d009      	beq.n	8006ba6 <__ieee754_atan2+0xb6>
 8006b92:	2c01      	cmp	r4, #1
 8006b94:	d156      	bne.n	8006c44 <__ieee754_atan2+0x154>
 8006b96:	a134      	add	r1, pc, #208	; (adr r1, 8006c68 <__ieee754_atan2+0x178>)
 8006b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b9c:	e7c9      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006b9e:	a134      	add	r1, pc, #208	; (adr r1, 8006c70 <__ieee754_atan2+0x180>)
 8006ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba4:	e7c5      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006ba6:	a134      	add	r1, pc, #208	; (adr r1, 8006c78 <__ieee754_atan2+0x188>)
 8006ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bac:	e7c1      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006bae:	2c02      	cmp	r4, #2
 8006bb0:	d008      	beq.n	8006bc4 <__ieee754_atan2+0xd4>
 8006bb2:	2c03      	cmp	r4, #3
 8006bb4:	d0d7      	beq.n	8006b66 <__ieee754_atan2+0x76>
 8006bb6:	2c01      	cmp	r4, #1
 8006bb8:	f04f 0000 	mov.w	r0, #0
 8006bbc:	d146      	bne.n	8006c4c <__ieee754_atan2+0x15c>
 8006bbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006bc2:	e7b6      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006bc4:	a12e      	add	r1, pc, #184	; (adr r1, 8006c80 <__ieee754_atan2+0x190>)
 8006bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bca:	e7b2      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006bcc:	4563      	cmp	r3, ip
 8006bce:	d0d1      	beq.n	8006b74 <__ieee754_atan2+0x84>
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	151b      	asrs	r3, r3, #20
 8006bd4:	2b3c      	cmp	r3, #60	; 0x3c
 8006bd6:	dc1e      	bgt.n	8006c16 <__ieee754_atan2+0x126>
 8006bd8:	2f00      	cmp	r7, #0
 8006bda:	da01      	bge.n	8006be0 <__ieee754_atan2+0xf0>
 8006bdc:	333c      	adds	r3, #60	; 0x3c
 8006bde:	db1e      	blt.n	8006c1e <__ieee754_atan2+0x12e>
 8006be0:	4632      	mov	r2, r6
 8006be2:	463b      	mov	r3, r7
 8006be4:	f7f9 fe2e 	bl	8000844 <__aeabi_ddiv>
 8006be8:	ec41 0b10 	vmov	d0, r0, r1
 8006bec:	f000 fab4 	bl	8007158 <fabs>
 8006bf0:	f000 f90a 	bl	8006e08 <atan>
 8006bf4:	ec51 0b10 	vmov	r0, r1, d0
 8006bf8:	2c01      	cmp	r4, #1
 8006bfa:	d013      	beq.n	8006c24 <__ieee754_atan2+0x134>
 8006bfc:	2c02      	cmp	r4, #2
 8006bfe:	d014      	beq.n	8006c2a <__ieee754_atan2+0x13a>
 8006c00:	2c00      	cmp	r4, #0
 8006c02:	d096      	beq.n	8006b32 <__ieee754_atan2+0x42>
 8006c04:	a320      	add	r3, pc, #128	; (adr r3, 8006c88 <__ieee754_atan2+0x198>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fb3d 	bl	8000288 <__aeabi_dsub>
 8006c0e:	a31c      	add	r3, pc, #112	; (adr r3, 8006c80 <__ieee754_atan2+0x190>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	e013      	b.n	8006c3e <__ieee754_atan2+0x14e>
 8006c16:	a11e      	add	r1, pc, #120	; (adr r1, 8006c90 <__ieee754_atan2+0x1a0>)
 8006c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c1c:	e7ec      	b.n	8006bf8 <__ieee754_atan2+0x108>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	2100      	movs	r1, #0
 8006c22:	e7e9      	b.n	8006bf8 <__ieee754_atan2+0x108>
 8006c24:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006c28:	e783      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006c2a:	a317      	add	r3, pc, #92	; (adr r3, 8006c88 <__ieee754_atan2+0x198>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f7f9 fb2a 	bl	8000288 <__aeabi_dsub>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	a111      	add	r1, pc, #68	; (adr r1, 8006c80 <__ieee754_atan2+0x190>)
 8006c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c3e:	f7f9 fb23 	bl	8000288 <__aeabi_dsub>
 8006c42:	e776      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006c44:	a114      	add	r1, pc, #80	; (adr r1, 8006c98 <__ieee754_atan2+0x1a8>)
 8006c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c4a:	e772      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	e770      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006c50:	a10f      	add	r1, pc, #60	; (adr r1, 8006c90 <__ieee754_atan2+0x1a0>)
 8006c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c56:	e76c      	b.n	8006b32 <__ieee754_atan2+0x42>
 8006c58:	54442d18 	.word	0x54442d18
 8006c5c:	c00921fb 	.word	0xc00921fb
 8006c60:	54442d18 	.word	0x54442d18
 8006c64:	bff921fb 	.word	0xbff921fb
 8006c68:	54442d18 	.word	0x54442d18
 8006c6c:	bfe921fb 	.word	0xbfe921fb
 8006c70:	7f3321d2 	.word	0x7f3321d2
 8006c74:	4002d97c 	.word	0x4002d97c
 8006c78:	7f3321d2 	.word	0x7f3321d2
 8006c7c:	c002d97c 	.word	0xc002d97c
 8006c80:	54442d18 	.word	0x54442d18
 8006c84:	400921fb 	.word	0x400921fb
 8006c88:	33145c07 	.word	0x33145c07
 8006c8c:	3ca1a626 	.word	0x3ca1a626
 8006c90:	54442d18 	.word	0x54442d18
 8006c94:	3ff921fb 	.word	0x3ff921fb
 8006c98:	54442d18 	.word	0x54442d18
 8006c9c:	3fe921fb 	.word	0x3fe921fb
 8006ca0:	7ff00000 	.word	0x7ff00000

08006ca4 <__ieee754_sqrt>:
 8006ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca8:	ec55 4b10 	vmov	r4, r5, d0
 8006cac:	4e54      	ldr	r6, [pc, #336]	; (8006e00 <__ieee754_sqrt+0x15c>)
 8006cae:	43ae      	bics	r6, r5
 8006cb0:	ee10 0a10 	vmov	r0, s0
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	4621      	mov	r1, r4
 8006cba:	d113      	bne.n	8006ce4 <__ieee754_sqrt+0x40>
 8006cbc:	ee10 2a10 	vmov	r2, s0
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	ee10 0a10 	vmov	r0, s0
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	f7f9 fc92 	bl	80005f0 <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f7f9 fada 	bl	800028c <__adddf3>
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	ec45 4b10 	vmov	d0, r4, r5
 8006ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce4:	2d00      	cmp	r5, #0
 8006ce6:	dc10      	bgt.n	8006d0a <__ieee754_sqrt+0x66>
 8006ce8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006cec:	4330      	orrs	r0, r6
 8006cee:	d0f5      	beq.n	8006cdc <__ieee754_sqrt+0x38>
 8006cf0:	b15d      	cbz	r5, 8006d0a <__ieee754_sqrt+0x66>
 8006cf2:	ee10 2a10 	vmov	r2, s0
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	f7f9 fac4 	bl	8000288 <__aeabi_dsub>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	f7f9 fd9e 	bl	8000844 <__aeabi_ddiv>
 8006d08:	e7e6      	b.n	8006cd8 <__ieee754_sqrt+0x34>
 8006d0a:	151b      	asrs	r3, r3, #20
 8006d0c:	d10c      	bne.n	8006d28 <__ieee754_sqrt+0x84>
 8006d0e:	2a00      	cmp	r2, #0
 8006d10:	d06d      	beq.n	8006dee <__ieee754_sqrt+0x14a>
 8006d12:	2000      	movs	r0, #0
 8006d14:	02d6      	lsls	r6, r2, #11
 8006d16:	d56e      	bpl.n	8006df6 <__ieee754_sqrt+0x152>
 8006d18:	1e44      	subs	r4, r0, #1
 8006d1a:	1b1b      	subs	r3, r3, r4
 8006d1c:	f1c0 0420 	rsb	r4, r0, #32
 8006d20:	fa21 f404 	lsr.w	r4, r1, r4
 8006d24:	4322      	orrs	r2, r4
 8006d26:	4081      	lsls	r1, r0
 8006d28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d2c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006d30:	07dd      	lsls	r5, r3, #31
 8006d32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d36:	bf42      	ittt	mi
 8006d38:	0052      	lslmi	r2, r2, #1
 8006d3a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8006d3e:	0049      	lslmi	r1, r1, #1
 8006d40:	1058      	asrs	r0, r3, #1
 8006d42:	2500      	movs	r5, #0
 8006d44:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006d48:	441a      	add	r2, r3
 8006d4a:	0049      	lsls	r1, r1, #1
 8006d4c:	2316      	movs	r3, #22
 8006d4e:	462c      	mov	r4, r5
 8006d50:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006d54:	19a7      	adds	r7, r4, r6
 8006d56:	4297      	cmp	r7, r2
 8006d58:	bfde      	ittt	le
 8006d5a:	1bd2      	suble	r2, r2, r7
 8006d5c:	19bc      	addle	r4, r7, r6
 8006d5e:	19ad      	addle	r5, r5, r6
 8006d60:	0052      	lsls	r2, r2, #1
 8006d62:	3b01      	subs	r3, #1
 8006d64:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006d68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d70:	d1f0      	bne.n	8006d54 <__ieee754_sqrt+0xb0>
 8006d72:	f04f 0e20 	mov.w	lr, #32
 8006d76:	469c      	mov	ip, r3
 8006d78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d7c:	42a2      	cmp	r2, r4
 8006d7e:	eb06 070c 	add.w	r7, r6, ip
 8006d82:	dc02      	bgt.n	8006d8a <__ieee754_sqrt+0xe6>
 8006d84:	d112      	bne.n	8006dac <__ieee754_sqrt+0x108>
 8006d86:	428f      	cmp	r7, r1
 8006d88:	d810      	bhi.n	8006dac <__ieee754_sqrt+0x108>
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	eb07 0c06 	add.w	ip, r7, r6
 8006d90:	da34      	bge.n	8006dfc <__ieee754_sqrt+0x158>
 8006d92:	f1bc 0f00 	cmp.w	ip, #0
 8006d96:	db31      	blt.n	8006dfc <__ieee754_sqrt+0x158>
 8006d98:	f104 0801 	add.w	r8, r4, #1
 8006d9c:	1b12      	subs	r2, r2, r4
 8006d9e:	428f      	cmp	r7, r1
 8006da0:	bf88      	it	hi
 8006da2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006da6:	1bc9      	subs	r1, r1, r7
 8006da8:	4433      	add	r3, r6
 8006daa:	4644      	mov	r4, r8
 8006dac:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006db0:	f1be 0e01 	subs.w	lr, lr, #1
 8006db4:	443a      	add	r2, r7
 8006db6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006dba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006dbe:	d1dd      	bne.n	8006d7c <__ieee754_sqrt+0xd8>
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	d006      	beq.n	8006dd2 <__ieee754_sqrt+0x12e>
 8006dc4:	1c5c      	adds	r4, r3, #1
 8006dc6:	bf13      	iteet	ne
 8006dc8:	3301      	addne	r3, #1
 8006dca:	3501      	addeq	r5, #1
 8006dcc:	4673      	moveq	r3, lr
 8006dce:	f023 0301 	bicne.w	r3, r3, #1
 8006dd2:	106a      	asrs	r2, r5, #1
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	07e9      	lsls	r1, r5, #31
 8006dd8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006ddc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006de0:	bf48      	it	mi
 8006de2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006de6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006dea:	461c      	mov	r4, r3
 8006dec:	e776      	b.n	8006cdc <__ieee754_sqrt+0x38>
 8006dee:	0aca      	lsrs	r2, r1, #11
 8006df0:	3b15      	subs	r3, #21
 8006df2:	0549      	lsls	r1, r1, #21
 8006df4:	e78b      	b.n	8006d0e <__ieee754_sqrt+0x6a>
 8006df6:	0052      	lsls	r2, r2, #1
 8006df8:	3001      	adds	r0, #1
 8006dfa:	e78b      	b.n	8006d14 <__ieee754_sqrt+0x70>
 8006dfc:	46a0      	mov	r8, r4
 8006dfe:	e7cd      	b.n	8006d9c <__ieee754_sqrt+0xf8>
 8006e00:	7ff00000 	.word	0x7ff00000
 8006e04:	00000000 	.word	0x00000000

08006e08 <atan>:
 8006e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	ec55 4b10 	vmov	r4, r5, d0
 8006e10:	4bc7      	ldr	r3, [pc, #796]	; (8007130 <atan+0x328>)
 8006e12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e16:	429e      	cmp	r6, r3
 8006e18:	46ab      	mov	fp, r5
 8006e1a:	dd18      	ble.n	8006e4e <atan+0x46>
 8006e1c:	4ac5      	ldr	r2, [pc, #788]	; (8007134 <atan+0x32c>)
 8006e1e:	4296      	cmp	r6, r2
 8006e20:	dc01      	bgt.n	8006e26 <atan+0x1e>
 8006e22:	d109      	bne.n	8006e38 <atan+0x30>
 8006e24:	b144      	cbz	r4, 8006e38 <atan+0x30>
 8006e26:	4622      	mov	r2, r4
 8006e28:	462b      	mov	r3, r5
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 fa2d 	bl	800028c <__adddf3>
 8006e32:	4604      	mov	r4, r0
 8006e34:	460d      	mov	r5, r1
 8006e36:	e006      	b.n	8006e46 <atan+0x3e>
 8006e38:	f1bb 0f00 	cmp.w	fp, #0
 8006e3c:	f300 813a 	bgt.w	80070b4 <atan+0x2ac>
 8006e40:	a59f      	add	r5, pc, #636	; (adr r5, 80070c0 <atan+0x2b8>)
 8006e42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e46:	ec45 4b10 	vmov	d0, r4, r5
 8006e4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	4bba      	ldr	r3, [pc, #744]	; (8007138 <atan+0x330>)
 8006e50:	429e      	cmp	r6, r3
 8006e52:	dc14      	bgt.n	8006e7e <atan+0x76>
 8006e54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006e58:	429e      	cmp	r6, r3
 8006e5a:	dc0d      	bgt.n	8006e78 <atan+0x70>
 8006e5c:	a39a      	add	r3, pc, #616	; (adr r3, 80070c8 <atan+0x2c0>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	ee10 0a10 	vmov	r0, s0
 8006e66:	4629      	mov	r1, r5
 8006e68:	f7f9 fa10 	bl	800028c <__adddf3>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4bb3      	ldr	r3, [pc, #716]	; (800713c <atan+0x334>)
 8006e70:	f7f9 fe4e 	bl	8000b10 <__aeabi_dcmpgt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d1e6      	bne.n	8006e46 <atan+0x3e>
 8006e78:	f04f 3aff 	mov.w	sl, #4294967295
 8006e7c:	e02b      	b.n	8006ed6 <atan+0xce>
 8006e7e:	f000 f96b 	bl	8007158 <fabs>
 8006e82:	4baf      	ldr	r3, [pc, #700]	; (8007140 <atan+0x338>)
 8006e84:	429e      	cmp	r6, r3
 8006e86:	ec55 4b10 	vmov	r4, r5, d0
 8006e8a:	f300 80bf 	bgt.w	800700c <atan+0x204>
 8006e8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006e92:	429e      	cmp	r6, r3
 8006e94:	f300 80a0 	bgt.w	8006fd8 <atan+0x1d0>
 8006e98:	ee10 2a10 	vmov	r2, s0
 8006e9c:	ee10 0a10 	vmov	r0, s0
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	f7f9 f9f2 	bl	800028c <__adddf3>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4ba4      	ldr	r3, [pc, #656]	; (800713c <atan+0x334>)
 8006eac:	f7f9 f9ec 	bl	8000288 <__aeabi_dsub>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eba:	4620      	mov	r0, r4
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	f7f9 f9e5 	bl	800028c <__adddf3>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	4639      	mov	r1, r7
 8006eca:	f7f9 fcbb 	bl	8000844 <__aeabi_ddiv>
 8006ece:	f04f 0a00 	mov.w	sl, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	462b      	mov	r3, r5
 8006eda:	4620      	mov	r0, r4
 8006edc:	4629      	mov	r1, r5
 8006ede:	f7f9 fb87 	bl	80005f0 <__aeabi_dmul>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4680      	mov	r8, r0
 8006ee8:	4689      	mov	r9, r1
 8006eea:	f7f9 fb81 	bl	80005f0 <__aeabi_dmul>
 8006eee:	a378      	add	r3, pc, #480	; (adr r3, 80070d0 <atan+0x2c8>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	460f      	mov	r7, r1
 8006ef8:	f7f9 fb7a 	bl	80005f0 <__aeabi_dmul>
 8006efc:	a376      	add	r3, pc, #472	; (adr r3, 80070d8 <atan+0x2d0>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f7f9 f9c3 	bl	800028c <__adddf3>
 8006f06:	4632      	mov	r2, r6
 8006f08:	463b      	mov	r3, r7
 8006f0a:	f7f9 fb71 	bl	80005f0 <__aeabi_dmul>
 8006f0e:	a374      	add	r3, pc, #464	; (adr r3, 80070e0 <atan+0x2d8>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f7f9 f9ba 	bl	800028c <__adddf3>
 8006f18:	4632      	mov	r2, r6
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	f7f9 fb68 	bl	80005f0 <__aeabi_dmul>
 8006f20:	a371      	add	r3, pc, #452	; (adr r3, 80070e8 <atan+0x2e0>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f7f9 f9b1 	bl	800028c <__adddf3>
 8006f2a:	4632      	mov	r2, r6
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	f7f9 fb5f 	bl	80005f0 <__aeabi_dmul>
 8006f32:	a36f      	add	r3, pc, #444	; (adr r3, 80070f0 <atan+0x2e8>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 f9a8 	bl	800028c <__adddf3>
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	463b      	mov	r3, r7
 8006f40:	f7f9 fb56 	bl	80005f0 <__aeabi_dmul>
 8006f44:	a36c      	add	r3, pc, #432	; (adr r3, 80070f8 <atan+0x2f0>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f99f 	bl	800028c <__adddf3>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	464b      	mov	r3, r9
 8006f52:	f7f9 fb4d 	bl	80005f0 <__aeabi_dmul>
 8006f56:	a36a      	add	r3, pc, #424	; (adr r3, 8007100 <atan+0x2f8>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	4689      	mov	r9, r1
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 fb44 	bl	80005f0 <__aeabi_dmul>
 8006f68:	a367      	add	r3, pc, #412	; (adr r3, 8007108 <atan+0x300>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 f98b 	bl	8000288 <__aeabi_dsub>
 8006f72:	4632      	mov	r2, r6
 8006f74:	463b      	mov	r3, r7
 8006f76:	f7f9 fb3b 	bl	80005f0 <__aeabi_dmul>
 8006f7a:	a365      	add	r3, pc, #404	; (adr r3, 8007110 <atan+0x308>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 f982 	bl	8000288 <__aeabi_dsub>
 8006f84:	4632      	mov	r2, r6
 8006f86:	463b      	mov	r3, r7
 8006f88:	f7f9 fb32 	bl	80005f0 <__aeabi_dmul>
 8006f8c:	a362      	add	r3, pc, #392	; (adr r3, 8007118 <atan+0x310>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f7f9 f979 	bl	8000288 <__aeabi_dsub>
 8006f96:	4632      	mov	r2, r6
 8006f98:	463b      	mov	r3, r7
 8006f9a:	f7f9 fb29 	bl	80005f0 <__aeabi_dmul>
 8006f9e:	a360      	add	r3, pc, #384	; (adr r3, 8007120 <atan+0x318>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f7f9 f970 	bl	8000288 <__aeabi_dsub>
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	f7f9 fb20 	bl	80005f0 <__aeabi_dmul>
 8006fb0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	d155      	bne.n	8007066 <atan+0x25e>
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f7f9 f965 	bl	800028c <__adddf3>
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	f7f9 fb13 	bl	80005f0 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7f9 f959 	bl	8000288 <__aeabi_dsub>
 8006fd6:	e72c      	b.n	8006e32 <atan+0x2a>
 8006fd8:	ee10 0a10 	vmov	r0, s0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4b57      	ldr	r3, [pc, #348]	; (800713c <atan+0x334>)
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 f951 	bl	8000288 <__aeabi_dsub>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4606      	mov	r6, r0
 8006fea:	460f      	mov	r7, r1
 8006fec:	4b53      	ldr	r3, [pc, #332]	; (800713c <atan+0x334>)
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 f94b 	bl	800028c <__adddf3>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	f7f9 fc21 	bl	8000844 <__aeabi_ddiv>
 8007002:	f04f 0a01 	mov.w	sl, #1
 8007006:	4604      	mov	r4, r0
 8007008:	460d      	mov	r5, r1
 800700a:	e764      	b.n	8006ed6 <atan+0xce>
 800700c:	4b4d      	ldr	r3, [pc, #308]	; (8007144 <atan+0x33c>)
 800700e:	429e      	cmp	r6, r3
 8007010:	dc1d      	bgt.n	800704e <atan+0x246>
 8007012:	ee10 0a10 	vmov	r0, s0
 8007016:	2200      	movs	r2, #0
 8007018:	4b4b      	ldr	r3, [pc, #300]	; (8007148 <atan+0x340>)
 800701a:	4629      	mov	r1, r5
 800701c:	f7f9 f934 	bl	8000288 <__aeabi_dsub>
 8007020:	2200      	movs	r2, #0
 8007022:	4606      	mov	r6, r0
 8007024:	460f      	mov	r7, r1
 8007026:	4b48      	ldr	r3, [pc, #288]	; (8007148 <atan+0x340>)
 8007028:	4620      	mov	r0, r4
 800702a:	4629      	mov	r1, r5
 800702c:	f7f9 fae0 	bl	80005f0 <__aeabi_dmul>
 8007030:	2200      	movs	r2, #0
 8007032:	4b42      	ldr	r3, [pc, #264]	; (800713c <atan+0x334>)
 8007034:	f7f9 f92a 	bl	800028c <__adddf3>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 fc00 	bl	8000844 <__aeabi_ddiv>
 8007044:	f04f 0a02 	mov.w	sl, #2
 8007048:	4604      	mov	r4, r0
 800704a:	460d      	mov	r5, r1
 800704c:	e743      	b.n	8006ed6 <atan+0xce>
 800704e:	462b      	mov	r3, r5
 8007050:	ee10 2a10 	vmov	r2, s0
 8007054:	2000      	movs	r0, #0
 8007056:	493d      	ldr	r1, [pc, #244]	; (800714c <atan+0x344>)
 8007058:	f7f9 fbf4 	bl	8000844 <__aeabi_ddiv>
 800705c:	f04f 0a03 	mov.w	sl, #3
 8007060:	4604      	mov	r4, r0
 8007062:	460d      	mov	r5, r1
 8007064:	e737      	b.n	8006ed6 <atan+0xce>
 8007066:	4640      	mov	r0, r8
 8007068:	4649      	mov	r1, r9
 800706a:	f7f9 f90f 	bl	800028c <__adddf3>
 800706e:	4622      	mov	r2, r4
 8007070:	462b      	mov	r3, r5
 8007072:	f7f9 fabd 	bl	80005f0 <__aeabi_dmul>
 8007076:	4e36      	ldr	r6, [pc, #216]	; (8007150 <atan+0x348>)
 8007078:	4b36      	ldr	r3, [pc, #216]	; (8007154 <atan+0x34c>)
 800707a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800707e:	4456      	add	r6, sl
 8007080:	449a      	add	sl, r3
 8007082:	e9da 2300 	ldrd	r2, r3, [sl]
 8007086:	f7f9 f8ff 	bl	8000288 <__aeabi_dsub>
 800708a:	4622      	mov	r2, r4
 800708c:	462b      	mov	r3, r5
 800708e:	f7f9 f8fb 	bl	8000288 <__aeabi_dsub>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	e9d6 0100 	ldrd	r0, r1, [r6]
 800709a:	f7f9 f8f5 	bl	8000288 <__aeabi_dsub>
 800709e:	f1bb 0f00 	cmp.w	fp, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	460d      	mov	r5, r1
 80070a6:	f6bf aece 	bge.w	8006e46 <atan+0x3e>
 80070aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070ae:	4604      	mov	r4, r0
 80070b0:	461d      	mov	r5, r3
 80070b2:	e6c8      	b.n	8006e46 <atan+0x3e>
 80070b4:	a51c      	add	r5, pc, #112	; (adr r5, 8007128 <atan+0x320>)
 80070b6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80070ba:	e6c4      	b.n	8006e46 <atan+0x3e>
 80070bc:	f3af 8000 	nop.w
 80070c0:	54442d18 	.word	0x54442d18
 80070c4:	bff921fb 	.word	0xbff921fb
 80070c8:	8800759c 	.word	0x8800759c
 80070cc:	7e37e43c 	.word	0x7e37e43c
 80070d0:	e322da11 	.word	0xe322da11
 80070d4:	3f90ad3a 	.word	0x3f90ad3a
 80070d8:	24760deb 	.word	0x24760deb
 80070dc:	3fa97b4b 	.word	0x3fa97b4b
 80070e0:	a0d03d51 	.word	0xa0d03d51
 80070e4:	3fb10d66 	.word	0x3fb10d66
 80070e8:	c54c206e 	.word	0xc54c206e
 80070ec:	3fb745cd 	.word	0x3fb745cd
 80070f0:	920083ff 	.word	0x920083ff
 80070f4:	3fc24924 	.word	0x3fc24924
 80070f8:	5555550d 	.word	0x5555550d
 80070fc:	3fd55555 	.word	0x3fd55555
 8007100:	2c6a6c2f 	.word	0x2c6a6c2f
 8007104:	bfa2b444 	.word	0xbfa2b444
 8007108:	52defd9a 	.word	0x52defd9a
 800710c:	3fadde2d 	.word	0x3fadde2d
 8007110:	af749a6d 	.word	0xaf749a6d
 8007114:	3fb3b0f2 	.word	0x3fb3b0f2
 8007118:	fe231671 	.word	0xfe231671
 800711c:	3fbc71c6 	.word	0x3fbc71c6
 8007120:	9998ebc4 	.word	0x9998ebc4
 8007124:	3fc99999 	.word	0x3fc99999
 8007128:	54442d18 	.word	0x54442d18
 800712c:	3ff921fb 	.word	0x3ff921fb
 8007130:	440fffff 	.word	0x440fffff
 8007134:	7ff00000 	.word	0x7ff00000
 8007138:	3fdbffff 	.word	0x3fdbffff
 800713c:	3ff00000 	.word	0x3ff00000
 8007140:	3ff2ffff 	.word	0x3ff2ffff
 8007144:	40037fff 	.word	0x40037fff
 8007148:	3ff80000 	.word	0x3ff80000
 800714c:	bff00000 	.word	0xbff00000
 8007150:	080074b8 	.word	0x080074b8
 8007154:	080074d8 	.word	0x080074d8

08007158 <fabs>:
 8007158:	ec53 2b10 	vmov	r2, r3, d0
 800715c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007160:	ec43 2b10 	vmov	d0, r2, r3
 8007164:	4770      	bx	lr

08007166 <matherr>:
 8007166:	2000      	movs	r0, #0
 8007168:	4770      	bx	lr
 800716a:	0000      	movs	r0, r0
 800716c:	0000      	movs	r0, r0
	...

08007170 <nan>:
 8007170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007178 <nan+0x8>
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	00000000 	.word	0x00000000
 800717c:	7ff80000 	.word	0x7ff80000

08007180 <_init>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr

0800718c <_fini>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr
