
all_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08008510  08008510  00018510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08008880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  8 .bss          000002d4  200001e0  200001e0  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004b4  200004b4  000201e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018e1c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000385f  00000000  00000000  0003902c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b414  00000000  00000000  0003c88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00047ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  00048ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000837d  00000000  00000000  00049d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005604  00000000  00000000  000520ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000576b1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003b90  00000000  00000000  00057730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084f8 	.word	0x080084f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080084f8 	.word	0x080084f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_InitTick+0x3c>)
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_InitTick+0x40>)
{
 8000f56:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	7818      	ldrb	r0, [r3, #0]
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f62:	6810      	ldr	r0, [r2, #0]
 8000f64:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f68:	f000 fae6 	bl	8001538 <HAL_SYSTICK_Config>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	b958      	cbnz	r0, 8000f88 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	2d0f      	cmp	r5, #15
 8000f72:	d809      	bhi.n	8000f88 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	4602      	mov	r2, r0
 8000f76:	4629      	mov	r1, r5
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 fa9a 	bl	80014b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_InitTick+0x44>)
 8000f82:	4620      	mov	r0, r4
 8000f84:	601d      	str	r5, [r3, #0]
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_Init>:
{
 8000f98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x30>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000faa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 fa6b 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ffc8 	bl	8000f50 <HAL_InitTick>
  HAL_MspInit();
 8000fc0:	f003 fc42 	bl	8004848 <HAL_MspInit>
}
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	bd08      	pop	{r3, pc}
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x10>)
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_IncTick+0x14>)
 8000fd0:	6811      	ldr	r1, [r2, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	440b      	add	r3, r1
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000208 	.word	0x20000208
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <HAL_GetTick+0x8>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000208 	.word	0x20000208

08000ff0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	f000 809b 	beq.w	8001130 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ffa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000ffc:	b925      	cbnz	r5, 8001008 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffe:	f003 f9b5 	bl	800436c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001002:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001004:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800100a:	06db      	lsls	r3, r3, #27
 800100c:	f100 808e 	bmi.w	800112c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001016:	f023 0302 	bic.w	r3, r3, #2
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <HAL_ADC_Init+0x144>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001028:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	6861      	ldr	r1, [r4, #4]
 800102e:	430a      	orrs	r2, r1
 8001030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001032:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001034:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800103c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001046:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001048:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800104a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800104e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	430a      	orrs	r2, r1
 8001054:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001056:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001058:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800105a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800105e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	430a      	orrs	r2, r1
 8001064:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001066:	4934      	ldr	r1, [pc, #208]	; (8001138 <HAL_ADC_Init+0x148>)
 8001068:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800106a:	428a      	cmp	r2, r1
 800106c:	d052      	beq.n	8001114 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800106e:	6899      	ldr	r1, [r3, #8]
 8001070:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001074:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001076:	6899      	ldr	r1, [r3, #8]
 8001078:	430a      	orrs	r2, r1
 800107a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800107c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800107e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800108a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800108c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800108e:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001090:	f022 0202 	bic.w	r2, r2, #2
 8001094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800109c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800109e:	f894 2020 	ldrb.w	r2, [r4, #32]
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d03e      	beq.n	8001124 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010a6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80010b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	3901      	subs	r1, #1
 80010bc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010c0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010c4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ce:	3901      	subs	r1, #1
 80010d0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010d6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010d8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010e8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ea:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010ec:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010f4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010f8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010fc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010fe:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001102:	f023 0303 	bic.w	r3, r3, #3
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800110c:	2300      	movs	r3, #0
 800110e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8001112:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800111a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001122:	e7b2      	b.n	800108a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800112a:	e7c9      	b.n	80010c0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800112c:	2001      	movs	r0, #1
 800112e:	e7ed      	b.n	800110c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
}
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	40012300 	.word	0x40012300
 8001138:	0f000001 	.word	0x0f000001

0800113c <HAL_ADC_Start_IT>:
{
 800113c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001142:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001146:	2b01      	cmp	r3, #1
 8001148:	d067      	beq.n	800121a <HAL_ADC_Start_IT+0xde>
 800114a:	2301      	movs	r3, #1
 800114c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001150:	6803      	ldr	r3, [r0, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	07d1      	lsls	r1, r2, #31
 8001156:	d505      	bpl.n	8001164 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	07d2      	lsls	r2, r2, #31
 800115c:	d414      	bmi.n	8001188 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 800115e:	2000      	movs	r0, #0
}
 8001160:	b002      	add	sp, #8
 8001162:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001164:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001166:	492e      	ldr	r1, [pc, #184]	; (8001220 <HAL_ADC_Start_IT+0xe4>)
    __HAL_ADC_ENABLE(hadc);
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800116e:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <HAL_ADC_Start_IT+0xe8>)
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	fbb2 f2f1 	udiv	r2, r2, r1
 8001176:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800117a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 800117c:	9a01      	ldr	r2, [sp, #4]
 800117e:	2a00      	cmp	r2, #0
 8001180:	d0ea      	beq.n	8001158 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8001182:	9a01      	ldr	r2, [sp, #4]
 8001184:	3a01      	subs	r2, #1
 8001186:	e7f8      	b.n	800117a <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001188:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800118a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001196:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800119c:	bf41      	itttt	mi
 800119e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80011a0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80011a4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80011a8:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80011ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b0:	bf1c      	itt	ne
 80011b2:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80011b4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80011b8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011cc:	f042 0220 	orr.w	r2, r2, #32
 80011d0:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <HAL_ADC_Start_IT+0xec>)
 80011d4:	6851      	ldr	r1, [r2, #4]
 80011d6:	f011 0f1f 	tst.w	r1, #31
 80011da:	4914      	ldr	r1, [pc, #80]	; (800122c <HAL_ADC_Start_IT+0xf0>)
 80011dc:	d11a      	bne.n	8001214 <HAL_ADC_Start_IT+0xd8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011de:	428b      	cmp	r3, r1
 80011e0:	d006      	beq.n	80011f0 <HAL_ADC_Start_IT+0xb4>
 80011e2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80011e6:	428b      	cmp	r3, r1
 80011e8:	d10b      	bne.n	8001202 <HAL_ADC_Start_IT+0xc6>
 80011ea:	6852      	ldr	r2, [r2, #4]
 80011ec:	06d2      	lsls	r2, r2, #27
 80011ee:	d1b6      	bne.n	800115e <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f0:	6898      	ldr	r0, [r3, #8]
 80011f2:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011f6:	d1b2      	bne.n	800115e <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	e7ae      	b.n	8001160 <HAL_ADC_Start_IT+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001202:	490b      	ldr	r1, [pc, #44]	; (8001230 <HAL_ADC_Start_IT+0xf4>)
 8001204:	428b      	cmp	r3, r1
 8001206:	d1aa      	bne.n	800115e <HAL_ADC_Start_IT+0x22>
 8001208:	6852      	ldr	r2, [r2, #4]
 800120a:	f002 021f 	and.w	r2, r2, #31
 800120e:	2a0f      	cmp	r2, #15
 8001210:	d9ee      	bls.n	80011f0 <HAL_ADC_Start_IT+0xb4>
 8001212:	e7a4      	b.n	800115e <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001214:	428b      	cmp	r3, r1
 8001216:	d1a2      	bne.n	800115e <HAL_ADC_Start_IT+0x22>
 8001218:	e7ea      	b.n	80011f0 <HAL_ADC_Start_IT+0xb4>
  __HAL_LOCK(hadc);
 800121a:	2002      	movs	r0, #2
 800121c:	e7a0      	b.n	8001160 <HAL_ADC_Start_IT+0x24>
 800121e:	bf00      	nop
 8001220:	000f4240 	.word	0x000f4240
 8001224:	20000008 	.word	0x20000008
 8001228:	40012300 	.word	0x40012300
 800122c:	40012000 	.word	0x40012000
 8001230:	40012200 	.word	0x40012200

08001234 <HAL_ADC_LevelOutOfWindowCallback>:
 8001234:	4770      	bx	lr

08001236 <HAL_ADC_ErrorCallback>:
{
 8001236:	4770      	bx	lr

08001238 <HAL_ADC_IRQHandler>:
{
 8001238:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800123a:	6803      	ldr	r3, [r0, #0]
 800123c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800123e:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001240:	078d      	lsls	r5, r1, #30
{
 8001242:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8001244:	d52b      	bpl.n	800129e <HAL_ADC_IRQHandler+0x66>
 8001246:	0690      	lsls	r0, r2, #26
 8001248:	d529      	bpl.n	800129e <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800124c:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800124e:	bf5e      	ittt	pl
 8001250:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001252:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001256:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800125e:	d117      	bne.n	8001290 <HAL_ADC_IRQHandler+0x58>
 8001260:	7e22      	ldrb	r2, [r4, #24]
 8001262:	b9aa      	cbnz	r2, 8001290 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001266:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800126a:	d002      	beq.n	8001272 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800126c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800126e:	0552      	lsls	r2, r2, #21
 8001270:	d40e      	bmi.n	8001290 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	f022 0220 	bic.w	r2, r2, #32
 8001278:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800127a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800127c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001280:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001284:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001286:	bf5e      	ittt	pl
 8001288:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800128a:	f043 0301 	orrpl.w	r3, r3, #1
 800128e:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001290:	4620      	mov	r0, r4
 8001292:	f003 f9c3 	bl	800461c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	f06f 0212 	mvn.w	r2, #18
 800129c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80012a2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80012a4:	074d      	lsls	r5, r1, #29
 80012a6:	d532      	bpl.n	800130e <HAL_ADC_IRQHandler+0xd6>
 80012a8:	0610      	lsls	r0, r2, #24
 80012aa:	d530      	bpl.n	800130e <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012ae:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012b0:	bf5e      	ittt	pl
 80012b2:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80012b4:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80012b8:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80012c0:	d11e      	bne.n	8001300 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012c4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80012c8:	d002      	beq.n	80012d0 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012ca:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012cc:	0552      	lsls	r2, r2, #21
 80012ce:	d417      	bmi.n	8001300 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012d0:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012d2:	0555      	lsls	r5, r2, #21
 80012d4:	d414      	bmi.n	8001300 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012d6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012d8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012dc:	d110      	bne.n	8001300 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012de:	7e22      	ldrb	r2, [r4, #24]
 80012e0:	b972      	cbnz	r2, 8001300 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e8:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012f0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f4:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f6:	bf5e      	ittt	pl
 80012f8:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80012fa:	f043 0301 	orrpl.w	r3, r3, #1
 80012fe:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001300:	4620      	mov	r0, r4
 8001302:	f000 f8c3 	bl	800148c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	f06f 020c 	mvn.w	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001312:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001314:	07c9      	lsls	r1, r1, #31
 8001316:	d50f      	bpl.n	8001338 <HAL_ADC_IRQHandler+0x100>
 8001318:	0655      	lsls	r5, r2, #25
 800131a:	d50d      	bpl.n	8001338 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	07d8      	lsls	r0, r3, #31
 8001320:	d50a      	bpl.n	8001338 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff ff82 	bl	8001234 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	f06f 0201 	mvn.w	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800133c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800133e:	0689      	lsls	r1, r1, #26
 8001340:	d50d      	bpl.n	800135e <HAL_ADC_IRQHandler+0x126>
 8001342:	0152      	lsls	r2, r2, #5
 8001344:	d50b      	bpl.n	800135e <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001346:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001348:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800134c:	f042 0202 	orr.w	r2, r2, #2
 8001350:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001352:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001354:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001356:	f7ff ff6e 	bl	8001236 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	601d      	str	r5, [r3, #0]
 800135e:	bd38      	pop	{r3, r4, r5, pc}

08001360 <HAL_ADC_ConfigChannel>:
{
 8001360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001366:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800136a:	2b01      	cmp	r3, #1
 800136c:	f000 8083 	beq.w	8001476 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001370:	680d      	ldr	r5, [r1, #0]
 8001372:	6804      	ldr	r4, [r0, #0]
 8001374:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8001376:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001378:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800137a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800137e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001380:	d92a      	bls.n	80013d8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001382:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001386:	68e7      	ldr	r7, [r4, #12]
 8001388:	3b1e      	subs	r3, #30
 800138a:	f04f 0e07 	mov.w	lr, #7
 800138e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001392:	ea27 070e 	bic.w	r7, r7, lr
 8001396:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001398:	68e7      	ldr	r7, [r4, #12]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	433b      	orrs	r3, r7
 80013a0:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80013a2:	684a      	ldr	r2, [r1, #4]
 80013a4:	2a06      	cmp	r2, #6
 80013a6:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80013aa:	d825      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ac:	4413      	add	r3, r2
 80013ae:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80013b0:	1f59      	subs	r1, r3, #5
 80013b2:	231f      	movs	r3, #31
 80013b4:	408b      	lsls	r3, r1
 80013b6:	ea27 0303 	bic.w	r3, r7, r3
 80013ba:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80013be:	fa06 f101 	lsl.w	r1, r6, r1
 80013c2:	4311      	orrs	r1, r2
 80013c4:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_ADC_ConfigChannel+0x11c>)
 80013c8:	429c      	cmp	r4, r3
 80013ca:	d034      	beq.n	8001436 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80013cc:	2300      	movs	r3, #0
 80013ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013d2:	4618      	mov	r0, r3
}
 80013d4:	b003      	add	sp, #12
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013d8:	6927      	ldr	r7, [r4, #16]
 80013da:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80013de:	f04f 0e07 	mov.w	lr, #7
 80013e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80013e6:	ea27 070e 	bic.w	r7, r7, lr
 80013ea:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013ec:	6927      	ldr	r7, [r4, #16]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	433b      	orrs	r3, r7
 80013f4:	6123      	str	r3, [r4, #16]
 80013f6:	e7d4      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80013f8:	2a0c      	cmp	r2, #12
 80013fa:	d80e      	bhi.n	800141a <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013fc:	4413      	add	r3, r2
 80013fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001400:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001404:	231f      	movs	r3, #31
 8001406:	4093      	lsls	r3, r2
 8001408:	ea21 0303 	bic.w	r3, r1, r3
 800140c:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800140e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001410:	fa06 f202 	lsl.w	r2, r6, r2
 8001414:	431a      	orrs	r2, r3
 8001416:	6322      	str	r2, [r4, #48]	; 0x30
 8001418:	e7d5      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800141a:	4413      	add	r3, r2
 800141c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800141e:	3b41      	subs	r3, #65	; 0x41
 8001420:	221f      	movs	r2, #31
 8001422:	409a      	lsls	r2, r3
 8001424:	ea21 0202 	bic.w	r2, r1, r2
 8001428:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800142a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800142c:	fa06 f103 	lsl.w	r1, r6, r3
 8001430:	4311      	orrs	r1, r2
 8001432:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001434:	e7c7      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001436:	2d12      	cmp	r5, #18
 8001438:	d104      	bne.n	8001444 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_ADC_ConfigChannel+0x120>)
 800143c:	6853      	ldr	r3, [r2, #4]
 800143e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001442:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001444:	f1a5 0310 	sub.w	r3, r5, #16
 8001448:	2b01      	cmp	r3, #1
 800144a:	d8bf      	bhi.n	80013cc <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <HAL_ADC_ConfigChannel+0x120>)
 800144e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001450:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001452:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001456:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001458:	d1b8      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_ADC_ConfigChannel+0x124>)
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_ADC_ConfigChannel+0x128>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fbb3 f2f2 	udiv	r2, r3, r2
 8001464:	230a      	movs	r3, #10
 8001466:	4353      	muls	r3, r2
        counter--;
 8001468:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ad      	beq.n	80013cc <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001470:	9b01      	ldr	r3, [sp, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	e7f8      	b.n	8001468 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8001476:	2002      	movs	r0, #2
 8001478:	e7ac      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x74>
 800147a:	bf00      	nop
 800147c:	40012000 	.word	0x40012000
 8001480:	40012300 	.word	0x40012300
 8001484:	20000008 	.word	0x20000008
 8001488:	000f4240 	.word	0x000f4240

0800148c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800148c:	4770      	bx	lr
	...

08001490 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001492:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001494:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	0200      	lsls	r0, r0, #8
 80014a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80014aa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80014ac:	60d3      	str	r3, [r2, #12]
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b530      	push	{r4, r5, lr}
 80014b8:	68dc      	ldr	r4, [r3, #12]
 80014ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	bf28      	it	cs
 80014c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 0501 	mov.w	r5, #1
 80014d0:	fa05 f303 	lsl.w	r3, r5, r3
 80014d4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d8:	bf8c      	ite	hi
 80014da:	3c03      	subhi	r4, #3
 80014dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014de:	4019      	ands	r1, r3
 80014e0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e2:	fa05 f404 	lsl.w	r4, r5, r4
 80014e6:	3c01      	subs	r4, #1
 80014e8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80014ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	ea42 0201 	orr.w	r2, r2, r1
 80014f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	bfad      	iteet	ge
 80014f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	f000 000f 	andlt.w	r0, r0, #15
 80014fe:	4b06      	ldrlt	r3, [pc, #24]	; (8001518 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	bfb5      	itete	lt
 8001506:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001510:	bd30      	pop	{r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	e000ed14 	.word	0xe000ed14

0800151c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800151c:	2800      	cmp	r0, #0
 800151e:	db08      	blt.n	8001532 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001520:	0942      	lsrs	r2, r0, #5
 8001522:	2301      	movs	r3, #1
 8001524:	f000 001f 	and.w	r0, r0, #31
 8001528:	fa03 f000 	lsl.w	r0, r3, r0
 800152c:	4b01      	ldr	r3, [pc, #4]	; (8001534 <HAL_NVIC_EnableIRQ+0x18>)
 800152e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	3801      	subs	r0, #1
 800153a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800153e:	d20a      	bcs.n	8001556 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001544:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	21f0      	movs	r1, #240	; 0xf0
 8001548:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001564:	6803      	ldr	r3, [r0, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800156c:	f023 0303 	bic.w	r3, r3, #3
 8001570:	2118      	movs	r1, #24
 8001572:	3a10      	subs	r2, #16
 8001574:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001578:	4904      	ldr	r1, [pc, #16]	; (800158c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800157a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800157c:	bf88      	it	hi
 800157e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001580:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001582:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001584:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001586:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	08008510 	.word	0x08008510

08001590 <HAL_DMA_Init>:
{
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff fd26 	bl	8000fe4 <HAL_GetTick>
 8001598:	4605      	mov	r5, r0
  if(hdma == NULL)
 800159a:	2c00      	cmp	r4, #0
 800159c:	d071      	beq.n	8001682 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800159e:	2300      	movs	r3, #0
 80015a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80015a4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a6:	2302      	movs	r3, #2
 80015a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80015ac:	6813      	ldr	r3, [r2, #0]
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b4:	6821      	ldr	r1, [r4, #0]
 80015b6:	680b      	ldr	r3, [r1, #0]
 80015b8:	07d8      	lsls	r0, r3, #31
 80015ba:	d43c      	bmi.n	8001636 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80015bc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015be:	4d32      	ldr	r5, [pc, #200]	; (8001688 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015c4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c6:	68a3      	ldr	r3, [r4, #8]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	68e2      	ldr	r2, [r4, #12]
 80015cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ce:	6922      	ldr	r2, [r4, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	6962      	ldr	r2, [r4, #20]
 80015d4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	69e2      	ldr	r2, [r4, #28]
 80015d8:	4303      	orrs	r3, r0
 80015da:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80015dc:	6a22      	ldr	r2, [r4, #32]
 80015de:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015e2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e8:	bf01      	itttt	eq
 80015ea:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80015ec:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80015ee:	4335      	orreq	r5, r6
 80015f0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80015f2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80015f4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015f8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80015fc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001600:	d10b      	bne.n	800161a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001602:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001604:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001606:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001608:	b13d      	cbz	r5, 800161a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800160a:	b9f8      	cbnz	r0, 800164c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800160c:	2a01      	cmp	r2, #1
 800160e:	d02d      	beq.n	800166c <HAL_DMA_Init+0xdc>
 8001610:	d301      	bcc.n	8001616 <HAL_DMA_Init+0x86>
 8001612:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001614:	d101      	bne.n	800161a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001616:	01ea      	lsls	r2, r5, #7
 8001618:	d42b      	bmi.n	8001672 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800161a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff ffa1 	bl	8001564 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001622:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001624:	233f      	movs	r3, #63	; 0x3f
 8001626:	4093      	lsls	r3, r2
 8001628:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800162c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001630:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001634:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fcd5 	bl	8000fe4 <HAL_GetTick>
 800163a:	1b40      	subs	r0, r0, r5
 800163c:	2805      	cmp	r0, #5
 800163e:	d9b9      	bls.n	80015b4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001640:	2320      	movs	r3, #32
 8001642:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001644:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001646:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800164a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800164c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001650:	d113      	bne.n	800167a <HAL_DMA_Init+0xea>
    switch (tmp)
 8001652:	2a03      	cmp	r2, #3
 8001654:	d8e1      	bhi.n	800161a <HAL_DMA_Init+0x8a>
 8001656:	a001      	add	r0, pc, #4	; (adr r0, 800165c <HAL_DMA_Init+0xcc>)
 8001658:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800165c:	08001673 	.word	0x08001673
 8001660:	08001617 	.word	0x08001617
 8001664:	08001673 	.word	0x08001673
 8001668:	0800166d 	.word	0x0800166d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800166c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001670:	d1d3      	bne.n	800161a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001672:	2340      	movs	r3, #64	; 0x40
 8001674:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001676:	2001      	movs	r0, #1
 8001678:	e7e5      	b.n	8001646 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800167a:	2a02      	cmp	r2, #2
 800167c:	d9f9      	bls.n	8001672 <HAL_DMA_Init+0xe2>
 800167e:	2a03      	cmp	r2, #3
 8001680:	e7c8      	b.n	8001614 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	bd70      	pop	{r4, r5, r6, pc}
 8001686:	bf00      	nop
 8001688:	f010803f 	.word	0xf010803f

0800168c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001690:	2b02      	cmp	r3, #2
 8001692:	d003      	beq.n	800169c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001698:	2001      	movs	r0, #1
 800169a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800169c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800169e:	2305      	movs	r3, #5
 80016a0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80016ac:	2000      	movs	r0, #0
}
 80016ae:	4770      	bx	lr

080016b0 <HAL_DMA_IRQHandler>:
{
 80016b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016b6:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80016ba:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016bc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80016be:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016c0:	2208      	movs	r2, #8
 80016c2:	409a      	lsls	r2, r3
 80016c4:	4216      	tst	r6, r2
{
 80016c6:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016c8:	d00c      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ca:	6801      	ldr	r1, [r0, #0]
 80016cc:	6808      	ldr	r0, [r1, #0]
 80016ce:	0740      	lsls	r0, r0, #29
 80016d0:	d508      	bpl.n	80016e4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d2:	6808      	ldr	r0, [r1, #0]
 80016d4:	f020 0004 	bic.w	r0, r0, #4
 80016d8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016da:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e4:	2201      	movs	r2, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	4216      	tst	r6, r2
 80016ea:	d008      	beq.n	80016fe <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ec:	6821      	ldr	r1, [r4, #0]
 80016ee:	6949      	ldr	r1, [r1, #20]
 80016f0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016f2:	bf41      	itttt	mi
 80016f4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016f6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80016f8:	f042 0202 	orrmi.w	r2, r2, #2
 80016fc:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fe:	2204      	movs	r2, #4
 8001700:	409a      	lsls	r2, r3
 8001702:	4216      	tst	r6, r2
 8001704:	d008      	beq.n	8001718 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001706:	6821      	ldr	r1, [r4, #0]
 8001708:	6809      	ldr	r1, [r1, #0]
 800170a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800170c:	bf41      	itttt	mi
 800170e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001710:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001712:	f042 0204 	orrmi.w	r2, r2, #4
 8001716:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001718:	2210      	movs	r2, #16
 800171a:	409a      	lsls	r2, r3
 800171c:	4216      	tst	r6, r2
 800171e:	d010      	beq.n	8001742 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	0709      	lsls	r1, r1, #28
 8001726:	d50c      	bpl.n	8001742 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001728:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	0350      	lsls	r0, r2, #13
 800172e:	d535      	bpl.n	800179c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0319      	lsls	r1, r3, #12
 8001734:	d401      	bmi.n	800173a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001738:	e000      	b.n	800173c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800173a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800173c:	b10b      	cbz	r3, 8001742 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800173e:	4620      	mov	r0, r4
 8001740:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001742:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001744:	2220      	movs	r2, #32
 8001746:	408a      	lsls	r2, r1
 8001748:	4216      	tst	r6, r2
 800174a:	d038      	beq.n	80017be <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	06c6      	lsls	r6, r0, #27
 8001752:	d534      	bpl.n	80017be <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001754:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001756:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800175a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800175e:	d125      	bne.n	80017ac <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001760:	f022 0216 	bic.w	r2, r2, #22
 8001764:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800176e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001770:	b90a      	cbnz	r2, 8001776 <HAL_DMA_IRQHandler+0xc6>
 8001772:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001774:	b11a      	cbz	r2, 800177e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	f022 0208 	bic.w	r2, r2, #8
 800177c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177e:	233f      	movs	r3, #63	; 0x3f
 8001780:	408b      	lsls	r3, r1
 8001782:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001784:	2300      	movs	r3, #0
 8001786:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800178a:	2301      	movs	r3, #1
 800178c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001790:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001792:	b10b      	cbz	r3, 8001798 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001794:	4620      	mov	r0, r4
 8001796:	4798      	blx	r3
}
 8001798:	b003      	add	sp, #12
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a0:	bf5e      	ittt	pl
 80017a2:	681a      	ldrpl	r2, [r3, #0]
 80017a4:	f022 0208 	bicpl.w	r2, r2, #8
 80017a8:	601a      	strpl	r2, [r3, #0]
 80017aa:	e7c4      	b.n	8001736 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ac:	0350      	lsls	r0, r2, #13
 80017ae:	d528      	bpl.n	8001802 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0319      	lsls	r1, r3, #12
 80017b4:	d432      	bmi.n	800181c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80017b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80017b8:	b10b      	cbz	r3, 80017be <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80017ba:	4620      	mov	r0, r4
 80017bc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0e9      	beq.n	8001798 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017c6:	07da      	lsls	r2, r3, #31
 80017c8:	d519      	bpl.n	80017fe <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80017ca:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80017cc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80017ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017da:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80017de:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80017e2:	9b01      	ldr	r3, [sp, #4]
 80017e4:	3301      	adds	r3, #1
 80017e6:	429f      	cmp	r7, r3
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	d302      	bcc.n	80017f2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017ec:	6813      	ldr	r3, [r2, #0]
 80017ee:	07db      	lsls	r3, r3, #31
 80017f0:	d4f7      	bmi.n	80017e2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80017f2:	2300      	movs	r3, #0
 80017f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80017fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001800:	e7c7      	b.n	8001792 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001808:	d108      	bne.n	800181c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	f021 0110 	bic.w	r1, r1, #16
 8001810:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001812:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001814:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001818:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800181c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800181e:	e7cb      	b.n	80017b8 <HAL_DMA_IRQHandler+0x108>
 8001820:	20000008 	.word	0x20000008

08001824 <HAL_DMA_GetState>:
  return hdma->State;
 8001824:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001828:	4770      	bx	lr
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001830:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80019e4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001838:	4a68      	ldr	r2, [pc, #416]	; (80019dc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80019e8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001840:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001842:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001848:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001850:	45b6      	cmp	lr, r6
 8001852:	f040 80ae 	bne.w	80019b2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001856:	684c      	ldr	r4, [r1, #4]
 8001858:	f024 0710 	bic.w	r7, r4, #16
 800185c:	2f02      	cmp	r7, #2
 800185e:	d116      	bne.n	800188e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001860:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001864:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001868:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800186c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001870:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001874:	f04f 0c0f 	mov.w	ip, #15
 8001878:	fa0c fc0b 	lsl.w	ip, ip, fp
 800187c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	690d      	ldr	r5, [r1, #16]
 8001882:	fa05 f50b 	lsl.w	r5, r5, fp
 8001886:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800188a:	f8ca 5020 	str.w	r5, [sl, #32]
 800188e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001894:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001898:	fa05 f50a 	lsl.w	r5, r5, sl
 800189c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018aa:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80018b2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b6:	d811      	bhi.n	80018dc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80018b8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ba:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018be:	68cf      	ldr	r7, [r1, #12]
 80018c0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80018c4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80018c8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80018ca:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018d0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80018d4:	409f      	lsls	r7, r3
 80018d6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80018da:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80018dc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018de:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	688f      	ldr	r7, [r1, #8]
 80018e2:	fa07 f70a 	lsl.w	r7, r7, sl
 80018e6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80018e8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ea:	00e5      	lsls	r5, r4, #3
 80018ec:	d561      	bpl.n	80019b2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	f04f 0b00 	mov.w	fp, #0
 80018f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80018f6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fa:	4d39      	ldr	r5, [pc, #228]	; (80019e0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001900:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001904:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001908:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800190c:	9703      	str	r7, [sp, #12]
 800190e:	9f03      	ldr	r7, [sp, #12]
 8001910:	f023 0703 	bic.w	r7, r3, #3
 8001914:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001918:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800191c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001920:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001924:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001928:	f04f 0e0f 	mov.w	lr, #15
 800192c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001930:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001932:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001936:	d043      	beq.n	80019c0 <HAL_GPIO_Init+0x194>
 8001938:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800193c:	42a8      	cmp	r0, r5
 800193e:	d041      	beq.n	80019c4 <HAL_GPIO_Init+0x198>
 8001940:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001944:	42a8      	cmp	r0, r5
 8001946:	d03f      	beq.n	80019c8 <HAL_GPIO_Init+0x19c>
 8001948:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800194c:	42a8      	cmp	r0, r5
 800194e:	d03d      	beq.n	80019cc <HAL_GPIO_Init+0x1a0>
 8001950:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001954:	42a8      	cmp	r0, r5
 8001956:	d03b      	beq.n	80019d0 <HAL_GPIO_Init+0x1a4>
 8001958:	4548      	cmp	r0, r9
 800195a:	d03b      	beq.n	80019d4 <HAL_GPIO_Init+0x1a8>
 800195c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001960:	42a8      	cmp	r0, r5
 8001962:	d039      	beq.n	80019d8 <HAL_GPIO_Init+0x1ac>
 8001964:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001968:	42a8      	cmp	r0, r5
 800196a:	bf14      	ite	ne
 800196c:	2508      	movne	r5, #8
 800196e:	2507      	moveq	r5, #7
 8001970:	fa05 f50c 	lsl.w	r5, r5, ip
 8001974:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001978:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800197a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800197c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001982:	bf0c      	ite	eq
 8001984:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001986:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001988:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800198a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001990:	bf0c      	ite	eq
 8001992:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001994:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001996:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001998:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800199a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800199e:	bf0c      	ite	eq
 80019a0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80019a2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80019a4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80019a6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80019aa:	bf54      	ite	pl
 80019ac:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80019ae:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80019b0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	3301      	adds	r3, #1
 80019b4:	2b10      	cmp	r3, #16
 80019b6:	f47f af44 	bne.w	8001842 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80019ba:	b005      	add	sp, #20
 80019bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c0:	465d      	mov	r5, fp
 80019c2:	e7d5      	b.n	8001970 <HAL_GPIO_Init+0x144>
 80019c4:	2501      	movs	r5, #1
 80019c6:	e7d3      	b.n	8001970 <HAL_GPIO_Init+0x144>
 80019c8:	2502      	movs	r5, #2
 80019ca:	e7d1      	b.n	8001970 <HAL_GPIO_Init+0x144>
 80019cc:	2503      	movs	r5, #3
 80019ce:	e7cf      	b.n	8001970 <HAL_GPIO_Init+0x144>
 80019d0:	2504      	movs	r5, #4
 80019d2:	e7cd      	b.n	8001970 <HAL_GPIO_Init+0x144>
 80019d4:	2505      	movs	r5, #5
 80019d6:	e7cb      	b.n	8001970 <HAL_GPIO_Init+0x144>
 80019d8:	2506      	movs	r5, #6
 80019da:	e7c9      	b.n	8001970 <HAL_GPIO_Init+0x144>
 80019dc:	40013c00 	.word	0x40013c00
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40021400 	.word	0x40021400

080019ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ec:	b10a      	cbz	r2, 80019f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ee:	6181      	str	r1, [r0, #24]
 80019f0:	4770      	bx	lr
 80019f2:	0409      	lsls	r1, r1, #16
 80019f4:	e7fb      	b.n	80019ee <HAL_GPIO_WritePin+0x2>

080019f6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019f6:	6801      	ldr	r1, [r0, #0]
 80019f8:	694b      	ldr	r3, [r1, #20]
 80019fa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	d010      	beq.n	8001a26 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a04:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a08:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a0a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0c:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a12:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a16:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001a22:	2001      	movs	r0, #1
 8001a24:	4770      	bx	lr
  }
  return HAL_OK;
 8001a26:	4618      	mov	r0, r3
}
 8001a28:	4770      	bx	lr

08001a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001a2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a2e:	4604      	mov	r4, r0
 8001a30:	4617      	mov	r7, r2
 8001a32:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a34:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001a38:	b28e      	uxth	r6, r1
 8001a3a:	6825      	ldr	r5, [r4, #0]
 8001a3c:	f1b8 0f01 	cmp.w	r8, #1
 8001a40:	bf0c      	ite	eq
 8001a42:	696b      	ldreq	r3, [r5, #20]
 8001a44:	69ab      	ldrne	r3, [r5, #24]
 8001a46:	ea36 0303 	bics.w	r3, r6, r3
 8001a4a:	bf14      	ite	ne
 8001a4c:	2001      	movne	r0, #1
 8001a4e:	2000      	moveq	r0, #0
 8001a50:	b908      	cbnz	r0, 8001a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a56:	696b      	ldr	r3, [r5, #20]
 8001a58:	055a      	lsls	r2, r3, #21
 8001a5a:	d516      	bpl.n	8001a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a64:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a68:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a6a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a7a:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a7e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001a80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001a84:	2001      	movs	r0, #1
 8001a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a8a:	1c7b      	adds	r3, r7, #1
 8001a8c:	d0d5      	beq.n	8001a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7ff faa9 	bl	8000fe4 <HAL_GetTick>
 8001a92:	eba0 0009 	sub.w	r0, r0, r9
 8001a96:	4287      	cmp	r7, r0
 8001a98:	d301      	bcc.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001a9a:	2f00      	cmp	r7, #0
 8001a9c:	d1cd      	bne.n	8001a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a9e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001aa0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001aa4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	e7e4      	b.n	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08001ab4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	460d      	mov	r5, r1
 8001aba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	075b      	lsls	r3, r3, #29
 8001ac2:	d501      	bpl.n	8001ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff ff94 	bl	80019f6 <I2C_IsAcknowledgeFailed>
 8001ace:	b9a8      	cbnz	r0, 8001afc <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001ad0:	1c6a      	adds	r2, r5, #1
 8001ad2:	d0f3      	beq.n	8001abc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad4:	f7ff fa86 	bl	8000fe4 <HAL_GetTick>
 8001ad8:	1b80      	subs	r0, r0, r6
 8001ada:	4285      	cmp	r5, r0
 8001adc:	d301      	bcc.n	8001ae2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001ade:	2d00      	cmp	r5, #0
 8001ae0:	d1ec      	bne.n	8001abc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae2:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001af2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001afc:	2001      	movs	r0, #1
}
 8001afe:	bd70      	pop	{r4, r5, r6, pc}

08001b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	4604      	mov	r4, r0
 8001b04:	460d      	mov	r5, r1
 8001b06:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b08:	6820      	ldr	r0, [r4, #0]
 8001b0a:	6943      	ldr	r3, [r0, #20]
 8001b0c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001b10:	d001      	beq.n	8001b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001b12:	2000      	movs	r0, #0
}
 8001b14:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b16:	6942      	ldr	r2, [r0, #20]
 8001b18:	06d2      	lsls	r2, r2, #27
 8001b1a:	d50e      	bpl.n	8001b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b1c:	f06f 0210 	mvn.w	r2, #16
 8001b20:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b22:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b24:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b30:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001b36:	2001      	movs	r0, #1
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3a:	f7ff fa53 	bl	8000fe4 <HAL_GetTick>
 8001b3e:	1b80      	subs	r0, r0, r6
 8001b40:	42a8      	cmp	r0, r5
 8001b42:	d801      	bhi.n	8001b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d1df      	bne.n	8001b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b48:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b4a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b4c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	e7e8      	b.n	8001b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001b5e <I2C_WaitOnFlagUntilTimeout>:
{
 8001b5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b62:	9e08      	ldr	r6, [sp, #32]
 8001b64:	4604      	mov	r4, r0
 8001b66:	4690      	mov	r8, r2
 8001b68:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b6a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001b6e:	b28d      	uxth	r5, r1
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f1b9 0f01 	cmp.w	r9, #1
 8001b76:	bf0c      	ite	eq
 8001b78:	695b      	ldreq	r3, [r3, #20]
 8001b7a:	699b      	ldrne	r3, [r3, #24]
 8001b7c:	ea35 0303 	bics.w	r3, r5, r3
 8001b80:	bf0c      	ite	eq
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2300      	movne	r3, #0
 8001b86:	4543      	cmp	r3, r8
 8001b88:	d002      	beq.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001b8a:	2000      	movs	r0, #0
}
 8001b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001b90:	1c7b      	adds	r3, r7, #1
 8001b92:	d0ed      	beq.n	8001b70 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b94:	f7ff fa26 	bl	8000fe4 <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	4287      	cmp	r7, r0
 8001b9c:	d301      	bcc.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	d1e6      	bne.n	8001b70 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba2:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ba4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ba8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001bb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001bc2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001bc2:	b570      	push	{r4, r5, r6, lr}
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	061b      	lsls	r3, r3, #24
 8001bd0:	d501      	bpl.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff ff0d 	bl	80019f6 <I2C_IsAcknowledgeFailed>
 8001bdc:	b9a8      	cbnz	r0, 8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001bde:	1c6a      	adds	r2, r5, #1
 8001be0:	d0f3      	beq.n	8001bca <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be2:	f7ff f9ff 	bl	8000fe4 <HAL_GetTick>
 8001be6:	1b80      	subs	r0, r0, r6
 8001be8:	4285      	cmp	r5, r0
 8001bea:	d301      	bcc.n	8001bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001bec:	2d00      	cmp	r5, #0
 8001bee:	d1ec      	bne.n	8001bca <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bf2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bf6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bfa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c04:	f042 0220 	orr.w	r2, r2, #32
 8001c08:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c0a:	2001      	movs	r0, #1
}
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c10 <HAL_I2C_Init>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001c12:	4604      	mov	r4, r0
 8001c14:	b908      	cbnz	r0, 8001c1a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
 8001c18:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c22:	b91b      	cbnz	r3, 8001c2c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001c24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c28:	f002 fc94 	bl	8004554 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001c2c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c2e:	2324      	movs	r3, #36	; 0x24
 8001c30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c34:	6813      	ldr	r3, [r2, #0]
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c3c:	f001 fab6 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c40:	6865      	ldr	r5, [r4, #4]
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_I2C_Init+0x138>)
 8001c44:	429d      	cmp	r5, r3
 8001c46:	d84d      	bhi.n	8001ce4 <HAL_I2C_Init+0xd4>
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_I2C_Init+0x13c>)
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	d9e3      	bls.n	8001c16 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c4e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c50:	493f      	ldr	r1, [pc, #252]	; (8001d50 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c52:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c54:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c60:	6a13      	ldr	r3, [r2, #32]
 8001c62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c66:	3101      	adds	r1, #1
 8001c68:	4319      	orrs	r1, r3
 8001c6a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c6c:	69d1      	ldr	r1, [r2, #28]
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_I2C_Init+0x138>)
 8001c70:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001c74:	429d      	cmp	r5, r3
 8001c76:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c7a:	f100 30ff 	add.w	r0, r0, #4294967295
 8001c7e:	d848      	bhi.n	8001d12 <HAL_I2C_Init+0x102>
 8001c80:	006d      	lsls	r5, r5, #1
 8001c82:	fbb0 f0f5 	udiv	r0, r0, r5
 8001c86:	3001      	adds	r0, #1
 8001c88:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	bf38      	it	cc
 8001c90:	2304      	movcc	r3, #4
 8001c92:	430b      	orrs	r3, r1
 8001c94:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c96:	6811      	ldr	r1, [r2, #0]
 8001c98:	6a20      	ldr	r0, [r4, #32]
 8001c9a:	69e3      	ldr	r3, [r4, #28]
 8001c9c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001ca0:	4303      	orrs	r3, r0
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca6:	6891      	ldr	r1, [r2, #8]
 8001ca8:	68e0      	ldr	r0, [r4, #12]
 8001caa:	6923      	ldr	r3, [r4, #16]
 8001cac:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001cb0:	4303      	orrs	r3, r0
 8001cb2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cba:	68d1      	ldr	r1, [r2, #12]
 8001cbc:	69a0      	ldr	r0, [r4, #24]
 8001cbe:	6963      	ldr	r3, [r4, #20]
 8001cc0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cc4:	4303      	orrs	r3, r0
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cdc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cde:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_I2C_Init+0x144>)
 8001ce6:	4298      	cmp	r0, r3
 8001ce8:	d995      	bls.n	8001c16 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cea:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001cec:	4e18      	ldr	r6, [pc, #96]	; (8001d50 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cee:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001cf0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf8:	4333      	orrs	r3, r6
 8001cfa:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cfc:	6a13      	ldr	r3, [r2, #32]
 8001cfe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d02:	4371      	muls	r1, r6
 8001d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d08:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001d0c:	fbb1 f1f6 	udiv	r1, r1, r6
 8001d10:	e7a9      	b.n	8001c66 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d12:	68a3      	ldr	r3, [r4, #8]
 8001d14:	b953      	cbnz	r3, 8001d2c <HAL_I2C_Init+0x11c>
 8001d16:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001d1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d1e:	1c43      	adds	r3, r0, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	b16b      	cbz	r3, 8001d42 <HAL_I2C_Init+0x132>
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	e7b2      	b.n	8001c92 <HAL_I2C_Init+0x82>
 8001d2c:	2319      	movs	r3, #25
 8001d2e:	436b      	muls	r3, r5
 8001d30:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d34:	1c43      	adds	r3, r0, #1
 8001d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3a:	b113      	cbz	r3, 8001d42 <HAL_I2C_Init+0x132>
 8001d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d40:	e7a7      	b.n	8001c92 <HAL_I2C_Init+0x82>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e7a5      	b.n	8001c92 <HAL_I2C_Init+0x82>
 8001d46:	bf00      	nop
 8001d48:	000186a0 	.word	0x000186a0
 8001d4c:	001e847f 	.word	0x001e847f
 8001d50:	000f4240 	.word	0x000f4240
 8001d54:	003d08ff 	.word	0x003d08ff

08001d58 <HAL_I2C_Master_Transmit>:
{
 8001d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	461f      	mov	r7, r3
 8001d60:	460d      	mov	r5, r1
 8001d62:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff f93e 	bl	8000fe4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d6c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d70:	d004      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001d72:	2502      	movs	r5, #2
}
 8001d74:	4628      	mov	r0, r5
 8001d76:	b004      	add	sp, #16
 8001d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d7c:	9000      	str	r0, [sp, #0]
 8001d7e:	2319      	movs	r3, #25
 8001d80:	2201      	movs	r2, #1
 8001d82:	4958      	ldr	r1, [pc, #352]	; (8001ee4 <HAL_I2C_Master_Transmit+0x18c>)
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff feea 	bl	8001b5e <I2C_WaitOnFlagUntilTimeout>
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d1f1      	bne.n	8001d72 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001d8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d0ed      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x1a>
 8001d96:	2301      	movs	r3, #1
 8001d98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001da2:	bf5e      	ittt	pl
 8001da4:	681a      	ldrpl	r2, [r3, #0]
 8001da6:	f042 0201 	orrpl.w	r2, r2, #1
 8001daa:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db2:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001db4:	2221      	movs	r2, #33	; 0x21
 8001db6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dba:	2210      	movs	r2, #16
 8001dbc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001dc4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dc8:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dca:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <HAL_I2C_Master_Transmit+0x190>)
 8001dcc:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001dd0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dd4:	2a08      	cmp	r2, #8
 8001dd6:	d004      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0x8a>
 8001dd8:	2a01      	cmp	r2, #1
 8001dda:	d002      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0x8a>
 8001ddc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001de0:	d104      	bne.n	8001dec <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e002      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dee:	2a12      	cmp	r2, #18
 8001df0:	d0f7      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001df2:	9600      	str	r6, [sp, #0]
 8001df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001df6:	2200      	movs	r2, #0
 8001df8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff feae 	bl	8001b5e <I2C_WaitOnFlagUntilTimeout>
 8001e02:	b108      	cbz	r0, 8001e08 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001e04:	2501      	movs	r5, #1
 8001e06:	e7b5      	b.n	8001d74 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e10:	d113      	bne.n	8001e3a <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e12:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001e16:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e18:	4633      	mov	r3, r6
 8001e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e1c:	4933      	ldr	r1, [pc, #204]	; (8001eec <HAL_I2C_Master_Transmit+0x194>)
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff fe03 	bl	8001a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e24:	4605      	mov	r5, r0
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d1ec      	bne.n	8001e04 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	9003      	str	r0, [sp, #12]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	9203      	str	r2, [sp, #12]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	9303      	str	r3, [sp, #12]
 8001e36:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001e38:	e044      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e3a:	11eb      	asrs	r3, r5, #7
 8001e3c:	f003 0306 	and.w	r3, r3, #6
 8001e40:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001e44:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e46:	492a      	ldr	r1, [pc, #168]	; (8001ef0 <HAL_I2C_Master_Transmit+0x198>)
 8001e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e4a:	4633      	mov	r3, r6
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff fdec 	bl	8001a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1d6      	bne.n	8001e04 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	b2ed      	uxtb	r5, r5
 8001e5a:	611d      	str	r5, [r3, #16]
 8001e5c:	e7dc      	b.n	8001e18 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5e:	4632      	mov	r2, r6
 8001e60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fead 	bl	8001bc2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e68:	b140      	cbz	r0, 8001e7c <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e6c:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6e:	bf01      	itttt	eq
 8001e70:	6822      	ldreq	r2, [r4, #0]
 8001e72:	6813      	ldreq	r3, [r2, #0]
 8001e74:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001e78:	6013      	streq	r3, [r2, #0]
 8001e7a:	e7c3      	b.n	8001e04 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e7e:	6820      	ldr	r0, [r4, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001e86:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001e88:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e94:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001e96:	1e51      	subs	r1, r2, #1
 8001e98:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e9a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001e9c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e9e:	d50a      	bpl.n	8001eb6 <HAL_I2C_Master_Transmit+0x15e>
 8001ea0:	b149      	cbz	r1, 8001eb6 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea2:	7859      	ldrb	r1, [r3, #1]
 8001ea4:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001eaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001eb0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001eb2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001eb4:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb6:	4632      	mov	r2, r6
 8001eb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f7ff fdfa 	bl	8001ab4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d1d2      	bne.n	8001e6a <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001ec4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1c9      	bne.n	8001e5e <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eca:	6821      	ldr	r1, [r4, #0]
 8001ecc:	680a      	ldr	r2, [r1, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001eda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ede:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001ee2:	e747      	b.n	8001d74 <HAL_I2C_Master_Transmit+0x1c>
 8001ee4:	00100002 	.word	0x00100002
 8001ee8:	ffff0000 	.word	0xffff0000
 8001eec:	00010002 	.word	0x00010002
 8001ef0:	00010008 	.word	0x00010008

08001ef4 <HAL_I2C_Master_Receive>:
{
 8001ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ef8:	4604      	mov	r4, r0
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	4698      	mov	r8, r3
 8001efe:	460f      	mov	r7, r1
 8001f00:	4691      	mov	r9, r2
 8001f02:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff f86e 	bl	8000fe4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f08:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001f0c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001f0e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f10:	d004      	beq.n	8001f1c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001f12:	2702      	movs	r7, #2
}
 8001f14:	4638      	mov	r0, r7
 8001f16:	b009      	add	sp, #36	; 0x24
 8001f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f1c:	9000      	str	r0, [sp, #0]
 8001f1e:	2319      	movs	r3, #25
 8001f20:	2201      	movs	r2, #1
 8001f22:	49a6      	ldr	r1, [pc, #664]	; (80021bc <HAL_I2C_Master_Receive+0x2c8>)
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff fe1a 	bl	8001b5e <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1f1      	bne.n	8001f12 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001f2e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d0ed      	beq.n	8001f12 <HAL_I2C_Master_Receive+0x1e>
 8001f36:	2301      	movs	r3, #1
 8001f38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001f42:	bf5e      	ittt	pl
 8001f44:	681a      	ldrpl	r2, [r3, #0]
 8001f46:	f042 0201 	orrpl.w	r2, r2, #1
 8001f4a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f52:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f54:	2222      	movs	r2, #34	; 0x22
 8001f56:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f60:	2200      	movs	r2, #0
 8001f62:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001f64:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f6a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f6c:	4a94      	ldr	r2, [pc, #592]	; (80021c0 <HAL_I2C_Master_Receive+0x2cc>)
 8001f6e:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f72:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8001f74:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f78:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f7c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7e:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f80:	d004      	beq.n	8001f8c <HAL_I2C_Master_Receive+0x98>
 8001f82:	2a01      	cmp	r2, #1
 8001f84:	d002      	beq.n	8001f8c <HAL_I2C_Master_Receive+0x98>
 8001f86:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f8a:	d104      	bne.n	8001f96 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e002      	b.n	8001f9c <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f98:	2a11      	cmp	r2, #17
 8001f9a:	d0f7      	beq.n	8001f8c <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f9c:	9500      	str	r5, [sp, #0]
 8001f9e:	4633      	mov	r3, r6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff fdd9 	bl	8001b5e <I2C_WaitOnFlagUntilTimeout>
 8001fac:	b108      	cbz	r0, 8001fb2 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001fae:	2701      	movs	r7, #1
 8001fb0:	e7b0      	b.n	8001f14 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb2:	6923      	ldr	r3, [r4, #16]
 8001fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	d140      	bne.n	800203e <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fbc:	f047 0701 	orr.w	r7, r7, #1
 8001fc0:	b2ff      	uxtb	r7, r7
 8001fc2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	4632      	mov	r2, r6
 8001fc8:	497e      	ldr	r1, [pc, #504]	; (80021c4 <HAL_I2C_Master_Receive+0x2d0>)
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fd2d 	bl	8001a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd0:	4607      	mov	r7, r0
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d1eb      	bne.n	8001fae <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001fd6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d063      	beq.n	80020a6 <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 8001fde:	2a01      	cmp	r2, #1
 8001fe0:	d174      	bne.n	80020cc <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fea:	9704      	str	r7, [sp, #16]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	9204      	str	r2, [sp, #16]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	9204      	str	r2, [sp, #16]
 8001ff4:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffe:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80021cc <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 8002002:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	d058      	beq.n	80020ba <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 8002008:	2b03      	cmp	r3, #3
 800200a:	f200 80ba 	bhi.w	8002182 <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 800200e:	2b01      	cmp	r3, #1
 8002010:	d177      	bne.n	8002102 <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	462a      	mov	r2, r5
 8002014:	4631      	mov	r1, r6
 8002016:	4620      	mov	r0, r4
 8002018:	f7ff fd72 	bl	8001b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800201c:	2800      	cmp	r0, #0
 800201e:	d1c6      	bne.n	8001fae <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002020:	6822      	ldr	r2, [r4, #0]
 8002022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002024:	6912      	ldr	r2, [r2, #16]
 8002026:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800202a:	3301      	adds	r3, #1
 800202c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800202e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002030:	3b01      	subs	r3, #1
 8002032:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002034:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002036:	3b01      	subs	r3, #1
 8002038:	b29b      	uxth	r3, r3
 800203a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800203c:	e7e1      	b.n	8002002 <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800203e:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8002042:	f008 0806 	and.w	r8, r8, #6
 8002046:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800204a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800204c:	495e      	ldr	r1, [pc, #376]	; (80021c8 <HAL_I2C_Master_Receive+0x2d4>)
 800204e:	462b      	mov	r3, r5
 8002050:	4632      	mov	r2, r6
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff fce9 	bl	8001a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002058:	2800      	cmp	r0, #0
 800205a:	d1a8      	bne.n	8001fae <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800205c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800205e:	4959      	ldr	r1, [pc, #356]	; (80021c4 <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002060:	b2ff      	uxtb	r7, r7
 8002062:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002064:	4632      	mov	r2, r6
 8002066:	462b      	mov	r3, r5
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff fcde 	bl	8001a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206e:	4602      	mov	r2, r0
 8002070:	2800      	cmp	r0, #0
 8002072:	d19c      	bne.n	8001fae <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	9007      	str	r0, [sp, #28]
 8002078:	6959      	ldr	r1, [r3, #20]
 800207a:	9107      	str	r1, [sp, #28]
 800207c:	6999      	ldr	r1, [r3, #24]
 800207e:	9107      	str	r1, [sp, #28]
 8002080:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002088:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800208a:	4620      	mov	r0, r4
 800208c:	9500      	str	r5, [sp, #0]
 800208e:	4633      	mov	r3, r6
 8002090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002094:	f7ff fd63 	bl	8001b5e <I2C_WaitOnFlagUntilTimeout>
 8002098:	2800      	cmp	r0, #0
 800209a:	d188      	bne.n	8001fae <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800209c:	6822      	ldr	r2, [r4, #0]
 800209e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80020a2:	6113      	str	r3, [r2, #16]
 80020a4:	e78e      	b.n	8001fc4 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a6:	9703      	str	r7, [sp, #12]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	9203      	str	r2, [sp, #12]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	9203      	str	r2, [sp, #12]
 80020b0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	2320      	movs	r3, #32
 80020bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80020c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80020ca:	e723      	b.n	8001f14 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 80020cc:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80020d0:	d10d      	bne.n	80020ee <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020de:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e0:	9705      	str	r7, [sp, #20]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	9205      	str	r2, [sp, #20]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	9305      	str	r3, [sp, #20]
 80020ea:	9b05      	ldr	r3, [sp, #20]
 80020ec:	e787      	b.n	8001ffe <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020f2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f4:	9706      	str	r7, [sp, #24]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	9206      	str	r2, [sp, #24]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	9306      	str	r3, [sp, #24]
 80020fe:	9b06      	ldr	r3, [sp, #24]
 8002100:	e77d      	b.n	8001ffe <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 8002102:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002104:	9500      	str	r5, [sp, #0]
 8002106:	4633      	mov	r3, r6
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	4641      	mov	r1, r8
 800210e:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8002110:	d11a      	bne.n	8002148 <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002112:	f7ff fd24 	bl	8001b5e <I2C_WaitOnFlagUntilTimeout>
 8002116:	2800      	cmp	r0, #0
 8002118:	f47f af49 	bne.w	8001fae <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002124:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002126:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800212c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800212e:	1c53      	adds	r3, r2, #1
 8002130:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002132:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002138:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800213a:	3b01      	subs	r3, #1
 800213c:	b29b      	uxth	r3, r3
 800213e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002140:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	7053      	strb	r3, [r2, #1]
 8002146:	e76f      	b.n	8002028 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002148:	f7ff fd09 	bl	8001b5e <I2C_WaitOnFlagUntilTimeout>
 800214c:	4602      	mov	r2, r0
 800214e:	2800      	cmp	r0, #0
 8002150:	f47f af2d 	bne.w	8001fae <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	6819      	ldr	r1, [r3, #0]
 8002158:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800215c:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8002164:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002166:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8002168:	3301      	adds	r3, #1
 800216a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800216c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002172:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002174:	3b01      	subs	r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800217a:	4641      	mov	r1, r8
 800217c:	4633      	mov	r3, r6
 800217e:	4620      	mov	r0, r4
 8002180:	e7c7      	b.n	8002112 <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002182:	462a      	mov	r2, r5
 8002184:	4631      	mov	r1, r6
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff fcba 	bl	8001b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800218c:	2800      	cmp	r0, #0
 800218e:	f47f af0e 	bne.w	8001fae <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002192:	6822      	ldr	r2, [r4, #0]
 8002194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002196:	6912      	ldr	r2, [r2, #16]
 8002198:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800219a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800219c:	1c53      	adds	r3, r2, #1
 800219e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80021a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021a2:	3b01      	subs	r3, #1
 80021a4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80021a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	6959      	ldr	r1, [r3, #20]
 80021b2:	0749      	lsls	r1, r1, #29
 80021b4:	f57f af25 	bpl.w	8002002 <HAL_I2C_Master_Receive+0x10e>
 80021b8:	e7c3      	b.n	8002142 <HAL_I2C_Master_Receive+0x24e>
 80021ba:	bf00      	nop
 80021bc:	00100002 	.word	0x00100002
 80021c0:	ffff0000 	.word	0xffff0000
 80021c4:	00010002 	.word	0x00010002
 80021c8:	00010008 	.word	0x00010008
 80021cc:	00010004 	.word	0x00010004

080021d0 <HAL_I2C_MasterTxCpltCallback>:
 80021d0:	4770      	bx	lr

080021d2 <HAL_I2C_MasterRxCpltCallback>:
 80021d2:	4770      	bx	lr

080021d4 <HAL_I2C_SlaveTxCpltCallback>:
 80021d4:	4770      	bx	lr

080021d6 <HAL_I2C_SlaveRxCpltCallback>:
 80021d6:	4770      	bx	lr

080021d8 <HAL_I2C_AddrCallback>:
{
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_ListenCpltCallback>:
 80021da:	4770      	bx	lr

080021dc <HAL_I2C_MemTxCpltCallback>:
 80021dc:	4770      	bx	lr

080021de <HAL_I2C_MemRxCpltCallback>:
 80021de:	4770      	bx	lr

080021e0 <HAL_I2C_ErrorCallback>:
 80021e0:	4770      	bx	lr

080021e2 <HAL_I2C_AbortCpltCallback>:
{
 80021e2:	4770      	bx	lr

080021e4 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80021e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e6:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 80021ec:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ee:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 80021f0:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 80021f2:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 80021f4:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 80021fa:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80021fc:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fe:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8002200:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8002202:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002204:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8002206:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 800220a:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800220c:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800220e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8002212:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002214:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002216:	d108      	bne.n	800222a <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002218:	2220      	movs	r2, #32
 800221a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800221e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002222:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002224:	f7ff ffdd 	bl	80021e2 <HAL_I2C_AbortCpltCallback>
 8002228:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800222a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800222e:	2928      	cmp	r1, #40	; 0x28
 8002230:	d10d      	bne.n	800224e <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8002232:	6814      	ldr	r4, [r2, #0]
 8002234:	f044 0401 	orr.w	r4, r4, #1
 8002238:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223a:	6814      	ldr	r4, [r2, #0]
 800223c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002240:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002244:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8002248:	f7ff ffca 	bl	80021e0 <HAL_I2C_ErrorCallback>
 800224c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 800224e:	2220      	movs	r2, #32
 8002250:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002258:	e7f6      	b.n	8002248 <I2C_DMAAbort+0x64>
	...

0800225c <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800225c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002260:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002264:	2b10      	cmp	r3, #16
{
 8002266:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002268:	b2d2      	uxtb	r2, r2
{
 800226a:	4604      	mov	r4, r0
 800226c:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800226e:	d105      	bne.n	800227c <I2C_ITError+0x20>
 8002270:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002272:	bf02      	ittt	eq
 8002274:	6819      	ldreq	r1, [r3, #0]
 8002276:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 800227a:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800227c:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002280:	2928      	cmp	r1, #40	; 0x28
 8002282:	d13a      	bne.n	80022fa <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002284:	2200      	movs	r2, #0
 8002286:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002288:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002292:	d059      	beq.n	8002348 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002294:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002296:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229c:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800229e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <I2C_ITError+0x13c>)
 80022a6:	d035      	beq.n	8002314 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022a8:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022aa:	f7ff f9ef 	bl	800168c <HAL_DMA_Abort_IT>
 80022ae:	b150      	cbz	r0, 80022c6 <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 80022b0:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80022b4:	6813      	ldr	r3, [r2, #0]
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	2320      	movs	r3, #32
 80022be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80022c4:	4798      	blx	r3
  CurrentState = hi2c->State;
 80022c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80022ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022cc:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 80022ce:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80022d0:	d512      	bpl.n	80022f8 <I2C_ITError+0x9c>
 80022d2:	2b28      	cmp	r3, #40	; 0x28
 80022d4:	d110      	bne.n	80022f8 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	6853      	ldr	r3, [r2, #4]
 80022da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022de:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80022e0:	4b2e      	ldr	r3, [pc, #184]	; (800239c <I2C_ITError+0x140>)
 80022e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80022e4:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80022ea:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80022ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80022f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80022f4:	f7ff ff71 	bl	80021da <HAL_I2C_ListenCpltCallback>
 80022f8:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	0509      	lsls	r1, r1, #20
 80022fe:	d404      	bmi.n	800230a <I2C_ITError+0xae>
 8002300:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8002302:	bf1c      	itt	ne
 8002304:	2220      	movne	r2, #32
 8002306:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800230a:	2200      	movs	r2, #0
 800230c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002312:	e7bb      	b.n	800228c <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002314:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002316:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002318:	f7ff f9b8 	bl	800168c <HAL_DMA_Abort_IT>
 800231c:	2800      	cmp	r0, #0
 800231e:	d0d2      	beq.n	80022c6 <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	0652      	lsls	r2, r2, #25
 8002326:	d505      	bpl.n	8002334 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800232e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002330:	3301      	adds	r3, #1
 8002332:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002334:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002336:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002340:	2320      	movs	r3, #32
 8002342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002346:	e7bc      	b.n	80022c2 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002348:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800234c:	2960      	cmp	r1, #96	; 0x60
 800234e:	d115      	bne.n	800237c <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8002350:	2120      	movs	r1, #32
 8002352:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002356:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	0650      	lsls	r0, r2, #25
 800235c:	d505      	bpl.n	800236a <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002366:	3301      	adds	r3, #1
 8002368:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	6813      	ldr	r3, [r2, #0]
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002374:	4620      	mov	r0, r4
 8002376:	f7ff ff34 	bl	80021e2 <HAL_I2C_AbortCpltCallback>
 800237a:	e7a4      	b.n	80022c6 <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	0651      	lsls	r1, r2, #25
 8002380:	d505      	bpl.n	800238e <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002382:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800238a:	3301      	adds	r3, #1
 800238c:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800238e:	4620      	mov	r0, r4
 8002390:	f7ff ff26 	bl	80021e0 <HAL_I2C_ErrorCallback>
 8002394:	e797      	b.n	80022c6 <I2C_ITError+0x6a>
 8002396:	bf00      	nop
 8002398:	080021e5 	.word	0x080021e5
 800239c:	ffff0000 	.word	0xffff0000

080023a0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023a0:	6803      	ldr	r3, [r0, #0]
{
 80023a2:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023a4:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023a6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023a8:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 80023ac:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023ae:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023b0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023b4:	2910      	cmp	r1, #16
{
 80023b6:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023b8:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023ba:	d002      	beq.n	80023c2 <HAL_I2C_EV_IRQHandler+0x22>
 80023bc:	2940      	cmp	r1, #64	; 0x40
 80023be:	f040 82b6 	bne.w	800292e <HAL_I2C_EV_IRQHandler+0x58e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023c2:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023c4:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80023c6:	f011 0f01 	tst.w	r1, #1
 80023ca:	d107      	bne.n	80023dc <HAL_I2C_EV_IRQHandler+0x3c>
 80023cc:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 80023d0:	d002      	beq.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 80023d2:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80023d6:	d152      	bne.n	800247e <HAL_I2C_EV_IRQHandler+0xde>
}
 80023d8:	b00d      	add	sp, #52	; 0x34
 80023da:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023dc:	0595      	lsls	r5, r2, #22
 80023de:	d54e      	bpl.n	800247e <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80023e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023e2:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 80023e6:	d10c      	bne.n	8002402 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80023e8:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80023ea:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ec:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80023f0:	2a40      	cmp	r2, #64	; 0x40
 80023f2:	d111      	bne.n	8002418 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 80023f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80023f6:	b952      	cbnz	r2, 800240e <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80023fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023fe:	611a      	str	r2, [r3, #16]
 8002400:	e7ea      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002402:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002404:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8002408:	d1f0      	bne.n	80023ec <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800240a:	2208      	movs	r2, #8
 800240c:	e7ed      	b.n	80023ea <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800240e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	e7f2      	b.n	80023fe <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002418:	6922      	ldr	r2, [r4, #16]
 800241a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800241e:	d11b      	bne.n	8002458 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002420:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002424:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002426:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002428:	d112      	bne.n	8002450 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800242a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800242e:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002430:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002432:	b912      	cbnz	r2, 800243a <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002434:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002436:	2900      	cmp	r1, #0
 8002438:	d0ce      	beq.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800243a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800243c:	b91a      	cbnz	r2, 8002446 <HAL_I2C_EV_IRQHandler+0xa6>
 800243e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002440:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002442:	2a00      	cmp	r2, #0
 8002444:	d0c8      	beq.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	e7c3      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	e7ea      	b.n	800242e <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8002458:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800245a:	b932      	cbnz	r2, 800246a <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800245c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800245e:	11d2      	asrs	r2, r2, #7
 8002460:	f002 0206 	and.w	r2, r2, #6
 8002464:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002468:	e7c9      	b.n	80023fe <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 800246a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800246c:	2a01      	cmp	r2, #1
 800246e:	d1b3      	bne.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002470:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002472:	11d2      	asrs	r2, r2, #7
 8002474:	f002 0206 	and.w	r2, r2, #6
 8002478:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800247c:	e7bf      	b.n	80023fe <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800247e:	070d      	lsls	r5, r1, #28
 8002480:	d503      	bpl.n	800248a <HAL_I2C_EV_IRQHandler+0xea>
 8002482:	0595      	lsls	r5, r2, #22
 8002484:	d501      	bpl.n	800248a <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002486:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002488:	e7e4      	b.n	8002454 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800248a:	078d      	lsls	r5, r1, #30
 800248c:	f140 80e1 	bpl.w	8002652 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002490:	0595      	lsls	r5, r2, #22
 8002492:	f140 80de 	bpl.w	8002652 <HAL_I2C_EV_IRQHandler+0x2b2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002496:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800249a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800249c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80024a2:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024a4:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024a6:	f040 80cc 	bne.w	8002642 <HAL_I2C_EV_IRQHandler+0x2a2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80024ac:	b940      	cbnz	r0, 80024c0 <HAL_I2C_EV_IRQHandler+0x120>
 80024ae:	2940      	cmp	r1, #64	; 0x40
 80024b0:	d106      	bne.n	80024c0 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	9001      	str	r0, [sp, #4]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	9b01      	ldr	r3, [sp, #4]
 80024be:	e78b      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024c2:	b981      	cbnz	r1, 80024e6 <HAL_I2C_EV_IRQHandler+0x146>
 80024c4:	6920      	ldr	r0, [r4, #16]
 80024c6:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80024ca:	d10c      	bne.n	80024e6 <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024cc:	9102      	str	r1, [sp, #8]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	9202      	str	r2, [sp, #8]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	9202      	str	r2, [sp, #8]
 80024d6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024de:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 80024e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024e2:	3301      	adds	r3, #1
 80024e4:	e028      	b.n	8002538 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 80024e6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80024e8:	b289      	uxth	r1, r1
 80024ea:	b951      	cbnz	r1, 8002502 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ec:	9103      	str	r1, [sp, #12]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	9203      	str	r2, [sp, #12]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	9203      	str	r2, [sp, #12]
 80024f6:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e019      	b.n	8002536 <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8002502:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002504:	b289      	uxth	r1, r1
 8002506:	2901      	cmp	r1, #1
 8002508:	d14a      	bne.n	80025a0 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800250a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800250e:	d11c      	bne.n	800254a <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002516:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800251e:	d00d      	beq.n	800253c <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002528:	2200      	movs	r2, #0
 800252a:	9204      	str	r2, [sp, #16]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	9204      	str	r2, [sp, #16]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	9304      	str	r3, [sp, #16]
 8002534:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	6523      	str	r3, [r4, #80]	; 0x50
 800253a:	e74d      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253c:	9205      	str	r2, [sp, #20]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	9205      	str	r2, [sp, #20]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	9205      	str	r2, [sp, #20]
 8002546:	9a05      	ldr	r2, [sp, #20]
 8002548:	e7d6      	b.n	80024f8 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800254a:	2a08      	cmp	r2, #8
 800254c:	d01c      	beq.n	8002588 <HAL_I2C_EV_IRQHandler+0x1e8>
 800254e:	2a20      	cmp	r2, #32
 8002550:	d01a      	beq.n	8002588 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002552:	2d12      	cmp	r5, #18
 8002554:	d10d      	bne.n	8002572 <HAL_I2C_EV_IRQHandler+0x1d2>
 8002556:	2a01      	cmp	r2, #1
 8002558:	d116      	bne.n	8002588 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002560:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002562:	2200      	movs	r2, #0
 8002564:	9206      	str	r2, [sp, #24]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	9206      	str	r2, [sp, #24]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	9306      	str	r3, [sp, #24]
 800256e:	9b06      	ldr	r3, [sp, #24]
 8002570:	e7e1      	b.n	8002536 <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002572:	2a10      	cmp	r2, #16
 8002574:	d8f1      	bhi.n	800255a <HAL_I2C_EV_IRQHandler+0x1ba>
 8002576:	498e      	ldr	r1, [pc, #568]	; (80027b0 <HAL_I2C_EV_IRQHandler+0x410>)
 8002578:	fa21 f202 	lsr.w	r2, r1, r2
 800257c:	07d0      	lsls	r0, r2, #31
 800257e:	d5ec      	bpl.n	800255a <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002586:	e7eb      	b.n	8002560 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002590:	2200      	movs	r2, #0
 8002592:	9207      	str	r2, [sp, #28]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	9207      	str	r2, [sp, #28]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	9207      	str	r2, [sp, #28]
 800259c:	9a07      	ldr	r2, [sp, #28]
 800259e:	e7ab      	b.n	80024f8 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 80025a0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80025a2:	b289      	uxth	r1, r1
 80025a4:	2902      	cmp	r1, #2
 80025a6:	d12c      	bne.n	8002602 <HAL_I2C_EV_IRQHandler+0x262>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025a8:	2a10      	cmp	r2, #16
 80025aa:	d803      	bhi.n	80025b4 <HAL_I2C_EV_IRQHandler+0x214>
 80025ac:	4980      	ldr	r1, [pc, #512]	; (80027b0 <HAL_I2C_EV_IRQHandler+0x410>)
 80025ae:	40d1      	lsrs	r1, r2
 80025b0:	07c9      	lsls	r1, r1, #31
 80025b2:	d422      	bmi.n	80025fa <HAL_I2C_EV_IRQHandler+0x25a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025ba:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	050d      	lsls	r5, r1, #20
 80025c8:	d50f      	bpl.n	80025ea <HAL_I2C_EV_IRQHandler+0x24a>
 80025ca:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80025ce:	d008      	beq.n	80025e2 <HAL_I2C_EV_IRQHandler+0x242>
 80025d0:	1e51      	subs	r1, r2, #1
 80025d2:	291f      	cmp	r1, #31
 80025d4:	bf9d      	ittte	ls
 80025d6:	4a77      	ldrls	r2, [pc, #476]	; (80027b4 <HAL_I2C_EV_IRQHandler+0x414>)
 80025d8:	40ca      	lsrls	r2, r1
 80025da:	43d2      	mvnls	r2, r2
 80025dc:	2201      	movhi	r2, #1
 80025de:	07d0      	lsls	r0, r2, #31
 80025e0:	d403      	bmi.n	80025ea <HAL_I2C_EV_IRQHandler+0x24a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025e8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	2200      	movs	r2, #0
 80025ec:	9208      	str	r2, [sp, #32]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	9208      	str	r2, [sp, #32]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	9308      	str	r3, [sp, #32]
 80025f6:	9b08      	ldr	r3, [sp, #32]
 80025f8:	e79d      	b.n	8002536 <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002600:	e7df      	b.n	80025c2 <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002608:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	0509      	lsls	r1, r1, #20
 800260e:	d510      	bpl.n	8002632 <HAL_I2C_EV_IRQHandler+0x292>
 8002610:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002614:	d009      	beq.n	800262a <HAL_I2C_EV_IRQHandler+0x28a>
 8002616:	3a01      	subs	r2, #1
 8002618:	2a1f      	cmp	r2, #31
 800261a:	bf9d      	ittte	ls
 800261c:	4965      	ldrls	r1, [pc, #404]	; (80027b4 <HAL_I2C_EV_IRQHandler+0x414>)
 800261e:	fa21 f202 	lsrls.w	r2, r1, r2
 8002622:	43d2      	mvnls	r2, r2
 8002624:	2201      	movhi	r2, #1
 8002626:	07d2      	lsls	r2, r2, #31
 8002628:	d403      	bmi.n	8002632 <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002630:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2200      	movs	r2, #0
 8002634:	9209      	str	r2, [sp, #36]	; 0x24
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	9209      	str	r2, [sp, #36]	; 0x24
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	9309      	str	r3, [sp, #36]	; 0x24
 800263e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002640:	e779      	b.n	8002536 <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2200      	movs	r2, #0
 8002644:	920a      	str	r2, [sp, #40]	; 0x28
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	920a      	str	r2, [sp, #40]	; 0x28
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	930a      	str	r3, [sp, #40]	; 0x28
 800264e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002650:	e6c2      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002652:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002656:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002658:	f000 80ae 	beq.w	80027b8 <HAL_I2C_EV_IRQHandler+0x418>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800265c:	0505      	lsls	r5, r0, #20
 800265e:	f53f aebb 	bmi.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002662:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002666:	f001 0104 	and.w	r1, r1, #4
 800266a:	d069      	beq.n	8002740 <HAL_I2C_EV_IRQHandler+0x3a0>
 800266c:	0550      	lsls	r0, r2, #21
 800266e:	d567      	bpl.n	8002740 <HAL_I2C_EV_IRQHandler+0x3a0>
 8002670:	2900      	cmp	r1, #0
 8002672:	d165      	bne.n	8002740 <HAL_I2C_EV_IRQHandler+0x3a0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002674:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002678:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800267a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800267e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002680:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002682:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002684:	b9c5      	cbnz	r5, 80026b8 <HAL_I2C_EV_IRQHandler+0x318>
 8002686:	2a21      	cmp	r2, #33	; 0x21
 8002688:	d118      	bne.n	80026bc <HAL_I2C_EV_IRQHandler+0x31c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800268a:	2808      	cmp	r0, #8
 800268c:	d078      	beq.n	8002780 <HAL_I2C_EV_IRQHandler+0x3e0>
 800268e:	2820      	cmp	r0, #32
 8002690:	d076      	beq.n	8002780 <HAL_I2C_EV_IRQHandler+0x3e0>
 8002692:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002696:	d073      	beq.n	8002780 <HAL_I2C_EV_IRQHandler+0x3e0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800269e:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026a0:	2311      	movs	r3, #17
 80026a2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	2320      	movs	r3, #32
 80026ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff fd8d 	bl	80021d0 <HAL_I2C_MasterTxCpltCallback>
 80026b6:	e68f      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80026b8:	2a21      	cmp	r2, #33	; 0x21
 80026ba:	d005      	beq.n	80026c8 <HAL_I2C_EV_IRQHandler+0x328>
 80026bc:	2940      	cmp	r1, #64	; 0x40
 80026be:	f47f ae8b 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80026c2:	2a22      	cmp	r2, #34	; 0x22
 80026c4:	f47f ae88 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 80026c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026ca:	b292      	uxth	r2, r2
 80026cc:	b91a      	cbnz	r2, 80026d6 <HAL_I2C_EV_IRQHandler+0x336>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d4:	e6ba      	b.n	800244c <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026d6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80026da:	2a40      	cmp	r2, #64	; 0x40
 80026dc:	d126      	bne.n	800272c <HAL_I2C_EV_IRQHandler+0x38c>
        if (hi2c->EventCount == 0U)
 80026de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80026e0:	b962      	cbnz	r2, 80026fc <HAL_I2C_EV_IRQHandler+0x35c>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80026e2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80026e4:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80026e8:	d104      	bne.n	80026f4 <HAL_I2C_EV_IRQHandler+0x354>
 80026ea:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026ec:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80026ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026f0:	3302      	adds	r3, #2
 80026f2:	e721      	b.n	8002538 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	e6f1      	b.n	80024e0 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 80026fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80026fe:	2a01      	cmp	r2, #1
 8002700:	d102      	bne.n	8002708 <HAL_I2C_EV_IRQHandler+0x368>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002702:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	e7f7      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x358>
        else if (hi2c->EventCount == 2U)
 8002708:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800270a:	2a02      	cmp	r2, #2
 800270c:	f47f ae64 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002710:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002714:	2a22      	cmp	r2, #34	; 0x22
 8002716:	d104      	bne.n	8002722 <HAL_I2C_EV_IRQHandler+0x382>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e65a      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002722:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002726:	2a21      	cmp	r2, #33	; 0x21
 8002728:	f47f ae56 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800272e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002732:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002734:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002736:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002738:	3b01      	subs	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800273e:	e64b      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002740:	2900      	cmp	r1, #0
 8002742:	f43f ae49 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 8002746:	0592      	lsls	r2, r2, #22
 8002748:	f57f ae46 	bpl.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800274c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800274e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002752:	2a21      	cmp	r2, #33	; 0x21
 8002754:	f47f ae40 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8002758:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800275a:	b292      	uxth	r2, r2
 800275c:	2a00      	cmp	r2, #0
 800275e:	d1e5      	bne.n	800272c <HAL_I2C_EV_IRQHandler+0x38c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002760:	2908      	cmp	r1, #8
 8002762:	d00d      	beq.n	8002780 <HAL_I2C_EV_IRQHandler+0x3e0>
 8002764:	2920      	cmp	r1, #32
 8002766:	d00b      	beq.n	8002780 <HAL_I2C_EV_IRQHandler+0x3e0>
 8002768:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800276c:	d008      	beq.n	8002780 <HAL_I2C_EV_IRQHandler+0x3e0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002774:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002776:	2311      	movs	r3, #17
 8002778:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 800277e:	e794      	b.n	80026aa <HAL_I2C_EV_IRQHandler+0x30a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002786:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002790:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002792:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002794:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002796:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800279a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027a2:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 80027a4:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027a6:	d184      	bne.n	80026b2 <HAL_I2C_EV_IRQHandler+0x312>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80027a8:	f7ff fd18 	bl	80021dc <HAL_I2C_MemTxCpltCallback>
 80027ac:	e614      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 80027ae:	bf00      	nop
 80027b0:	00010014 	.word	0x00010014
 80027b4:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027b8:	0505      	lsls	r5, r0, #20
 80027ba:	f53f ae0d 	bmi.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027be:	f011 0f40 	tst.w	r1, #64	; 0x40
 80027c2:	f001 0104 	and.w	r1, r1, #4
 80027c6:	d048      	beq.n	800285a <HAL_I2C_EV_IRQHandler+0x4ba>
 80027c8:	0550      	lsls	r0, r2, #21
 80027ca:	d546      	bpl.n	800285a <HAL_I2C_EV_IRQHandler+0x4ba>
 80027cc:	2900      	cmp	r1, #0
 80027ce:	d144      	bne.n	800285a <HAL_I2C_EV_IRQHandler+0x4ba>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027d0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80027d4:	2a22      	cmp	r2, #34	; 0x22
 80027d6:	f47f adff 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 80027da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027dc:	b292      	uxth	r2, r2
    if (tmp > 3U)
 80027de:	2a03      	cmp	r2, #3
 80027e0:	d914      	bls.n	800280c <HAL_I2C_EV_IRQHandler+0x46c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80027e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ea:	3301      	adds	r3, #1
 80027ec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80027f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	f47f adec 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	6853      	ldr	r3, [r2, #4]
 8002804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002808:	6053      	str	r3, [r2, #4]
 800280a:	e5e5      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800280c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800280e:	2802      	cmp	r0, #2
 8002810:	f43f ade2 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 8002814:	2a01      	cmp	r2, #1
 8002816:	f63f addf 	bhi.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002820:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002828:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002832:	3301      	adds	r3, #1
 8002834:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002836:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002838:	3b01      	subs	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800283e:	2320      	movs	r3, #32
 8002840:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002844:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d168      	bne.n	8002922 <HAL_I2C_EV_IRQHandler+0x582>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002850:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fcc3 	bl	80021de <HAL_I2C_MemRxCpltCallback>
 8002858:	e5be      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285a:	2900      	cmp	r1, #0
 800285c:	f43f adbc 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 8002860:	0592      	lsls	r2, r2, #22
 8002862:	f57f adb9 	bpl.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002866:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002868:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800286a:	b289      	uxth	r1, r1
 800286c:	2904      	cmp	r1, #4
 800286e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002870:	d109      	bne.n	8002886 <HAL_I2C_EV_IRQHandler+0x4e6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002878:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800287e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002880:	3301      	adds	r3, #1
 8002882:	6263      	str	r3, [r4, #36]	; 0x24
 8002884:	e757      	b.n	8002736 <HAL_I2C_EV_IRQHandler+0x396>
  else if (hi2c->XferCount == 3U)
 8002886:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002888:	b280      	uxth	r0, r0
 800288a:	2803      	cmp	r0, #3
 800288c:	d10c      	bne.n	80028a8 <HAL_I2C_EV_IRQHandler+0x508>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800288e:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002890:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002892:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8002896:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002898:	d0ef      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x4da>
 800289a:	2a02      	cmp	r2, #2
 800289c:	d0ed      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x4da>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e7e8      	b.n	800287a <HAL_I2C_EV_IRQHandler+0x4da>
  else if (hi2c->XferCount == 2U)
 80028a8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80028aa:	b280      	uxth	r0, r0
 80028ac:	2802      	cmp	r0, #2
 80028ae:	d1e4      	bne.n	800287a <HAL_I2C_EV_IRQHandler+0x4da>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80028b0:	2a01      	cmp	r2, #1
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_EV_IRQHandler+0x518>
 80028b4:	2a10      	cmp	r2, #16
 80028b6:	d128      	bne.n	800290a <HAL_I2C_EV_IRQHandler+0x56a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80028c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028c6:	1c53      	adds	r3, r2, #1
 80028c8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80028ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80028d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028da:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 80028dc:	3301      	adds	r3, #1
 80028de:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80028e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028e8:	6853      	ldr	r3, [r2, #4]
 80028ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ee:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	2320      	movs	r3, #32
 80028f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002904:	d10d      	bne.n	8002922 <HAL_I2C_EV_IRQHandler+0x582>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	6323      	str	r3, [r4, #48]	; 0x30
 8002908:	e7a3      	b.n	8002852 <HAL_I2C_EV_IRQHandler+0x4b2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800290a:	2a04      	cmp	r2, #4
 800290c:	d001      	beq.n	8002912 <HAL_I2C_EV_IRQHandler+0x572>
 800290e:	2a02      	cmp	r2, #2
 8002910:	d103      	bne.n	800291a <HAL_I2C_EV_IRQHandler+0x57a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002918:	e7d1      	b.n	80028be <HAL_I2C_EV_IRQHandler+0x51e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002920:	e7cd      	b.n	80028be <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002922:	2312      	movs	r3, #18
 8002924:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fc53 	bl	80021d2 <HAL_I2C_MasterRxCpltCallback>
 800292c:	e554      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800292e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002930:	b321      	cbz	r1, 800297c <HAL_I2C_EV_IRQHandler+0x5dc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002932:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8002934:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002936:	f011 0f02 	tst.w	r1, #2
 800293a:	d029      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x5f0>
 800293c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002940:	d026      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x5f0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002942:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002944:	b102      	cbz	r2, 8002948 <HAL_I2C_EV_IRQHandler+0x5a8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002946:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002948:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800294c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002950:	2a28      	cmp	r2, #40	; 0x28
 8002952:	d116      	bne.n	8002982 <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800295c:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002960:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8002962:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002966:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800296a:	bf54      	ite	pl
 800296c:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800296e:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff fc2f 	bl	80021d8 <HAL_I2C_AddrCallback>
 800297a:	e52d      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800297c:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800297e:	6959      	ldr	r1, [r3, #20]
 8002980:	e7d9      	b.n	8002936 <HAL_I2C_EV_IRQHandler+0x596>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002982:	f06f 0202 	mvn.w	r2, #2
 8002986:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002988:	2300      	movs	r3, #0
 800298a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800298e:	e523      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002990:	06cd      	lsls	r5, r1, #27
 8002992:	f140 80af 	bpl.w	8002af4 <HAL_I2C_EV_IRQHandler+0x754>
 8002996:	0595      	lsls	r5, r2, #22
 8002998:	f140 80ac 	bpl.w	8002af4 <HAL_I2C_EV_IRQHandler+0x754>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800299c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029a6:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029a8:	2200      	movs	r2, #0
 80029aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c0:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029c6:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029c8:	d520      	bpl.n	8002a0c <HAL_I2C_EV_IRQHandler+0x66c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029ca:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80029ce:	2a22      	cmp	r2, #34	; 0x22
 80029d0:	d148      	bne.n	8002a64 <HAL_I2C_EV_IRQHandler+0x6c4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80029d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029d4:	6802      	ldr	r2, [r0, #0]
 80029d6:	6852      	ldr	r2, [r2, #4]
 80029d8:	b292      	uxth	r2, r2
 80029da:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80029dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029de:	b292      	uxth	r2, r2
 80029e0:	b11a      	cbz	r2, 80029ea <HAL_I2C_EV_IRQHandler+0x64a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029e4:	f042 0204 	orr.w	r2, r2, #4
 80029e8:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029f2:	f7fe ff17 	bl	8001824 <HAL_DMA_GetState>
 80029f6:	2801      	cmp	r0, #1
 80029f8:	d008      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029fc:	4b78      	ldr	r3, [pc, #480]	; (8002be0 <HAL_I2C_EV_IRQHandler+0x840>)
 80029fe:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a00:	f7fe fe44 	bl	800168c <HAL_DMA_Abort_IT>
 8002a04:	b110      	cbz	r0, 8002a0c <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002a0a:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002a0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b313      	cbz	r3, 8002a58 <HAL_I2C_EV_IRQHandler+0x6b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	0752      	lsls	r2, r2, #29
 8002a18:	d509      	bpl.n	8002a2e <HAL_I2C_EV_IRQHandler+0x68e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a22:	3301      	adds	r3, #1
 8002a24:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	0650      	lsls	r0, r2, #25
 8002a34:	d509      	bpl.n	8002a4a <HAL_I2C_EV_IRQHandler+0x6aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a3e:	3301      	adds	r3, #1
 8002a40:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8002a4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b11b      	cbz	r3, 8002a58 <HAL_I2C_EV_IRQHandler+0x6b8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a5a:	b303      	cbz	r3, 8002a9e <HAL_I2C_EV_IRQHandler+0x6fe>
    I2C_ITError(hi2c);
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7ff fbfd 	bl	800225c <I2C_ITError>
 8002a62:	e4b9      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a64:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002a66:	6802      	ldr	r2, [r0, #0]
 8002a68:	6852      	ldr	r2, [r2, #4]
 8002a6a:	b292      	uxth	r2, r2
 8002a6c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002a6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a70:	b292      	uxth	r2, r2
 8002a72:	b11a      	cbz	r2, 8002a7c <HAL_I2C_EV_IRQHandler+0x6dc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a76:	f042 0204 	orr.w	r2, r2, #4
 8002a7a:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a82:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a84:	f7fe fece 	bl	8001824 <HAL_DMA_GetState>
 8002a88:	2801      	cmp	r0, #1
 8002a8a:	d0bf      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <HAL_I2C_EV_IRQHandler+0x840>)
 8002a90:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a92:	f7fe fdfb 	bl	800168c <HAL_DMA_Abort_IT>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d0b8      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a9a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002a9c:	e7b4      	b.n	8002a08 <HAL_I2C_EV_IRQHandler+0x668>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a9e:	2d2a      	cmp	r5, #42	; 0x2a
 8002aa0:	d106      	bne.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x710>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aa4:	2328      	movs	r3, #40	; 0x28
 8002aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7ff fb93 	bl	80021d6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ab0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002ab4:	2b28      	cmp	r3, #40	; 0x28
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x732>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_I2C_EV_IRQHandler+0x844>)
 8002aba:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ac2:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002acc:	f7ff fb85 	bl	80021da <HAL_I2C_ListenCpltCallback>
 8002ad0:	e482      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ad2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ad4:	2b22      	cmp	r3, #34	; 0x22
 8002ad6:	d002      	beq.n	8002ade <HAL_I2C_EV_IRQHandler+0x73e>
 8002ad8:	2d22      	cmp	r5, #34	; 0x22
 8002ada:	f47f ac7d 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ae2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff fb72 	bl	80021d6 <HAL_I2C_SlaveRxCpltCallback>
 8002af2:	e471      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002af4:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002af8:	2821      	cmp	r0, #33	; 0x21
 8002afa:	f001 0504 	and.w	r5, r1, #4
 8002afe:	d135      	bne.n	8002b6c <HAL_I2C_EV_IRQHandler+0x7cc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b00:	0609      	lsls	r1, r1, #24
 8002b02:	d527      	bpl.n	8002b54 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002b04:	0551      	lsls	r1, r2, #21
 8002b06:	d525      	bpl.n	8002b54 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002b08:	bb25      	cbnz	r5, 8002b54 <HAL_I2C_EV_IRQHandler+0x7b4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b0a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002b0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b10:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b12:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	f43f ac5f 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002b20:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8002b22:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002b24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b26:	3a01      	subs	r2, #1
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b2e:	b292      	uxth	r2, r2
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	f47f ac51 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 8002b36:	2929      	cmp	r1, #41	; 0x29
 8002b38:	f47f ac4e 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b44:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b46:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff fb41 	bl	80021d4 <HAL_I2C_SlaveTxCpltCallback>
 8002b52:	e441      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b54:	2d00      	cmp	r5, #0
 8002b56:	f43f ac3f 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 8002b5a:	0595      	lsls	r5, r2, #22
 8002b5c:	f57f ac3c 	bpl.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002b60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b62:	b292      	uxth	r2, r2
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	f47f ade1 	bne.w	800272c <HAL_I2C_EV_IRQHandler+0x38c>
 8002b6a:	e435      	b.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b6c:	0648      	lsls	r0, r1, #25
 8002b6e:	d527      	bpl.n	8002bc0 <HAL_I2C_EV_IRQHandler+0x820>
 8002b70:	0551      	lsls	r1, r2, #21
 8002b72:	d525      	bpl.n	8002bc0 <HAL_I2C_EV_IRQHandler+0x820>
 8002b74:	bb25      	cbnz	r5, 8002bc0 <HAL_I2C_EV_IRQHandler+0x820>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b76:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002b7a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002b7c:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b7e:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002b80:	2900      	cmp	r1, #0
 8002b82:	f43f ac29 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b8e:	3301      	adds	r3, #1
 8002b90:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002b92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f ac1a 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 8002ba4:	2a2a      	cmp	r2, #42	; 0x2a
 8002ba6:	f47f ac17 	bne.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	6853      	ldr	r3, [r2, #4]
 8002bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bb2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bb4:	2322      	movs	r3, #34	; 0x22
 8002bb6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bb8:	2328      	movs	r3, #40	; 0x28
 8002bba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002bbe:	e795      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x74c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc0:	2d00      	cmp	r5, #0
 8002bc2:	f43f ac09 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 8002bc6:	0592      	lsls	r2, r2, #22
 8002bc8:	f57f ac06 	bpl.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002bcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	f43f ac01 	beq.w	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	7013      	strb	r3, [r2, #0]
 8002bdc:	e64f      	b.n	800287e <HAL_I2C_EV_IRQHandler+0x4de>
 8002bde:	bf00      	nop
 8002be0:	080021e5 	.word	0x080021e5
 8002be4:	ffff0000 	.word	0xffff0000

08002be8 <HAL_I2C_ER_IRQHandler>:
{
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bea:	6803      	ldr	r3, [r0, #0]
 8002bec:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bee:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bf0:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 8002bf4:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bf6:	d006      	beq.n	8002c06 <HAL_I2C_ER_IRQHandler+0x1e>
 8002bf8:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bfc:	bf1e      	ittt	ne
 8002bfe:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 8002c02:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8002c04:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c06:	05b9      	lsls	r1, r7, #22
 8002c08:	d506      	bpl.n	8002c18 <HAL_I2C_ER_IRQHandler+0x30>
 8002c0a:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c0c:	bf42      	ittt	mi
 8002c0e:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002c12:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c16:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c18:	0578      	lsls	r0, r7, #21
 8002c1a:	d537      	bpl.n	8002c8c <HAL_I2C_ER_IRQHandler+0xa4>
 8002c1c:	05f1      	lsls	r1, r6, #23
 8002c1e:	d535      	bpl.n	8002c8c <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 8002c20:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002c24:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002c26:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002c2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c2c:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 8002c30:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002c32:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c34:	d15a      	bne.n	8002cec <HAL_I2C_ER_IRQHandler+0x104>
 8002c36:	2900      	cmp	r1, #0
 8002c38:	d158      	bne.n	8002cec <HAL_I2C_ER_IRQHandler+0x104>
 8002c3a:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002c3e:	2921      	cmp	r1, #33	; 0x21
 8002c40:	d003      	beq.n	8002c4a <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c42:	2a28      	cmp	r2, #40	; 0x28
 8002c44:	d152      	bne.n	8002cec <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c46:	2821      	cmp	r0, #33	; 0x21
 8002c48:	d150      	bne.n	8002cec <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c50:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c52:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_ER_IRQHandler+0x72>
 8002c56:	2920      	cmp	r1, #32
 8002c58:	d12a      	bne.n	8002cb0 <HAL_I2C_ER_IRQHandler+0xc8>
 8002c5a:	2a28      	cmp	r2, #40	; 0x28
 8002c5c:	d128      	bne.n	8002cb0 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <HAL_I2C_ER_IRQHandler+0x128>)
 8002c60:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c68:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c6e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c76:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c78:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c7a:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c7c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c7e:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c88:	f7ff faa7 	bl	80021da <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c8c:	053a      	lsls	r2, r7, #20
 8002c8e:	d53c      	bpl.n	8002d0a <HAL_I2C_ER_IRQHandler+0x122>
 8002c90:	05f3      	lsls	r3, r6, #23
 8002c92:	d53a      	bpl.n	8002d0a <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002c9a:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c9e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ca2:	431d      	orrs	r5, r3
 8002ca4:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8002ca6:	4620      	mov	r0, r4
}
 8002ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002cac:	f7ff bad6 	b.w	800225c <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cb0:	2a21      	cmp	r2, #33	; 0x21
 8002cb2:	d117      	bne.n	8002ce4 <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cb4:	4916      	ldr	r1, [pc, #88]	; (8002d10 <HAL_I2C_ER_IRQHandler+0x128>)
 8002cb6:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cb8:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ccc:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd2:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff fa79 	bl	80021d4 <HAL_I2C_SlaveTxCpltCallback>
 8002ce2:	e7d3      	b.n	8002c8c <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce8:	615a      	str	r2, [r3, #20]
 8002cea:	e7cf      	b.n	8002c8c <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cf0:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002cf2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002cf6:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	bf04      	itt	eq
 8002cfa:	681a      	ldreq	r2, [r3, #0]
 8002cfc:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8002d00:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	bf08      	it	eq
 8002d06:	601a      	streq	r2, [r3, #0]
 8002d08:	e7c0      	b.n	8002c8c <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	d1c8      	bne.n	8002ca0 <HAL_I2C_ER_IRQHandler+0xb8>
 8002d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d10:	ffff0000 	.word	0xffff0000

08002d14 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8002d14:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002d16:	4770      	bx	lr

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	b918      	cbnz	r0, 8002d28 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002d20:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002d22:	b002      	add	sp, #8
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d28:	6803      	ldr	r3, [r0, #0]
 8002d2a:	07dd      	lsls	r5, r3, #31
 8002d2c:	d410      	bmi.n	8002d50 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	0798      	lsls	r0, r3, #30
 8002d32:	d458      	bmi.n	8002de6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	071a      	lsls	r2, r3, #28
 8002d38:	f100 809a 	bmi.w	8002e70 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	075b      	lsls	r3, r3, #29
 8002d40:	f100 80b8 	bmi.w	8002eb4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d44:	69a2      	ldr	r2, [r4, #24]
 8002d46:	2a00      	cmp	r2, #0
 8002d48:	f040 8119 	bne.w	8002f7e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e7e8      	b.n	8002d22 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d50:	4ba6      	ldr	r3, [pc, #664]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	f002 020c 	and.w	r2, r2, #12
 8002d58:	2a04      	cmp	r2, #4
 8002d5a:	d007      	beq.n	8002d6c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d62:	2a08      	cmp	r2, #8
 8002d64:	d10a      	bne.n	8002d7c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	0259      	lsls	r1, r3, #9
 8002d6a:	d507      	bpl.n	8002d7c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	4b9f      	ldr	r3, [pc, #636]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	039a      	lsls	r2, r3, #14
 8002d72:	d5dc      	bpl.n	8002d2e <HAL_RCC_OscConfig+0x16>
 8002d74:	6863      	ldr	r3, [r4, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1d9      	bne.n	8002d2e <HAL_RCC_OscConfig+0x16>
 8002d7a:	e7d1      	b.n	8002d20 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7c:	6863      	ldr	r3, [r4, #4]
 8002d7e:	4d9b      	ldr	r5, [pc, #620]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d111      	bne.n	8002daa <HAL_RCC_OscConfig+0x92>
 8002d86:	682b      	ldr	r3, [r5, #0]
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d8e:	f7fe f929 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4d96      	ldr	r5, [pc, #600]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002d94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	682b      	ldr	r3, [r5, #0]
 8002d98:	039b      	lsls	r3, r3, #14
 8002d9a:	d4c8      	bmi.n	8002d2e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe f922 	bl	8000fe4 <HAL_GetTick>
 8002da0:	1b80      	subs	r0, r0, r6
 8002da2:	2864      	cmp	r0, #100	; 0x64
 8002da4:	d9f7      	bls.n	8002d96 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002da6:	2003      	movs	r0, #3
 8002da8:	e7bb      	b.n	8002d22 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dae:	d104      	bne.n	8002dba <HAL_RCC_OscConfig+0xa2>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db6:	602b      	str	r3, [r5, #0]
 8002db8:	e7e5      	b.n	8002d86 <HAL_RCC_OscConfig+0x6e>
 8002dba:	682a      	ldr	r2, [r5, #0]
 8002dbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dc0:	602a      	str	r2, [r5, #0]
 8002dc2:	682a      	ldr	r2, [r5, #0]
 8002dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dc8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1df      	bne.n	8002d8e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002dce:	f7fe f909 	bl	8000fe4 <HAL_GetTick>
 8002dd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	039f      	lsls	r7, r3, #14
 8002dd8:	d5a9      	bpl.n	8002d2e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dda:	f7fe f903 	bl	8000fe4 <HAL_GetTick>
 8002dde:	1b80      	subs	r0, r0, r6
 8002de0:	2864      	cmp	r0, #100	; 0x64
 8002de2:	d9f7      	bls.n	8002dd4 <HAL_RCC_OscConfig+0xbc>
 8002de4:	e7df      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	4b81      	ldr	r3, [pc, #516]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	f012 0f0c 	tst.w	r2, #12
 8002dee:	d007      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df6:	2a08      	cmp	r2, #8
 8002df8:	d111      	bne.n	8002e1e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	025e      	lsls	r6, r3, #9
 8002dfe:	d40e      	bmi.n	8002e1e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e00:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	0795      	lsls	r5, r2, #30
 8002e06:	d502      	bpl.n	8002e0e <HAL_RCC_OscConfig+0xf6>
 8002e08:	68e2      	ldr	r2, [r4, #12]
 8002e0a:	2a01      	cmp	r2, #1
 8002e0c:	d188      	bne.n	8002d20 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	6921      	ldr	r1, [r4, #16]
 8002e12:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002e16:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002e1a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1c:	e78a      	b.n	8002d34 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e1e:	68e2      	ldr	r2, [r4, #12]
 8002e20:	4b73      	ldr	r3, [pc, #460]	; (8002ff0 <HAL_RCC_OscConfig+0x2d8>)
 8002e22:	b1b2      	cbz	r2, 8002e52 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e28:	f7fe f8dc 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4d6f      	ldr	r5, [pc, #444]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002e2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	0798      	lsls	r0, r3, #30
 8002e34:	d507      	bpl.n	8002e46 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	682b      	ldr	r3, [r5, #0]
 8002e38:	6922      	ldr	r2, [r4, #16]
 8002e3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e3e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e42:	602b      	str	r3, [r5, #0]
 8002e44:	e776      	b.n	8002d34 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe f8cd 	bl	8000fe4 <HAL_GetTick>
 8002e4a:	1b80      	subs	r0, r0, r6
 8002e4c:	2802      	cmp	r0, #2
 8002e4e:	d9ef      	bls.n	8002e30 <HAL_RCC_OscConfig+0x118>
 8002e50:	e7a9      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002e52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e54:	f7fe f8c6 	bl	8000fe4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e58:	4d64      	ldr	r5, [pc, #400]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002e5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	0799      	lsls	r1, r3, #30
 8002e60:	f57f af68 	bpl.w	8002d34 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe f8be 	bl	8000fe4 <HAL_GetTick>
 8002e68:	1b80      	subs	r0, r0, r6
 8002e6a:	2802      	cmp	r0, #2
 8002e6c:	d9f6      	bls.n	8002e5c <HAL_RCC_OscConfig+0x144>
 8002e6e:	e79a      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e70:	6962      	ldr	r2, [r4, #20]
 8002e72:	4b60      	ldr	r3, [pc, #384]	; (8002ff4 <HAL_RCC_OscConfig+0x2dc>)
 8002e74:	b17a      	cbz	r2, 8002e96 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002e7a:	f7fe f8b3 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4d5b      	ldr	r5, [pc, #364]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002e80:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e84:	079f      	lsls	r7, r3, #30
 8002e86:	f53f af59 	bmi.w	8002d3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe f8ab 	bl	8000fe4 <HAL_GetTick>
 8002e8e:	1b80      	subs	r0, r0, r6
 8002e90:	2802      	cmp	r0, #2
 8002e92:	d9f6      	bls.n	8002e82 <HAL_RCC_OscConfig+0x16a>
 8002e94:	e787      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002e96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002e98:	f7fe f8a4 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	4d53      	ldr	r5, [pc, #332]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002e9e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ea2:	0798      	lsls	r0, r3, #30
 8002ea4:	f57f af4a 	bpl.w	8002d3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe f89c 	bl	8000fe4 <HAL_GetTick>
 8002eac:	1b80      	subs	r0, r0, r6
 8002eae:	2802      	cmp	r0, #2
 8002eb0:	d9f6      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x188>
 8002eb2:	e778      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002ebc:	d128      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	9201      	str	r2, [sp, #4]
 8002ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ed2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	4d48      	ldr	r5, [pc, #288]	; (8002ff8 <HAL_RCC_OscConfig+0x2e0>)
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	05d9      	lsls	r1, r3, #23
 8002eda:	d51b      	bpl.n	8002f14 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	68a3      	ldr	r3, [r4, #8]
 8002ede:	4d43      	ldr	r5, [pc, #268]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d127      	bne.n	8002f34 <HAL_RCC_OscConfig+0x21c>
 8002ee4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002eec:	f7fe f87a 	bl	8000fe4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	4d3e      	ldr	r5, [pc, #248]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002ef2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002efa:	079b      	lsls	r3, r3, #30
 8002efc:	d539      	bpl.n	8002f72 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002efe:	2e00      	cmp	r6, #0
 8002f00:	f43f af20 	beq.w	8002d44 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f04:	4a39      	ldr	r2, [pc, #228]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002f06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	e719      	b.n	8002d44 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002f10:	2600      	movs	r6, #0
 8002f12:	e7df      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f862 	bl	8000fe4 <HAL_GetTick>
 8002f20:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	682b      	ldr	r3, [r5, #0]
 8002f24:	05da      	lsls	r2, r3, #23
 8002f26:	d4d9      	bmi.n	8002edc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe f85c 	bl	8000fe4 <HAL_GetTick>
 8002f2c:	1bc0      	subs	r0, r0, r7
 8002f2e:	2802      	cmp	r0, #2
 8002f30:	d9f7      	bls.n	8002f22 <HAL_RCC_OscConfig+0x20a>
 8002f32:	e738      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d104      	bne.n	8002f42 <HAL_RCC_OscConfig+0x22a>
 8002f38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	672b      	str	r3, [r5, #112]	; 0x70
 8002f40:	e7d0      	b.n	8002ee4 <HAL_RCC_OscConfig+0x1cc>
 8002f42:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	672a      	str	r2, [r5, #112]	; 0x70
 8002f4a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002f4c:	f022 0204 	bic.w	r2, r2, #4
 8002f50:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ca      	bne.n	8002eec <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002f56:	f7fe f845 	bl	8000fe4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f5e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f62:	0798      	lsls	r0, r3, #30
 8002f64:	d5cb      	bpl.n	8002efe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe f83d 	bl	8000fe4 <HAL_GetTick>
 8002f6a:	1bc0      	subs	r0, r0, r7
 8002f6c:	4540      	cmp	r0, r8
 8002f6e:	d9f7      	bls.n	8002f60 <HAL_RCC_OscConfig+0x248>
 8002f70:	e719      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe f837 	bl	8000fe4 <HAL_GetTick>
 8002f76:	1bc0      	subs	r0, r0, r7
 8002f78:	4540      	cmp	r0, r8
 8002f7a:	d9bd      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1e0>
 8002f7c:	e713      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4d1b      	ldr	r5, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
 8002f80:	68ab      	ldr	r3, [r5, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	f43f aeca 	beq.w	8002d20 <HAL_RCC_OscConfig+0x8>
 8002f8c:	4e1b      	ldr	r6, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x2e4>)
 8002f8e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f90:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002f92:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f94:	d134      	bne.n	8003000 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002f96:	f7fe f825 	bl	8000fe4 <HAL_GetTick>
 8002f9a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	0199      	lsls	r1, r3, #6
 8002fa0:	d41e      	bmi.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa2:	6a22      	ldr	r2, [r4, #32]
 8002fa4:	69e3      	ldr	r3, [r4, #28]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002faa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002fae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb8:	0852      	lsrs	r2, r2, #1
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fc0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002fc6:	f7fe f80d 	bl	8000fe4 <HAL_GetTick>
 8002fca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	019a      	lsls	r2, r3, #6
 8002fd0:	f53f aebc 	bmi.w	8002d4c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe f806 	bl	8000fe4 <HAL_GetTick>
 8002fd8:	1b40      	subs	r0, r0, r5
 8002fda:	2802      	cmp	r0, #2
 8002fdc:	d9f6      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2b4>
 8002fde:	e6e2      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe f800 	bl	8000fe4 <HAL_GetTick>
 8002fe4:	1bc0      	subs	r0, r0, r7
 8002fe6:	2802      	cmp	r0, #2
 8002fe8:	d9d8      	bls.n	8002f9c <HAL_RCC_OscConfig+0x284>
 8002fea:	e6dc      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	42470000 	.word	0x42470000
 8002ff4:	42470e80 	.word	0x42470e80
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8003000:	f7fd fff0 	bl	8000fe4 <HAL_GetTick>
 8003004:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	682b      	ldr	r3, [r5, #0]
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	f57f ae9f 	bpl.w	8002d4c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300e:	f7fd ffe9 	bl	8000fe4 <HAL_GetTick>
 8003012:	1b00      	subs	r0, r0, r4
 8003014:	2802      	cmp	r0, #2
 8003016:	d9f6      	bls.n	8003006 <HAL_RCC_OscConfig+0x2ee>
 8003018:	e6c5      	b.n	8002da6 <HAL_RCC_OscConfig+0x8e>
 800301a:	bf00      	nop

0800301c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301c:	4913      	ldr	r1, [pc, #76]	; (800306c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800301e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003020:	688b      	ldr	r3, [r1, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d003      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x16>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800302e:	4810      	ldr	r0, [pc, #64]	; (8003070 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003030:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003032:	4810      	ldr	r0, [pc, #64]	; (8003074 <HAL_RCC_GetSysClockFreq+0x58>)
 8003034:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003036:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003038:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003040:	bf14      	ite	ne
 8003042:	480c      	ldrne	r0, [pc, #48]	; (8003074 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	480a      	ldreq	r0, [pc, #40]	; (8003070 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800304a:	bf18      	it	ne
 800304c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800304e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	fba1 0100 	umull	r0, r1, r1, r0
 8003056:	f7fd fdf3 	bl	8000c40 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCC_GetSysClockFreq+0x50>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003066:	fbb0 f0f3 	udiv	r0, r0, r3
 800306a:	bd08      	pop	{r3, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	00f42400 	.word	0x00f42400
 8003074:	017d7840 	.word	0x017d7840

08003078 <HAL_RCC_ClockConfig>:
{
 8003078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800307e:	4604      	mov	r4, r0
 8003080:	b910      	cbnz	r0, 8003088 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003082:	2001      	movs	r0, #1
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b44      	ldr	r3, [pc, #272]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f002 020f 	and.w	r2, r2, #15
 8003090:	428a      	cmp	r2, r1
 8003092:	d328      	bcc.n	80030e6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	6821      	ldr	r1, [r4, #0]
 8003096:	078f      	lsls	r7, r1, #30
 8003098:	d42d      	bmi.n	80030f6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	07c8      	lsls	r0, r1, #31
 800309c:	d440      	bmi.n	8003120 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	f002 020f 	and.w	r2, r2, #15
 80030a6:	4295      	cmp	r5, r2
 80030a8:	d366      	bcc.n	8003178 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	0751      	lsls	r1, r2, #29
 80030ae:	d46c      	bmi.n	800318a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b0:	0713      	lsls	r3, r2, #28
 80030b2:	d507      	bpl.n	80030c4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b4:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <HAL_RCC_ClockConfig+0x128>)
 80030b6:	6921      	ldr	r1, [r4, #16]
 80030b8:	6893      	ldr	r3, [r2, #8]
 80030ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80030be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030c2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c4:	f7ff ffaa 	bl	800301c <HAL_RCC_GetSysClockFreq>
 80030c8:	4b35      	ldr	r3, [pc, #212]	; (80031a0 <HAL_RCC_ClockConfig+0x128>)
 80030ca:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <HAL_RCC_ClockConfig+0x12c>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	40d8      	lsrs	r0, r3
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_ClockConfig+0x130>)
 80030d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80030da:	2000      	movs	r0, #0
 80030dc:	f7fd ff38 	bl	8000f50 <HAL_InitTick>
  return HAL_OK;
 80030e0:	2000      	movs	r0, #0
 80030e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	b2ca      	uxtb	r2, r1
 80030e8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	4299      	cmp	r1, r3
 80030f2:	d1c6      	bne.n	8003082 <HAL_RCC_ClockConfig+0xa>
 80030f4:	e7ce      	b.n	8003094 <HAL_RCC_ClockConfig+0x1c>
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030fc:	bf1e      	ittt	ne
 80030fe:	689a      	ldrne	r2, [r3, #8]
 8003100:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8003104:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003108:	bf42      	ittt	mi
 800310a:	689a      	ldrmi	r2, [r3, #8]
 800310c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8003110:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	68a0      	ldr	r0, [r4, #8]
 8003116:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800311a:	4302      	orrs	r2, r0
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	e7bc      	b.n	800309a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003120:	6862      	ldr	r2, [r4, #4]
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <HAL_RCC_ClockConfig+0x128>)
 8003124:	2a01      	cmp	r2, #1
 8003126:	d11d      	bne.n	8003164 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	d0a8      	beq.n	8003082 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003130:	4e1b      	ldr	r6, [pc, #108]	; (80031a0 <HAL_RCC_ClockConfig+0x128>)
 8003132:	68b3      	ldr	r3, [r6, #8]
 8003134:	f023 0303 	bic.w	r3, r3, #3
 8003138:	4313      	orrs	r3, r2
 800313a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800313c:	f7fd ff52 	bl	8000fe4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003144:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	68b3      	ldr	r3, [r6, #8]
 8003148:	6862      	ldr	r2, [r4, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003152:	d0a4      	beq.n	800309e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fd ff46 	bl	8000fe4 <HAL_GetTick>
 8003158:	1bc0      	subs	r0, r0, r7
 800315a:	4540      	cmp	r0, r8
 800315c:	d9f3      	bls.n	8003146 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800315e:	2003      	movs	r0, #3
}
 8003160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003164:	1e91      	subs	r1, r2, #2
 8003166:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003168:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316a:	d802      	bhi.n	8003172 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003170:	e7dd      	b.n	800312e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	f013 0f02 	tst.w	r3, #2
 8003176:	e7da      	b.n	800312e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003178:	b2ea      	uxtb	r2, r5
 800317a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	429d      	cmp	r5, r3
 8003184:	f47f af7d 	bne.w	8003082 <HAL_RCC_ClockConfig+0xa>
 8003188:	e78f      	b.n	80030aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318a:	4905      	ldr	r1, [pc, #20]	; (80031a0 <HAL_RCC_ClockConfig+0x128>)
 800318c:	68e0      	ldr	r0, [r4, #12]
 800318e:	688b      	ldr	r3, [r1, #8]
 8003190:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003194:	4303      	orrs	r3, r0
 8003196:	608b      	str	r3, [r1, #8]
 8003198:	e78a      	b.n	80030b0 <HAL_RCC_ClockConfig+0x38>
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	08008548 	.word	0x08008548
 80031a8:	20000008 	.word	0x20000008

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031ba:	6810      	ldr	r0, [r2, #0]
}
 80031bc:	40d8      	lsrs	r0, r3
 80031be:	4770      	bx	lr
 80031c0:	40023800 	.word	0x40023800
 80031c4:	08008558 	.word	0x08008558
 80031c8:	20000008 	.word	0x20000008

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	4a03      	ldr	r2, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031da:	6810      	ldr	r0, [r2, #0]
}
 80031dc:	40d8      	lsrs	r0, r3
 80031de:	4770      	bx	lr
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08008558 	.word	0x08008558
 80031e8:	20000008 	.word	0x20000008

080031ec <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ec:	6a03      	ldr	r3, [r0, #32]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f4:	6a03      	ldr	r3, [r0, #32]
{
 80031f6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003202:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003204:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003206:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800320a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800320c:	4d0e      	ldr	r5, [pc, #56]	; (8003248 <TIM_OC1_SetConfig+0x5c>)
 800320e:	42a8      	cmp	r0, r5
 8003210:	d002      	beq.n	8003218 <TIM_OC1_SetConfig+0x2c>
 8003212:	4e0e      	ldr	r6, [pc, #56]	; (800324c <TIM_OC1_SetConfig+0x60>)
 8003214:	42b0      	cmp	r0, r6
 8003216:	d110      	bne.n	800323a <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003218:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800321a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800321e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003220:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003222:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003226:	d002      	beq.n	800322e <TIM_OC1_SetConfig+0x42>
 8003228:	4d08      	ldr	r5, [pc, #32]	; (800324c <TIM_OC1_SetConfig+0x60>)
 800322a:	42a8      	cmp	r0, r5
 800322c:	d105      	bne.n	800323a <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800322e:	694d      	ldr	r5, [r1, #20]
 8003230:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003232:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003236:	4335      	orrs	r5, r6
 8003238:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800323e:	684a      	ldr	r2, [r1, #4]
 8003240:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003242:	6203      	str	r3, [r0, #32]
 8003244:	bd70      	pop	{r4, r5, r6, pc}
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40010400 	.word	0x40010400

08003250 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003250:	6a03      	ldr	r3, [r0, #32]
 8003252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003256:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003258:	6a03      	ldr	r3, [r0, #32]
{
 800325a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800325e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003260:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003262:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003266:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003268:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800326a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800326e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003272:	4d11      	ldr	r5, [pc, #68]	; (80032b8 <TIM_OC3_SetConfig+0x68>)
 8003274:	42a8      	cmp	r0, r5
 8003276:	d003      	beq.n	8003280 <TIM_OC3_SetConfig+0x30>
 8003278:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800327c:	42a8      	cmp	r0, r5
 800327e:	d114      	bne.n	80032aa <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003280:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003286:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328a:	4d0b      	ldr	r5, [pc, #44]	; (80032b8 <TIM_OC3_SetConfig+0x68>)
 800328c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800328e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003292:	d003      	beq.n	800329c <TIM_OC3_SetConfig+0x4c>
 8003294:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003298:	42a8      	cmp	r0, r5
 800329a:	d106      	bne.n	80032aa <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800329c:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800329e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032a0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032a4:	4335      	orrs	r5, r6
 80032a6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ae:	684a      	ldr	r2, [r1, #4]
 80032b0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b2:	6203      	str	r3, [r0, #32]
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000

080032bc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032bc:	6a03      	ldr	r3, [r0, #32]
 80032be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c4:	6a03      	ldr	r3, [r0, #32]
{
 80032c6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ca:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032ce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80032d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e0:	4d08      	ldr	r5, [pc, #32]	; (8003304 <TIM_OC4_SetConfig+0x48>)
 80032e2:	42a8      	cmp	r0, r5
 80032e4:	d003      	beq.n	80032ee <TIM_OC4_SetConfig+0x32>
 80032e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032ea:	42a8      	cmp	r0, r5
 80032ec:	d104      	bne.n	80032f8 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032ee:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032f4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032fc:	684a      	ldr	r2, [r1, #4]
 80032fe:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003300:	6203      	str	r3, [r0, #32]
 8003302:	bd30      	pop	{r4, r5, pc}
 8003304:	40010000 	.word	0x40010000

08003308 <HAL_TIM_PWM_MspInit>:
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_PeriodElapsedCallback>:
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_OC_DelayElapsedCallback>:
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_IC_CaptureCallback>:
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003310:	4770      	bx	lr

08003312 <HAL_TIM_TriggerCallback>:
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003314:	6803      	ldr	r3, [r0, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	0791      	lsls	r1, r2, #30
{
 800331a:	b510      	push	{r4, lr}
 800331c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800331e:	d50e      	bpl.n	800333e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	0792      	lsls	r2, r2, #30
 8003324:	d50b      	bpl.n	800333e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003326:	f06f 0202 	mvn.w	r2, #2
 800332a:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800332c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003330:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003332:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003334:	d077      	beq.n	8003426 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003336:	f7ff ffea 	bl	800330e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	2300      	movs	r3, #0
 800333c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	0750      	lsls	r0, r2, #29
 8003344:	d510      	bpl.n	8003368 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	0751      	lsls	r1, r2, #29
 800334a:	d50d      	bpl.n	8003368 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800334c:	f06f 0204 	mvn.w	r2, #4
 8003350:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003352:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003354:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003356:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800335c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335e:	d068      	beq.n	8003432 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003360:	f7ff ffd5 	bl	800330e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003364:	2300      	movs	r3, #0
 8003366:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	0712      	lsls	r2, r2, #28
 800336e:	d50f      	bpl.n	8003390 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	0710      	lsls	r0, r2, #28
 8003374:	d50c      	bpl.n	8003390 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003376:	f06f 0208 	mvn.w	r2, #8
 800337a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800337e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003380:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003382:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003384:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003386:	d05a      	beq.n	800343e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003388:	f7ff ffc1 	bl	800330e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338c:	2300      	movs	r3, #0
 800338e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	06d2      	lsls	r2, r2, #27
 8003396:	d510      	bpl.n	80033ba <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	06d0      	lsls	r0, r2, #27
 800339c:	d50d      	bpl.n	80033ba <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800339e:	f06f 0210 	mvn.w	r2, #16
 80033a2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a6:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ac:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b0:	d04b      	beq.n	800344a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	f7ff ffac 	bl	800330e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	2300      	movs	r3, #0
 80033b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	07d1      	lsls	r1, r2, #31
 80033c0:	d508      	bpl.n	80033d4 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	07d2      	lsls	r2, r2, #31
 80033c6:	d505      	bpl.n	80033d4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c8:	f06f 0201 	mvn.w	r2, #1
 80033cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff ff9b 	bl	800330a <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	0610      	lsls	r0, r2, #24
 80033da:	d508      	bpl.n	80033ee <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	0611      	lsls	r1, r2, #24
 80033e0:	d505      	bpl.n	80033ee <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 fab8 	bl	800395e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	0652      	lsls	r2, r2, #25
 80033f4:	d508      	bpl.n	8003408 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	0650      	lsls	r0, r2, #25
 80033fa:	d505      	bpl.n	8003408 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003400:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff ff85 	bl	8003312 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	0691      	lsls	r1, r2, #26
 800340e:	d522      	bpl.n	8003456 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	0692      	lsls	r2, r2, #26
 8003414:	d51f      	bpl.n	8003456 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003416:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800341a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800341c:	611a      	str	r2, [r3, #16]
}
 800341e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003422:	f000 ba9b 	b.w	800395c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	f7ff ff71 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342a:	4620      	mov	r0, r4
 800342c:	f7ff ff70 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
 8003430:	e783      	b.n	800333a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	f7ff ff6b 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff ff6a 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
 800343c:	e792      	b.n	8003364 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	f7ff ff65 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003442:	4620      	mov	r0, r4
 8003444:	f7ff ff64 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
 8003448:	e7a0      	b.n	800338c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	f7ff ff5f 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff5e 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
 8003454:	e7af      	b.n	80033b6 <HAL_TIM_IRQHandler+0xa2>
 8003456:	bd10      	pop	{r4, pc}

08003458 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	4a30      	ldr	r2, [pc, #192]	; (800351c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800345a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800345c:	4290      	cmp	r0, r2
 800345e:	d012      	beq.n	8003486 <TIM_Base_SetConfig+0x2e>
 8003460:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003464:	d00f      	beq.n	8003486 <TIM_Base_SetConfig+0x2e>
 8003466:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800346a:	4290      	cmp	r0, r2
 800346c:	d00b      	beq.n	8003486 <TIM_Base_SetConfig+0x2e>
 800346e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003472:	4290      	cmp	r0, r2
 8003474:	d007      	beq.n	8003486 <TIM_Base_SetConfig+0x2e>
 8003476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800347a:	4290      	cmp	r0, r2
 800347c:	d003      	beq.n	8003486 <TIM_Base_SetConfig+0x2e>
 800347e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003482:	4290      	cmp	r0, r2
 8003484:	d119      	bne.n	80034ba <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8003486:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800348c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <TIM_Base_SetConfig+0xc4>)
 8003490:	4290      	cmp	r0, r2
 8003492:	d029      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 8003494:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003498:	d026      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 800349a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800349e:	4290      	cmp	r0, r2
 80034a0:	d022      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034a6:	4290      	cmp	r0, r2
 80034a8:	d01e      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ae:	4290      	cmp	r0, r2
 80034b0:	d01a      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80034b6:	4290      	cmp	r0, r2
 80034b8:	d016      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034ba:	4a19      	ldr	r2, [pc, #100]	; (8003520 <TIM_Base_SetConfig+0xc8>)
 80034bc:	4290      	cmp	r0, r2
 80034be:	d013      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034c4:	4290      	cmp	r0, r2
 80034c6:	d00f      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034cc:	4290      	cmp	r0, r2
 80034ce:	d00b      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034d0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80034d4:	4290      	cmp	r0, r2
 80034d6:	d007      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034dc:	4290      	cmp	r0, r2
 80034de:	d003      	beq.n	80034e8 <TIM_Base_SetConfig+0x90>
 80034e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034e4:	4290      	cmp	r0, r2
 80034e6:	d103      	bne.n	80034f0 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ee:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f0:	694a      	ldr	r2, [r1, #20]
 80034f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80034f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034fa:	688b      	ldr	r3, [r1, #8]
 80034fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034fe:	680b      	ldr	r3, [r1, #0]
 8003500:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <TIM_Base_SetConfig+0xc4>)
 8003504:	4298      	cmp	r0, r3
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0xb8>
 8003508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800350c:	4298      	cmp	r0, r3
 800350e:	d101      	bne.n	8003514 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003510:	690b      	ldr	r3, [r1, #16]
 8003512:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003514:	2301      	movs	r3, #1
 8003516:	6143      	str	r3, [r0, #20]
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40014000 	.word	0x40014000

08003524 <HAL_TIM_Base_Init>:
{
 8003524:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003526:	4604      	mov	r4, r0
 8003528:	b1a0      	cbz	r0, 8003554 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800352e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003532:	b91b      	cbnz	r3, 800353c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003534:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003538:	f001 fa4a 	bl	80049d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	2302      	movs	r3, #2
 800353e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003542:	6820      	ldr	r0, [r4, #0]
 8003544:	1d21      	adds	r1, r4, #4
 8003546:	f7ff ff87 	bl	8003458 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800354a:	2301      	movs	r3, #1
 800354c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003550:	2000      	movs	r0, #0
 8003552:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003554:	2001      	movs	r0, #1
}
 8003556:	bd10      	pop	{r4, pc}

08003558 <HAL_TIM_PWM_Init>:
{
 8003558:	b510      	push	{r4, lr}
  if (htim == NULL)
 800355a:	4604      	mov	r4, r0
 800355c:	b1a0      	cbz	r0, 8003588 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003562:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003566:	b91b      	cbnz	r3, 8003570 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003568:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800356c:	f7ff fecc 	bl	8003308 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	2302      	movs	r3, #2
 8003572:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	1d21      	adds	r1, r4, #4
 800357a:	f7ff ff6d 	bl	8003458 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800357e:	2301      	movs	r3, #1
 8003580:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003584:	2000      	movs	r0, #0
 8003586:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003588:	2001      	movs	r0, #1
}
 800358a:	bd10      	pop	{r4, pc}

0800358c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358c:	6a03      	ldr	r3, [r0, #32]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003594:	6a03      	ldr	r3, [r0, #32]
{
 8003596:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8003598:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800359a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800359e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80035a8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035b0:	4d10      	ldr	r5, [pc, #64]	; (80035f4 <TIM_OC2_SetConfig+0x68>)
 80035b2:	42a8      	cmp	r0, r5
 80035b4:	d003      	beq.n	80035be <TIM_OC2_SetConfig+0x32>
 80035b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035ba:	42a8      	cmp	r0, r5
 80035bc:	d114      	bne.n	80035e8 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80035c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c8:	4d0a      	ldr	r5, [pc, #40]	; (80035f4 <TIM_OC2_SetConfig+0x68>)
 80035ca:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80035cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d0:	d003      	beq.n	80035da <TIM_OC2_SetConfig+0x4e>
 80035d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035d6:	42a8      	cmp	r0, r5
 80035d8:	d106      	bne.n	80035e8 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035da:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035dc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035de:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035e2:	4335      	orrs	r5, r6
 80035e4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80035e8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80035ea:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80035ec:	684a      	ldr	r2, [r1, #4]
 80035ee:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80035f0:	6203      	str	r3, [r0, #32]
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	40010000 	.word	0x40010000

080035f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80035f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80035fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035fe:	2b01      	cmp	r3, #1
{
 8003600:	4604      	mov	r4, r0
 8003602:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003606:	d025      	beq.n	8003654 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003608:	2301      	movs	r3, #1
 800360a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800360e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8003612:	2a0c      	cmp	r2, #12
 8003614:	d818      	bhi.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003616:	e8df f002 	tbb	[pc, r2]
 800361a:	1707      	.short	0x1707
 800361c:	171e1717 	.word	0x171e1717
 8003620:	172f1717 	.word	0x172f1717
 8003624:	1717      	.short	0x1717
 8003626:	40          	.byte	0x40
 8003627:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	f7ff fddf 	bl	80031ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800362e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003630:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	f042 0208 	orr.w	r2, r2, #8
 8003638:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	f022 0204 	bic.w	r2, r2, #4
 8003640:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003646:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003648:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800364a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800364c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003650:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003654:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003656:	6820      	ldr	r0, [r4, #0]
 8003658:	f7ff ff98 	bl	800358c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800365c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800365e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003676:	e7e6      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	f7ff fde9 	bl	8003250 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800367e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003680:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	f042 0208 	orr.w	r2, r2, #8
 8003688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	f022 0204 	bic.w	r2, r2, #4
 8003690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003696:	61da      	str	r2, [r3, #28]
      break;
 8003698:	e7d6      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800369a:	6820      	ldr	r0, [r4, #0]
 800369c:	f7ff fe0e 	bl	80032bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036a0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036ba:	e7ec      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x9e>

080036bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036bc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036be:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80036ca:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036cc:	6083      	str	r3, [r0, #8]
 80036ce:	bd10      	pop	{r4, pc}

080036d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80036d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
{
 80036d6:	b570      	push	{r4, r5, r6, lr}
 80036d8:	4604      	mov	r4, r0
 80036da:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80036de:	d019      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80036e4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80036e6:	2301      	movs	r3, #1
 80036e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80036ec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80036f6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80036f8:	680b      	ldr	r3, [r1, #0]
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d065      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xfa>
 80036fe:	d815      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x5c>
 8003700:	2b10      	cmp	r3, #16
 8003702:	d00c      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x4e>
 8003704:	d807      	bhi.n	8003716 <HAL_TIM_ConfigClockSource+0x46>
 8003706:	b153      	cbz	r3, 800371e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8003708:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800370a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800370c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003710:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003714:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003716:	2b20      	cmp	r3, #32
 8003718:	d001      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x4e>
 800371a:	2b30      	cmp	r3, #48	; 0x30
 800371c:	d1f4      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800371e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003720:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003724:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003728:	4313      	orrs	r3, r2
 800372a:	e01a      	b.n	8003762 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800372c:	2b60      	cmp	r3, #96	; 0x60
 800372e:	d034      	beq.n	800379a <HAL_TIM_ConfigClockSource+0xca>
 8003730:	d819      	bhi.n	8003766 <HAL_TIM_ConfigClockSource+0x96>
 8003732:	2b50      	cmp	r3, #80	; 0x50
 8003734:	d1e8      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	684a      	ldr	r2, [r1, #4]
 8003738:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800373a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373c:	6a05      	ldr	r5, [r0, #32]
 800373e:	f025 0501 	bic.w	r5, r5, #1
 8003742:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003744:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003746:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800374e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003752:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003754:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003756:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003758:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003762:	6083      	str	r3, [r0, #8]
 8003764:	e7d0      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003766:	2b70      	cmp	r3, #112	; 0x70
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_ConfigClockSource+0xb4>
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376e:	d1cb      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003770:	68cb      	ldr	r3, [r1, #12]
 8003772:	684a      	ldr	r2, [r1, #4]
 8003774:	6889      	ldr	r1, [r1, #8]
 8003776:	f7ff ffa1 	bl	80036bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	6893      	ldr	r3, [r2, #8]
 800377e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003782:	e008      	b.n	8003796 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003784:	68cb      	ldr	r3, [r1, #12]
 8003786:	684a      	ldr	r2, [r1, #4]
 8003788:	6889      	ldr	r1, [r1, #8]
 800378a:	f7ff ff97 	bl	80036bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800378e:	6822      	ldr	r2, [r4, #0]
 8003790:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003792:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003796:	6093      	str	r3, [r2, #8]
      break;
 8003798:	e7b6      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	684d      	ldr	r5, [r1, #4]
 800379c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379e:	6a01      	ldr	r1, [r0, #32]
 80037a0:	f021 0110 	bic.w	r1, r1, #16
 80037a4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80037a8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037aa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80037ba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80037bc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80037be:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037c4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80037c8:	e7cb      	b.n	8003762 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	684a      	ldr	r2, [r1, #4]
 80037cc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80037ce:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d0:	6a05      	ldr	r5, [r0, #32]
 80037d2:	f025 0501 	bic.w	r5, r5, #1
 80037d6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037da:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80037e6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80037e8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80037ea:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80037ec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80037f6:	e7b4      	b.n	8003762 <HAL_TIM_ConfigClockSource+0x92>

080037f8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037f8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037fa:	f001 011f 	and.w	r1, r1, #31
{
 80037fe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003800:	2401      	movs	r4, #1
 8003802:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003804:	ea23 0304 	bic.w	r3, r3, r4
 8003808:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800380a:	6a03      	ldr	r3, [r0, #32]
 800380c:	408a      	lsls	r2, r1
 800380e:	431a      	orrs	r2, r3
 8003810:	6202      	str	r2, [r0, #32]
 8003812:	bd10      	pop	{r4, pc}

08003814 <HAL_TIM_PWM_Start>:
{
 8003814:	b510      	push	{r4, lr}
 8003816:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003818:	2201      	movs	r2, #1
 800381a:	6800      	ldr	r0, [r0, #0]
 800381c:	f7ff ffec 	bl	80037f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <HAL_TIM_PWM_Start+0x3c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_TIM_PWM_Start+0x32>
 8003828:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800382c:	4293      	cmp	r3, r2
 800382e:	d00a      	beq.n	8003846 <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003836:	2a06      	cmp	r2, #6
 8003838:	d003      	beq.n	8003842 <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
}
 8003842:	2000      	movs	r0, #0
 8003844:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8003846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
 800384e:	e7ef      	b.n	8003830 <HAL_TIM_PWM_Start+0x1c>
 8003850:	40010000 	.word	0x40010000

08003854 <HAL_TIM_PWM_Start_IT>:
{
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
  switch (Channel)
 8003858:	290c      	cmp	r1, #12
 800385a:	d80d      	bhi.n	8003878 <HAL_TIM_PWM_Start_IT+0x24>
 800385c:	e8df f001 	tbb	[pc, r1]
 8003860:	0c0c0c07 	.word	0x0c0c0c07
 8003864:	0c0c0c23 	.word	0x0c0c0c23
 8003868:	0c0c0c28 	.word	0x0c0c0c28
 800386c:	2d          	.byte	0x2d
 800386d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800386e:	6802      	ldr	r2, [r0, #0]
 8003870:	68d3      	ldr	r3, [r2, #12]
 8003872:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003876:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003878:	2201      	movs	r2, #1
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	f7ff ffbc 	bl	80037f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <HAL_TIM_PWM_Start_IT+0x7c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d01d      	beq.n	80038c4 <HAL_TIM_PWM_Start_IT+0x70>
 8003888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800388c:	4293      	cmp	r3, r2
 800388e:	d019      	beq.n	80038c4 <HAL_TIM_PWM_Start_IT+0x70>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	2a06      	cmp	r2, #6
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_PWM_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
}
 80038a2:	2000      	movs	r0, #0
 80038a4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038a6:	6802      	ldr	r2, [r0, #0]
 80038a8:	68d3      	ldr	r3, [r2, #12]
 80038aa:	f043 0304 	orr.w	r3, r3, #4
 80038ae:	e7e2      	b.n	8003876 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038b0:	6802      	ldr	r2, [r0, #0]
 80038b2:	68d3      	ldr	r3, [r2, #12]
 80038b4:	f043 0308 	orr.w	r3, r3, #8
 80038b8:	e7dd      	b.n	8003876 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038ba:	6802      	ldr	r2, [r0, #0]
 80038bc:	68d3      	ldr	r3, [r2, #12]
 80038be:	f043 0310 	orr.w	r3, r3, #16
 80038c2:	e7d8      	b.n	8003876 <HAL_TIM_PWM_Start_IT+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 80038c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44
 80038cc:	e7e0      	b.n	8003890 <HAL_TIM_PWM_Start_IT+0x3c>
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000

080038d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
{
 80038da:	b530      	push	{r4, r5, lr}
 80038dc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80038e0:	d014      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80038e8:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ea:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ec:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ee:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80038f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f8:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038fa:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038fc:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038fe:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003900:	2301      	movs	r3, #1
 8003902:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003906:	2300      	movs	r3, #0
 8003908:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800390c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800390e:	bd30      	pop	{r4, r5, pc}

08003910 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003910:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d01f      	beq.n	8003958 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003918:	68cb      	ldr	r3, [r1, #12]
 800391a:	688a      	ldr	r2, [r1, #8]
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003922:	684a      	ldr	r2, [r1, #4]
 8003924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003928:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800392a:	680a      	ldr	r2, [r1, #0]
 800392c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003930:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003932:	690a      	ldr	r2, [r1, #16]
 8003934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003938:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800393a:	694a      	ldr	r2, [r1, #20]
 800393c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003940:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003942:	69ca      	ldr	r2, [r1, #28]
 8003944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003948:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800394a:	6802      	ldr	r2, [r0, #0]
 800394c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800394e:	2300      	movs	r3, #0
 8003950:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003954:	4618      	mov	r0, r3
 8003956:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003958:	2002      	movs	r0, #2
}
 800395a:	4770      	bx	lr

0800395c <HAL_TIMEx_CommutCallback>:
 800395c:	4770      	bx	lr

0800395e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800395e:	4770      	bx	lr

08003960 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003960:	6803      	ldr	r3, [r0, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003968:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	2320      	movs	r3, #32
 8003974:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003978:	4770      	bx	lr
	...

0800397c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003980:	6806      	ldr	r6, [r0, #0]
 8003982:	68c2      	ldr	r2, [r0, #12]
 8003984:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003986:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800398c:	4313      	orrs	r3, r2
 800398e:	6133      	str	r3, [r6, #16]
{
 8003990:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003992:	6883      	ldr	r3, [r0, #8]
 8003994:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003996:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003998:	4303      	orrs	r3, r0
 800399a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800399c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80039a2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ac:	6973      	ldr	r3, [r6, #20]
 80039ae:	69a2      	ldr	r2, [r4, #24]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b4:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ba:	6173      	str	r3, [r6, #20]
 80039bc:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	d17c      	bne.n	8003aba <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c0:	429e      	cmp	r6, r3
 80039c2:	d003      	beq.n	80039cc <UART_SetConfig+0x50>
 80039c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039c8:	429e      	cmp	r6, r3
 80039ca:	d144      	bne.n	8003a56 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80039cc:	f7ff fbfe 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80039d0:	2519      	movs	r5, #25
 80039d2:	fb05 f300 	mul.w	r3, r5, r0
 80039d6:	6860      	ldr	r0, [r4, #4]
 80039d8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80039dc:	0040      	lsls	r0, r0, #1
 80039de:	fbb3 f3f0 	udiv	r3, r3, r0
 80039e2:	fbb3 f3f9 	udiv	r3, r3, r9
 80039e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039ea:	f7ff fbef 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80039ee:	6863      	ldr	r3, [r4, #4]
 80039f0:	4368      	muls	r0, r5
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fbb0 f7f3 	udiv	r7, r0, r3
 80039f8:	f7ff fbe8 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	4368      	muls	r0, r5
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	fbb3 f3f9 	udiv	r3, r3, r9
 8003a0a:	fb09 7313 	mls	r3, r9, r3, r7
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	3332      	adds	r3, #50	; 0x32
 8003a12:	fbb3 f3f9 	udiv	r3, r3, r9
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003a1c:	f7ff fbd6 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8003a20:	6862      	ldr	r2, [r4, #4]
 8003a22:	4368      	muls	r0, r5
 8003a24:	0052      	lsls	r2, r2, #1
 8003a26:	fbb0 faf2 	udiv	sl, r0, r2
 8003a2a:	f7ff fbcf 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003a2e:	6863      	ldr	r3, [r4, #4]
 8003a30:	4368      	muls	r0, r5
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a38:	fbb3 f3f9 	udiv	r3, r3, r9
 8003a3c:	fb09 a313 	mls	r3, r9, r3, sl
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	3332      	adds	r3, #50	; 0x32
 8003a44:	fbb3 f3f9 	udiv	r3, r3, r9
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003a4e:	443b      	add	r3, r7
 8003a50:	60b3      	str	r3, [r6, #8]
 8003a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003a56:	f7ff fba9 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003a5a:	2519      	movs	r5, #25
 8003a5c:	fb05 f300 	mul.w	r3, r5, r0
 8003a60:	6860      	ldr	r0, [r4, #4]
 8003a62:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003a66:	0040      	lsls	r0, r0, #1
 8003a68:	fbb3 f3f0 	udiv	r3, r3, r0
 8003a6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003a70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a74:	f7ff fb9a 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003a78:	6863      	ldr	r3, [r4, #4]
 8003a7a:	4368      	muls	r0, r5
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fbb0 f7f3 	udiv	r7, r0, r3
 8003a82:	f7ff fb93 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003a86:	6863      	ldr	r3, [r4, #4]
 8003a88:	4368      	muls	r0, r5
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a90:	fbb3 f3f9 	udiv	r3, r3, r9
 8003a94:	fb09 7313 	mls	r3, r9, r3, r7
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	3332      	adds	r3, #50	; 0x32
 8003a9c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003aa6:	f7ff fb81 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003aaa:	6862      	ldr	r2, [r4, #4]
 8003aac:	4368      	muls	r0, r5
 8003aae:	0052      	lsls	r2, r2, #1
 8003ab0:	fbb0 faf2 	udiv	sl, r0, r2
 8003ab4:	f7ff fb7a 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003ab8:	e7b9      	b.n	8003a2e <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aba:	429e      	cmp	r6, r3
 8003abc:	d002      	beq.n	8003ac4 <UART_SetConfig+0x148>
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <UART_SetConfig+0x230>)
 8003ac0:	429e      	cmp	r6, r3
 8003ac2:	d140      	bne.n	8003b46 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ac4:	f7ff fb82 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8003ac8:	6867      	ldr	r7, [r4, #4]
 8003aca:	2519      	movs	r5, #25
 8003acc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003ad0:	fb05 f300 	mul.w	r3, r5, r0
 8003ad4:	00bf      	lsls	r7, r7, #2
 8003ad6:	fbb3 f3f7 	udiv	r3, r3, r7
 8003ada:	fbb3 f3f9 	udiv	r3, r3, r9
 8003ade:	011f      	lsls	r7, r3, #4
 8003ae0:	f7ff fb74 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	4368      	muls	r0, r5
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	fbb0 f8f3 	udiv	r8, r0, r3
 8003aee:	f7ff fb6d 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8003af2:	6863      	ldr	r3, [r4, #4]
 8003af4:	4368      	muls	r0, r5
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afc:	fbb3 f3f9 	udiv	r3, r3, r9
 8003b00:	fb09 8313 	mls	r3, r9, r3, r8
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	3332      	adds	r3, #50	; 0x32
 8003b08:	fbb3 f3f9 	udiv	r3, r3, r9
 8003b0c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003b10:	f7ff fb5c 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8003b14:	6862      	ldr	r2, [r4, #4]
 8003b16:	4368      	muls	r0, r5
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	fbb0 faf2 	udiv	sl, r0, r2
 8003b1e:	f7ff fb55 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003b22:	6863      	ldr	r3, [r4, #4]
 8003b24:	4368      	muls	r0, r5
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003b30:	fb09 a313 	mls	r3, r9, r3, sl
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	; 0x32
 8003b38:	fbb3 f3f9 	udiv	r3, r3, r9
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	ea43 0308 	orr.w	r3, r3, r8
 8003b44:	e783      	b.n	8003a4e <UART_SetConfig+0xd2>
 8003b46:	f7ff fb31 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003b4a:	6867      	ldr	r7, [r4, #4]
 8003b4c:	2519      	movs	r5, #25
 8003b4e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003b52:	fb05 f300 	mul.w	r3, r5, r0
 8003b56:	00bf      	lsls	r7, r7, #2
 8003b58:	fbb3 f3f7 	udiv	r3, r3, r7
 8003b5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003b60:	011f      	lsls	r7, r3, #4
 8003b62:	f7ff fb23 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003b66:	6863      	ldr	r3, [r4, #4]
 8003b68:	4368      	muls	r0, r5
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fbb0 f8f3 	udiv	r8, r0, r3
 8003b70:	f7ff fb1c 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003b74:	6863      	ldr	r3, [r4, #4]
 8003b76:	4368      	muls	r0, r5
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003b82:	fb09 8313 	mls	r3, r9, r3, r8
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	fbb3 f3f9 	udiv	r3, r3, r9
 8003b8e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003b92:	f7ff fb0b 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003b96:	6862      	ldr	r2, [r4, #4]
 8003b98:	4368      	muls	r0, r5
 8003b9a:	0092      	lsls	r2, r2, #2
 8003b9c:	fbb0 faf2 	udiv	sl, r0, r2
 8003ba0:	f7ff fb04 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003ba4:	e7bd      	b.n	8003b22 <UART_SetConfig+0x1a6>
 8003ba6:	bf00      	nop
 8003ba8:	40011000 	.word	0x40011000
 8003bac:	40011400 	.word	0x40011400

08003bb0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	460e      	mov	r6, r1
 8003bb6:	4617      	mov	r7, r2
 8003bb8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bba:	6821      	ldr	r1, [r4, #0]
 8003bbc:	680b      	ldr	r3, [r1, #0]
 8003bbe:	ea36 0303 	bics.w	r3, r6, r3
 8003bc2:	d101      	bne.n	8003bc8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003bc4:	2000      	movs	r0, #0
}
 8003bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003bc8:	1c6b      	adds	r3, r5, #1
 8003bca:	d0f7      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bcc:	b995      	cbnz	r5, 8003bf4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bd6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003be0:	2320      	movs	r3, #32
 8003be2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003bea:	2300      	movs	r3, #0
 8003bec:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003bf0:	2003      	movs	r0, #3
 8003bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bf4:	f7fd f9f6 	bl	8000fe4 <HAL_GetTick>
 8003bf8:	1bc0      	subs	r0, r0, r7
 8003bfa:	4285      	cmp	r5, r0
 8003bfc:	d2dd      	bcs.n	8003bba <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003bfe:	e7e6      	b.n	8003bce <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003c00 <HAL_UART_Init>:
{
 8003c00:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003c02:	4604      	mov	r4, r0
 8003c04:	b340      	cbz	r0, 8003c58 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003c0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c0e:	b91b      	cbnz	r3, 8003c18 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003c10:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003c14:	f001 fa1e 	bl	8005054 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003c18:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c1a:	2324      	movs	r3, #36	; 0x24
 8003c1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003c20:	68d3      	ldr	r3, [r2, #12]
 8003c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c26:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7ff fea7 	bl	800397c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c3e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c46:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c52:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003c56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c58:	2001      	movs	r0, #1
}
 8003c5a:	bd10      	pop	{r4, pc}

08003c5c <HAL_UART_Transmit>:
{
 8003c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c60:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003c62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003c66:	2b20      	cmp	r3, #32
{
 8003c68:	4604      	mov	r4, r0
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003c6e:	d14f      	bne.n	8003d10 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d04a      	beq.n	8003d0a <HAL_UART_Transmit+0xae>
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	d048      	beq.n	8003d0a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8003c78:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d047      	beq.n	8003d10 <HAL_UART_Transmit+0xb4>
 8003c80:	2301      	movs	r3, #1
 8003c82:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c8a:	2321      	movs	r3, #33	; 0x21
 8003c8c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003c90:	f7fd f9a8 	bl	8000fe4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8003c94:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8003c98:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003c9a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c9e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b96b      	cbnz	r3, 8003cc0 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	4632      	mov	r2, r6
 8003ca8:	2140      	movs	r1, #64	; 0x40
 8003caa:	4620      	mov	r0, r4
 8003cac:	f7ff ff80 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003cb0:	b9b0      	cbnz	r0, 8003ce0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003cb8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8003cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003cc0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cc8:	68a3      	ldr	r3, [r4, #8]
 8003cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cce:	4632      	mov	r2, r6
 8003cd0:	463b      	mov	r3, r7
 8003cd2:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003cd6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	f7ff ff69 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003cde:	b110      	cbz	r0, 8003ce6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ce6:	882b      	ldrh	r3, [r5, #0]
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003cf0:	6923      	ldr	r3, [r4, #16]
 8003cf2:	b943      	cbnz	r3, 8003d06 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8003cf4:	3502      	adds	r5, #2
 8003cf6:	e7d2      	b.n	8003c9e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf8:	f7ff ff5a 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d1ef      	bne.n	8003ce0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	782a      	ldrb	r2, [r5, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	3501      	adds	r5, #1
 8003d08:	e7c9      	b.n	8003c9e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003d10:	2002      	movs	r0, #2
}
 8003d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d16 <HAL_UART_TxCpltCallback>:
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_RxCpltCallback>:
 8003d18:	4770      	bx	lr

08003d1a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d1a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003d1e:	2b22      	cmp	r3, #34	; 0x22
{
 8003d20:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d22:	d136      	bne.n	8003d92 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d24:	6883      	ldr	r3, [r0, #8]
 8003d26:	6901      	ldr	r1, [r0, #16]
 8003d28:	6802      	ldr	r2, [r0, #0]
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003d30:	d123      	bne.n	8003d7a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d32:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d34:	b9e9      	cbnz	r1, 8003d72 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003d3e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003d40:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003d42:	3c01      	subs	r4, #1
 8003d44:	b2a4      	uxth	r4, r4
 8003d46:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003d48:	b98c      	cbnz	r4, 8003d6e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d4a:	6803      	ldr	r3, [r0, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	f022 0220 	bic.w	r2, r2, #32
 8003d52:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003d64:	2320      	movs	r3, #32
 8003d66:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003d6a:	f7ff ffd5 	bl	8003d18 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f823 2b01 	strh.w	r2, [r3], #1
 8003d78:	e7e1      	b.n	8003d3e <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d7a:	b921      	cbnz	r1, 8003d86 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	6852      	ldr	r2, [r2, #4]
 8003d80:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e7dc      	b.n	8003d40 <UART_Receive_IT+0x26>
 8003d86:	6852      	ldr	r2, [r2, #4]
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	6281      	str	r1, [r0, #40]	; 0x28
 8003d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d90:	e7f7      	b.n	8003d82 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003d92:	2002      	movs	r0, #2
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <HAL_UART_ErrorCallback>:
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d98:	6803      	ldr	r3, [r0, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9c:	68d9      	ldr	r1, [r3, #12]
{
 8003d9e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003da0:	0716      	lsls	r6, r2, #28
{
 8003da2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003da6:	d107      	bne.n	8003db8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da8:	0696      	lsls	r6, r2, #26
 8003daa:	d55a      	bpl.n	8003e62 <HAL_UART_IRQHandler+0xca>
 8003dac:	068d      	lsls	r5, r1, #26
 8003dae:	d558      	bpl.n	8003e62 <HAL_UART_IRQHandler+0xca>
}
 8003db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003db4:	f7ff bfb1 	b.w	8003d1a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003db8:	f015 0501 	ands.w	r5, r5, #1
 8003dbc:	d102      	bne.n	8003dc4 <HAL_UART_IRQHandler+0x2c>
 8003dbe:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003dc2:	d04e      	beq.n	8003e62 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dc4:	07d3      	lsls	r3, r2, #31
 8003dc6:	d505      	bpl.n	8003dd4 <HAL_UART_IRQHandler+0x3c>
 8003dc8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dca:	bf42      	ittt	mi
 8003dcc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003dce:	f043 0301 	orrmi.w	r3, r3, #1
 8003dd2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dd4:	0750      	lsls	r0, r2, #29
 8003dd6:	d504      	bpl.n	8003de2 <HAL_UART_IRQHandler+0x4a>
 8003dd8:	b11d      	cbz	r5, 8003de2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de2:	0793      	lsls	r3, r2, #30
 8003de4:	d504      	bpl.n	8003df0 <HAL_UART_IRQHandler+0x58>
 8003de6:	b11d      	cbz	r5, 8003df0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df0:	0716      	lsls	r6, r2, #28
 8003df2:	d504      	bpl.n	8003dfe <HAL_UART_IRQHandler+0x66>
 8003df4:	b11d      	cbz	r5, 8003dfe <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003df6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003df8:	f043 0308 	orr.w	r3, r3, #8
 8003dfc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d066      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e04:	0695      	lsls	r5, r2, #26
 8003e06:	d504      	bpl.n	8003e12 <HAL_UART_IRQHandler+0x7a>
 8003e08:	0688      	lsls	r0, r1, #26
 8003e0a:	d502      	bpl.n	8003e12 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff ff84 	bl	8003d1a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003e18:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8003e1a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e1c:	d402      	bmi.n	8003e24 <HAL_UART_IRQHandler+0x8c>
 8003e1e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003e22:	d01a      	beq.n	8003e5a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003e24:	f7ff fd9c 	bl	8003960 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	0652      	lsls	r2, r2, #25
 8003e2e:	d510      	bpl.n	8003e52 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e30:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003e32:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e38:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003e3a:	b150      	cbz	r0, 8003e52 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <HAL_UART_IRQHandler+0x13c>)
 8003e3e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e40:	f7fd fc24 	bl	800168c <HAL_DMA_Abort_IT>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d044      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e48:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003e50:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003e52:	4620      	mov	r0, r4
 8003e54:	f7ff ff9f 	bl	8003d96 <HAL_UART_ErrorCallback>
 8003e58:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003e5a:	f7ff ff9c 	bl	8003d96 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e62:	0616      	lsls	r6, r2, #24
 8003e64:	d527      	bpl.n	8003eb6 <HAL_UART_IRQHandler+0x11e>
 8003e66:	060d      	lsls	r5, r1, #24
 8003e68:	d525      	bpl.n	8003eb6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e6a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003e6e:	2a21      	cmp	r2, #33	; 0x21
 8003e70:	d12f      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e72:	68a2      	ldr	r2, [r4, #8]
 8003e74:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003e78:	6a22      	ldr	r2, [r4, #32]
 8003e7a:	d117      	bne.n	8003eac <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7c:	8811      	ldrh	r1, [r2, #0]
 8003e7e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003e82:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e84:	6921      	ldr	r1, [r4, #16]
 8003e86:	b979      	cbnz	r1, 8003ea8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003e88:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8003e8a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003e8c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003e8e:	3a01      	subs	r2, #1
 8003e90:	b292      	uxth	r2, r2
 8003e92:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003e94:	b9ea      	cbnz	r2, 8003ed2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003ea8:	3201      	adds	r2, #1
 8003eaa:	e7ee      	b.n	8003e8a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eac:	1c51      	adds	r1, r2, #1
 8003eae:	6221      	str	r1, [r4, #32]
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	e7ea      	b.n	8003e8c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb6:	0650      	lsls	r0, r2, #25
 8003eb8:	d50b      	bpl.n	8003ed2 <HAL_UART_IRQHandler+0x13a>
 8003eba:	064a      	lsls	r2, r1, #25
 8003ebc:	d509      	bpl.n	8003ed2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff ff22 	bl	8003d16 <HAL_UART_TxCpltCallback>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	08003ed9 	.word	0x08003ed9

08003ed8 <UART_DMAAbortOnError>:
{
 8003ed8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eda:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ee0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003ee2:	f7ff ff58 	bl	8003d96 <HAL_UART_ErrorCallback>
 8003ee6:	bd08      	pop	{r3, pc}

08003ee8 <I2C_Write>:


#include "I2C_1.h"
#include "stm32f4xx_hal.h"

I2C_Result_t I2C_Write(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t data) {
 8003ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t d[2];

	/* Format array to send */
	d[0] = register_address;
	d[1] = data;
 8003eea:	f88d 300d 	strb.w	r3, [sp, #13]

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8003eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	d[0] = register_address;
 8003ef2:	f88d 200c 	strb.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	aa03      	add	r2, sp, #12
 8003efa:	2302      	movs	r3, #2
I2C_Result_t I2C_Write(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t data) {
 8003efc:	4604      	mov	r4, r0
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8003efe:	f7fd ff2b 	bl	8001d58 <HAL_I2C_Master_Transmit>
 8003f02:	b118      	cbz	r0, 8003f0c <I2C_Write+0x24>
		/* Check error */
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7fe ff05 	bl	8002d14 <HAL_I2C_GetError>

		}

		/* Return error */
		return I2C_Result_Error;
 8003f0a:	2001      	movs	r0, #1
	}

	/* Return OK */
	return I2C_Result_Ok;
}
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bd10      	pop	{r4, pc}

08003f10 <I2C_ReadMulti>:

I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8003f10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003f14:	ac04      	add	r4, sp, #16

	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8003f16:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8003f1a:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8003f1e:	4698      	mov	r8, r3
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8003f20:	9700      	str	r7, [sp, #0]
 8003f22:	2301      	movs	r3, #1
 8003f24:	4622      	mov	r2, r4
I2C_Result_t I2C_ReadMulti(I2C_HandleTypeDef* hi2c, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8003f26:	4605      	mov	r5, r0
	if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8003f28:	460e      	mov	r6, r1
 8003f2a:	f7fd ff15 	bl	8001d58 <HAL_I2C_Master_Transmit>
 8003f2e:	b130      	cbz	r0, 8003f3e <I2C_ReadMulti+0x2e>
		/* Check error */
		if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 8003f30:	4628      	mov	r0, r5
 8003f32:	f7fe feef 	bl	8002d14 <HAL_I2C_GetError>

		}

		/* Return error */
		return I2C_Result_Error;
 8003f36:	2001      	movs	r0, #1
	}

	/* Return OK */
	return I2C_Result_Ok;

}
 8003f38:	b004      	add	sp, #16
 8003f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_I2C_Master_Receive(hi2c, device_address, data, count, 1000) != HAL_OK) {
 8003f3e:	9700      	str	r7, [sp, #0]
 8003f40:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8003f44:	4642      	mov	r2, r8
 8003f46:	4631      	mov	r1, r6
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7fd ffd3 	bl	8001ef4 <HAL_I2C_Master_Receive>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d0f2      	beq.n	8003f38 <I2C_ReadMulti+0x28>
 8003f52:	e7ed      	b.n	8003f30 <I2C_ReadMulti+0x20>

08003f54 <MPU9250_Init>:
#define YA_OFFSET_H         0x7A
#define YA_OFFSET_L         0x7B
#define ZA_OFFSET_H         0x7D
#define ZA_OFFSET_L         0x7E

MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250, MPU9250_Device_t dev) {
 8003f54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003f56:	460c      	mov	r4, r1
    uint8_t data, rawData[3];

    /* Set values */
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8003f58:	2318      	movs	r3, #24
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 8003f5a:	f042 01d0 	orr.w	r1, r2, #208	; 0xd0

    /* Check who I am */
		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 8003f5e:	2601      	movs	r6, #1
    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8003f60:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 8003f64:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 8003f68:	f10d 030b 	add.w	r3, sp, #11
 8003f6c:	9600      	str	r6, [sp, #0]
 8003f6e:	2275      	movs	r2, #117	; 0x75
MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250, MPU9250_Device_t dev) {
 8003f70:	4605      	mov	r5, r0
		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data, 1);
 8003f72:	f7ff ffcd 	bl	8003f10 <I2C_ReadMulti>
    if (data != 0x71) { //modified from 0x71 to 0x73
 8003f76:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f7a:	2b71      	cmp	r3, #113	; 0x71
 8003f7c:	f040 80de 	bne.w	800413c <MPU9250_Init+0x1e8>
        return MPU9250_Result_DeviceNotConnected;
    }

    // wake up device
		I2C_Write(hi2c, MPU9250->I2C_Addr, PWR_MGMT_1, 0x00);
 8003f80:	2300      	movs	r3, #0
 8003f82:	226b      	movs	r2, #107	; 0x6b
 8003f84:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f7ff ffad 	bl	8003ee8 <I2C_Write>
    //Delayms(100); // Wait for all registers to reset

    // get stable time source
    I2C_Write(hi2c, MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8003f8e:	4633      	mov	r3, r6
 8003f90:	226b      	movs	r2, #107	; 0x6b
 8003f92:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7ff ffa6 	bl	8003ee8 <I2C_Write>
    // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
    // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
    // be higher than 1 / 0.0059 = 170 Hz
    // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
    // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
    I2C_Write(hi2c, MPU9250->I2C_Addr, CONFIG, 0x04);
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	221a      	movs	r2, #26
 8003fa0:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f7ff ff9f 	bl	8003ee8 <I2C_Write>
    // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
    I2C_Write(hi2c, MPU9250->I2C_Addr, SMPLRT_DIV, 0x00);  // Use a 1000 Hz rate; a rate consistent with the filter update rate
 8003faa:	2300      	movs	r3, #0
 8003fac:	2219      	movs	r2, #25
 8003fae:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f7ff ff98 	bl	8003ee8 <I2C_Write>
                            // determined inset in CONFIG above

    // Set gyroscope full scale range
    // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, &data, 1); // get current GYRO_CONFIG register value
 8003fb8:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003fbc:	9600      	str	r6, [sp, #0]
 8003fbe:	f10d 030b 	add.w	r3, sp, #11
 8003fc2:	221b      	movs	r2, #27
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f7ff ffa3 	bl	8003f10 <I2C_ReadMulti>
    // c = c & ~0xE0; // Clear self-test bits [7:5]
    data &= ~0x02; // Clear Fchoice bits [1:0]
    data &= ~0x18; // Clear AFS bits [4:3]
 8003fca:	f89d 300b 	ldrb.w	r3, [sp, #11]
		/**************************************/
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
		/**************************************/

    // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003fce:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x18; // Clear AFS bits [4:3]
 8003fd2:	f023 031a 	bic.w	r3, r3, #26
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
 8003fd6:	f043 0318 	orr.w	r3, r3, #24
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003fda:	221b      	movs	r2, #27
 8003fdc:	4628      	mov	r0, r5
		data |= MPU9250_GyroSens_2000DPS<<3; // Set 2000dps for the gyro rather than 250dps
 8003fde:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8003fe2:	f7ff ff81 	bl	8003ee8 <I2C_Write>

    // Set accelerometer full-scale range configuration
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, &data, 1); // get current ACCEL_CONFIG register value
 8003fe6:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8003fea:	9600      	str	r6, [sp, #0]
 8003fec:	f10d 030b 	add.w	r3, sp, #11
 8003ff0:	221c      	movs	r2, #28
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f7ff ff8c 	bl	8003f10 <I2C_ReadMulti>
    // c = c & ~0xE0; // Clear self-test bits [7:5]
    data &= ~0x18;  // Clear AFS bits [4:3]
 8003ff8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    data |= 0x00 << 3; // Set full scale range for the accelerometer
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8003ffc:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x18;  // Clear AFS bits [4:3]
 8004000:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8004004:	221c      	movs	r2, #28
 8004006:	4628      	mov	r0, r5
    data &= ~0x18;  // Clear AFS bits [4:3]
 8004008:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 800400c:	f7ff ff6c 	bl	8003ee8 <I2C_Write>

    // Set accelerometer sample rate configuration
    // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
    // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, &data, 1); // get current ACCEL_CONFIG2 register value
 8004010:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8004014:	9600      	str	r6, [sp, #0]
 8004016:	f10d 030b 	add.w	r3, sp, #11
 800401a:	221d      	movs	r2, #29
 800401c:	4628      	mov	r0, r5
 800401e:	f7ff ff77 	bl	8003f10 <I2C_ReadMulti>
    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8004022:	f89d 300b 	ldrb.w	r3, [sp, #11]
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8004026:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800402a:	f023 030f 	bic.w	r3, r3, #15
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800402e:	f043 0303 	orr.w	r3, r3, #3
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8004032:	221d      	movs	r2, #29
 8004034:	4628      	mov	r0, r5
    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8004036:	f88d 300b 	strb.w	r3, [sp, #11]
    I2C_Write(hi2c, MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 800403a:	f7ff ff55 	bl	8003ee8 <I2C_Write>

    // Configure Interrupts and Bypass Enable
    // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
    // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
    // can join the I2C bus and all can be controlled by the Arduino as master
    I2C_Write(hi2c, MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 800403e:	2322      	movs	r3, #34	; 0x22
 8004040:	2237      	movs	r2, #55	; 0x37
 8004042:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8004046:	4628      	mov	r0, r5
 8004048:	f7ff ff4e 	bl	8003ee8 <I2C_Write>
    I2C_Write(hi2c, MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 800404c:	4633      	mov	r3, r6
 800404e:	2238      	movs	r2, #56	; 0x38
 8004050:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 8004054:	4628      	mov	r0, r5
 8004056:	f7ff ff47 	bl	8003ee8 <I2C_Write>

    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 800405a:	2300      	movs	r3, #0
 800405c:	220a      	movs	r2, #10
 800405e:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8004062:	4628      	mov	r0, r5
 8004064:	f7ff ff40 	bl	8003ee8 <I2C_Write>
    //Delayms(10);
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8004068:	230f      	movs	r3, #15
 800406a:	220a      	movs	r2, #10
 800406c:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8004070:	4628      	mov	r0, r5
 8004072:	f7ff ff39 	bl	8003ee8 <I2C_Write>
    //Delayms(10);

		I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ASAX, &rawData[0], 3);
 8004076:	2303      	movs	r3, #3
 8004078:	2210      	movs	r2, #16
 800407a:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	4628      	mov	r0, r5
 8004082:	ab03      	add	r3, sp, #12
 8004084:	f7ff ff44 	bl	8003f10 <I2C_ReadMulti>
		//I2C_Read(hi2c, AK8963_ASTC, AK8963_ASAY, &rawData[1]);
		//I2C_Read(hi2c, AK8963_ASTC, AK8963_ASAZ, &rawData[2]);

		MPU9250->magCalibrationX =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8004088:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800408c:	3880      	subs	r0, #128	; 0x80
 800408e:	ee07 0a90 	vmov	s15, r0
 8004092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004096:	ee17 0a90 	vmov	r0, s15
 800409a:	f7fc fa55 	bl	8000548 <__aeabi_f2d>
 800409e:	2200      	movs	r2, #0
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <MPU9250_Init+0x1ec>)
 80040a2:	f7fc faa5 	bl	80005f0 <__aeabi_dmul>
 80040a6:	2200      	movs	r2, #0
 80040a8:	4b26      	ldr	r3, [pc, #152]	; (8004144 <MPU9250_Init+0x1f0>)
 80040aa:	f7fc f8ef 	bl	800028c <__adddf3>
 80040ae:	f7fc fd77 	bl	8000ba0 <__aeabi_d2f>
 80040b2:	6460      	str	r0, [r4, #68]	; 0x44
		MPU9250->magCalibrationY =  (float)(rawData[1] - 128)/256. + 1.;
 80040b4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80040b8:	3880      	subs	r0, #128	; 0x80
 80040ba:	ee07 0a90 	vmov	s15, r0
 80040be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c2:	ee17 0a90 	vmov	r0, s15
 80040c6:	f7fc fa3f 	bl	8000548 <__aeabi_f2d>
 80040ca:	2200      	movs	r2, #0
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <MPU9250_Init+0x1ec>)
 80040ce:	f7fc fa8f 	bl	80005f0 <__aeabi_dmul>
 80040d2:	2200      	movs	r2, #0
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <MPU9250_Init+0x1f0>)
 80040d6:	f7fc f8d9 	bl	800028c <__adddf3>
 80040da:	f7fc fd61 	bl	8000ba0 <__aeabi_d2f>
 80040de:	64a0      	str	r0, [r4, #72]	; 0x48
		MPU9250->magCalibrationZ =  (float)(rawData[2] - 128)/256. + 1.;
 80040e0:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80040e4:	3880      	subs	r0, #128	; 0x80
 80040e6:	ee07 0a90 	vmov	s15, r0
 80040ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ee:	ee17 0a90 	vmov	r0, s15
 80040f2:	f7fc fa29 	bl	8000548 <__aeabi_f2d>
 80040f6:	2200      	movs	r2, #0
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <MPU9250_Init+0x1ec>)
 80040fa:	f7fc fa79 	bl	80005f0 <__aeabi_dmul>
 80040fe:	2200      	movs	r2, #0
 8004100:	4b10      	ldr	r3, [pc, #64]	; (8004144 <MPU9250_Init+0x1f0>)
 8004102:	f7fc f8c3 	bl	800028c <__adddf3>
 8004106:	f7fc fd4b 	bl	8000ba0 <__aeabi_d2f>

    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 800410a:	2300      	movs	r3, #0
		MPU9250->magCalibrationZ =  (float)(rawData[2] - 128)/256. + 1.;
 800410c:	64e0      	str	r0, [r4, #76]	; 0x4c
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 800410e:	220a      	movs	r2, #10
 8004110:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8004114:	4628      	mov	r0, r5
 8004116:	f7ff fee7 	bl	8003ee8 <I2C_Write>
    //Delayms(10);
    // Configure the magnetometer for continuous read and highest resolution
    // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
    // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
    I2C_Write(hi2c, MPU9250->I2C_Addr_Mag, AK8963_CNTL, 1 << 4 | 6); // Set magnetometer data resolution and sample ODR
 800411a:	2316      	movs	r3, #22
 800411c:	220a      	movs	r2, #10
 800411e:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8004122:	4628      	mov	r0, r5
 8004124:	f7ff fee0 	bl	8003ee8 <I2C_Write>
    //Delayms(10);

    /* Calculate multiplicators */
    MPU9250->AMult = 2.0f / 32768.0f;
 8004128:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 800412c:	63a3      	str	r3, [r4, #56]	; 0x38
    MPU9250->GMult = 2000.0f / 32768.0f; // modified from 250.0f to 2000.0f to increase gyro sensitivity
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <MPU9250_Init+0x1f4>)
 8004130:	63e3      	str	r3, [r4, #60]	; 0x3c
    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <MPU9250_Init+0x1f8>)
 8004134:	6423      	str	r3, [r4, #64]	; 0x40

    return MPU9250_Result_Ok;
 8004136:	2000      	movs	r0, #0
}
 8004138:	b004      	add	sp, #16
 800413a:	bd70      	pop	{r4, r5, r6, pc}
        return MPU9250_Result_DeviceNotConnected;
 800413c:	2002      	movs	r0, #2
 800413e:	e7fb      	b.n	8004138 <MPU9250_Init+0x1e4>
 8004140:	3f700000 	.word	0x3f700000
 8004144:	3ff00000 	.word	0x3ff00000
 8004148:	3d7a0000 	.word	0x3d7a0000
 800414c:	3fbfe000 	.word	0x3fbfe000

08004150 <MPU9250_ReadAcce>:

MPU9250_Result_t MPU9250_ReadAcce(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8004150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[6];

    /* Read accelerometer data */
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 8004152:	2306      	movs	r3, #6
MPU9250_Result_t MPU9250_ReadAcce(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8004154:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 8004156:	223b      	movs	r2, #59	; 0x3b
 8004158:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	ab02      	add	r3, sp, #8
 8004160:	f7ff fed6 	bl	8003f10 <I2C_ReadMulti>

    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 8004164:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004168:	f89d 1009 	ldrb.w	r1, [sp, #9]
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 800416c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8004170:	f89d 000c 	ldrb.w	r0, [sp, #12]

    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8004174:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 8004178:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800417c:	b209      	sxth	r1, r1
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 800417e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 8004182:	84a1      	strh	r1, [r4, #36]	; 0x24
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8004184:	ee07 1a90 	vmov	s15, r1
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8004188:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 800418c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8004190:	f89d 300d 	ldrb.w	r3, [sp, #13]
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8004194:	b212      	sxth	r2, r2
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8004196:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 800419a:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 800419e:	ee07 2a90 	vmov	s15, r2
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80041a2:	b21b      	sxth	r3, r3
    MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 80041a4:	ed84 7a00 	vstr	s14, [r4]
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 80041a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 80041b4:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 80041b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80041bc:	84e2      	strh	r2, [r4, #38]	; 0x26
    MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80041be:	8523      	strh	r3, [r4, #40]	; 0x28
    MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 80041c0:	ed84 7a01 	vstr	s14, [r4, #4]
    MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 80041c4:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80041c8:	b004      	add	sp, #16
 80041ca:	bd10      	pop	{r4, pc}

080041cc <MPU9250_ReadGyro>:

MPU9250_Result_t MPU9250_ReadGyro(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 80041cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[6];
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 80041ce:	2306      	movs	r3, #6
MPU9250_Result_t MPU9250_ReadGyro(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 80041d0:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 80041d2:	2243      	movs	r2, #67	; 0x43
 80041d4:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	ab02      	add	r3, sp, #8
 80041dc:	f7ff fe98 	bl	8003f10 <I2C_ReadMulti>

    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 80041e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80041e4:	f89d 1009 	ldrb.w	r1, [sp, #9]
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];

    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 80041e8:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 80041ec:	f89d 200b 	ldrb.w	r2, [sp, #11]
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 80041f0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 80041f4:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004258 <MPU9250_ReadGyro+0x8c>
    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 80041f8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80041fc:	b209      	sxth	r1, r1
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 80041fe:	ee07 1a90 	vmov	s15, r1
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8004202:	f89d 300a 	ldrb.w	r3, [sp, #10]
    MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8004206:	8561      	strh	r1, [r4, #42]	; 0x2a
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8004208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800420c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8004210:	ee27 7a06 	vmul.f32	s14, s14, s12
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8004214:	f89d 300d 	ldrb.w	r3, [sp, #13]
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8004218:	b212      	sxth	r2, r2
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800421a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 800421e:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8004222:	ee07 2a90 	vmov	s15, r2
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8004226:	b21b      	sxth	r3, r3
    MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult*0.0174532925f;//added *0.0174532925f to convert deg to rad
 8004228:	ed84 7a03 	vstr	s14, [r4, #12]
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 800422c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8004238:	ee27 7a06 	vmul.f32	s14, s14, s12
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 800423c:	ee67 7a86 	vmul.f32	s15, s15, s12
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 8004240:	ee27 7a26 	vmul.f32	s14, s14, s13
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 8004244:	ee67 7aa6 	vmul.f32	s15, s15, s13
    MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8004248:	85a2      	strh	r2, [r4, #44]	; 0x2c
    MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800424a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult*0.0174532925f;
 800424c:	ed84 7a04 	vstr	s14, [r4, #16]
    MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult*0.0174532925f;
 8004250:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8004254:	b004      	add	sp, #16
 8004256:	bd10      	pop	{r4, pc}
 8004258:	3c8efa35 	.word	0x3c8efa35

0800425c <MPU9250_ReadMag>:

MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 800425c:	b530      	push	{r4, r5, lr}
 800425e:	b087      	sub	sp, #28
    uint8_t data[7];
    uint8_t check;

    /* Check status */
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 8004260:	2301      	movs	r3, #1
 8004262:	2202      	movs	r2, #2
MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8004264:	460c      	mov	r4, r1
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 8004266:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	f10d 030f 	add.w	r3, sp, #15
MPU9250_Result_t MPU9250_ReadMag(I2C_HandleTypeDef* hi2c, MPU9250_t* MPU9250) {
 8004270:	4605      	mov	r5, r0
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_ST1, &check, 1);
 8004272:	f7ff fe4d 	bl	8003f10 <I2C_ReadMulti>

    if (check & 0x01) {
 8004276:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800427a:	07da      	lsls	r2, r3, #31
 800427c:	d521      	bpl.n	80042c2 <MPU9250_ReadMag+0x66>
        I2C_ReadMulti(hi2c, MPU9250->I2C_Addr_Mag, AK8963_XOUT_L, data, 7);
 800427e:	2307      	movs	r3, #7
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8004286:	ab04      	add	r3, sp, #16
 8004288:	2203      	movs	r2, #3
 800428a:	4628      	mov	r0, r5
 800428c:	f7ff fe40 	bl	8003f10 <I2C_ReadMulti>
        if (!(data[6] & 0x08)) {
 8004290:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004294:	071b      	lsls	r3, r3, #28
 8004296:	d414      	bmi.n	80042c2 <MPU9250_ReadMag+0x66>
            MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 8004298:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800429c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80042a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042a4:	8623      	strh	r3, [r4, #48]	; 0x30
            MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 80042a6:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80042aa:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80042ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042b2:	8663      	strh	r3, [r4, #50]	; 0x32
            MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 80042b4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80042b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80042bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042c0:	86a3      	strh	r3, [r4, #52]	; 0x34
//						MPU9250->Mx = MPU9250->Mx_Raw * MPU9250->MMult * MPU9250->magCalibrationX;  // get actual magnetometer value, this depends on scale being set
//						MPU9250->My = MPU9250->My_Raw * MPU9250->MMult * MPU9250->magCalibrationY;
//						MPU9250->Mz = MPU9250->Mz_Raw * MPU9250->MMult * MPU9250->magCalibrationZ;
        }
    }
}
 80042c2:	b007      	add	sp, #28
 80042c4:	bd30      	pop	{r4, r5, pc}

080042c6 <MPU9250_DataReady>:

MPU9250_Result_t MPU9250_DataReady(I2C_HandleTypeDef* hi2c ,MPU9250_t* MPU9250) {
 80042c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data;
    I2C_ReadMulti(hi2c, MPU9250->I2C_Addr, INT_STATUS, &data, 1);
 80042c8:	2301      	movs	r3, #1
 80042ca:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	223a      	movs	r2, #58	; 0x3a
 80042d2:	f10d 030f 	add.w	r3, sp, #15
 80042d6:	f7ff fe1b 	bl	8003f10 <I2C_ReadMulti>

    if (data & 0x01) {
        return MPU9250_Result_Ok;
 80042da:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80042de:	43c0      	mvns	r0, r0
    }
    return MPU9250_Result_Error;
}
 80042e0:	f000 0001 	and.w	r0, r0, #1
 80042e4:	b005      	add	sp, #20
 80042e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080042ec <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80042ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80042ee:	2210      	movs	r2, #16
 80042f0:	2100      	movs	r1, #0
 80042f2:	4668      	mov	r0, sp
 80042f4:	f000 ff42 	bl	800517c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80042f8:	4819      	ldr	r0, [pc, #100]	; (8004360 <MX_ADC3_Init+0x74>)
 80042fa:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <MX_ADC3_Init+0x78>)
 80042fc:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80042fe:	2300      	movs	r3, #0
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ENABLE;
 8004300:	2401      	movs	r4, #1
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004302:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004304:	6083      	str	r3, [r0, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004306:	7603      	strb	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
  hadc3.Init.NbrOfDiscConversion = 1;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004308:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <MX_ADC3_Init+0x7c>)
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800430c:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 2;
 800430e:	2302      	movs	r3, #2
  hadc3.Init.ScanConvMode = ENABLE;
 8004310:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8004312:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8004316:	6244      	str	r4, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004318:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.NbrOfConversion = 2;
 800431a:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800431c:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004320:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004322:	f7fc fe65 	bl	8000ff0 <HAL_ADC_Init>
 8004326:	b108      	cbz	r0, 800432c <MX_ADC3_Init+0x40>
  {
    Error_Handler();
 8004328:	f000 fa8c 	bl	8004844 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800432c:	230e      	movs	r3, #14
  sConfig.Rank = 1;
 800432e:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004332:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004334:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004336:	480a      	ldr	r0, [pc, #40]	; (8004360 <MX_ADC3_Init+0x74>)
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004338:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800433a:	f7fd f811 	bl	8001360 <HAL_ADC_ConfigChannel>
 800433e:	b108      	cbz	r0, 8004344 <MX_ADC3_Init+0x58>
  {
    Error_Handler();
 8004340:	f000 fa80 	bl	8004844 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
  sConfig.Rank = 2;
 8004344:	220f      	movs	r2, #15
 8004346:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004348:	4669      	mov	r1, sp
 800434a:	4805      	ldr	r0, [pc, #20]	; (8004360 <MX_ADC3_Init+0x74>)
  sConfig.Rank = 2;
 800434c:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004350:	f7fd f806 	bl	8001360 <HAL_ADC_ConfigChannel>
 8004354:	b108      	cbz	r0, 800435a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8004356:	f000 fa75 	bl	8004844 <Error_Handler>
  }

}
 800435a:	b004      	add	sp, #16
 800435c:	bd10      	pop	{r4, pc}
 800435e:	bf00      	nop
 8004360:	2000026c 	.word	0x2000026c
 8004364:	40012200 	.word	0x40012200
 8004368:	0f000001 	.word	0x0f000001

0800436c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	4606      	mov	r6, r0
 8004370:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004372:	2214      	movs	r2, #20
 8004374:	2100      	movs	r1, #0
 8004376:	a803      	add	r0, sp, #12
 8004378:	f000 ff00 	bl	800517c <memset>
  if(adcHandle->Instance==ADC3)
 800437c:	6832      	ldr	r2, [r6, #0]
 800437e:	4b25      	ldr	r3, [pc, #148]	; (8004414 <HAL_ADC_MspInit+0xa8>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d144      	bne.n	800440e <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004384:	2500      	movs	r5, #0
 8004386:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 800438a:	9501      	str	r5, [sp, #4]
 800438c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PF5     ------> ADC3_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800438e:	4822      	ldr	r0, [pc, #136]	; (8004418 <HAL_ADC_MspInit+0xac>)

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8004390:	4c22      	ldr	r4, [pc, #136]	; (800441c <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004392:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004396:	645a      	str	r2, [r3, #68]	; 0x44
 8004398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800439e:	9201      	str	r2, [sp, #4]
 80043a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043a2:	9502      	str	r5, [sp, #8]
 80043a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a6:	f042 0220 	orr.w	r2, r2, #32
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80043b6:	2330      	movs	r3, #48	; 0x30
 80043b8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043bc:	2303      	movs	r3, #3
 80043be:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043c0:	f7fd fa34 	bl	800182c <HAL_GPIO_Init>
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_ADC_MspInit+0xb4>)
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043c6:	60a5      	str	r5, [r4, #8]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80043c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043cc:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80043d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d4:	6123      	str	r3, [r4, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043da:	6163      	str	r3, [r4, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043e0:	61a3      	str	r3, [r4, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80043e2:	4620      	mov	r0, r4
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80043e4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e8:	60e5      	str	r5, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80043ea:	61e3      	str	r3, [r4, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80043ec:	6225      	str	r5, [r4, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ee:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80043f0:	f7fd f8ce 	bl	8001590 <HAL_DMA_Init>
 80043f4:	b108      	cbz	r0, 80043fa <HAL_ADC_MspInit+0x8e>
    {
      Error_Handler();
 80043f6:	f000 fa25 	bl	8004844 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80043fc:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80043fe:	2012      	movs	r0, #18
 8004400:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8004402:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004404:	f7fd f856 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004408:	2012      	movs	r0, #18
 800440a:	f7fd f887 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800440e:	b008      	add	sp, #32
 8004410:	bd70      	pop	{r4, r5, r6, pc}
 8004412:	bf00      	nop
 8004414:	40012200 	.word	0x40012200
 8004418:	40021400 	.word	0x40021400
 800441c:	2000020c 	.word	0x2000020c
 8004420:	40026410 	.word	0x40026410

08004424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	2214      	movs	r2, #20
 800442a:	2100      	movs	r1, #0
 800442c:	a807      	add	r0, sp, #28
 800442e:	f000 fea5 	bl	800517c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004432:	2400      	movs	r4, #0
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <MX_GPIO_Init+0xe4>)
 8004436:	9400      	str	r4, [sp, #0]
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 800443a:	4f34      	ldr	r7, [pc, #208]	; (800450c <MX_GPIO_Init+0xe8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800443c:	4d34      	ldr	r5, [pc, #208]	; (8004510 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800443e:	f042 0204 	orr.w	r2, r2, #4
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
 8004444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004446:	f002 0204 	and.w	r2, r2, #4
 800444a:	9200      	str	r2, [sp, #0]
 800444c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800444e:	9401      	str	r4, [sp, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	f042 0220 	orr.w	r2, r2, #32
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
 8004458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445a:	f002 0220 	and.w	r2, r2, #32
 800445e:	9201      	str	r2, [sp, #4]
 8004460:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004462:	9402      	str	r4, [sp, #8]
 8004464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
 800446c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004472:	9202      	str	r2, [sp, #8]
 8004474:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004476:	9403      	str	r4, [sp, #12]
 8004478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447a:	f042 0210 	orr.w	r2, r2, #16
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
 8004480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004482:	f002 0210 	and.w	r2, r2, #16
 8004486:	9203      	str	r2, [sp, #12]
 8004488:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800448a:	9404      	str	r4, [sp, #16]
 800448c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448e:	f042 0208 	orr.w	r2, r2, #8
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	f002 0208 	and.w	r2, r2, #8
 800449a:	9204      	str	r2, [sp, #16]
 800449c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800449e:	9405      	str	r4, [sp, #20]
 80044a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
 80044a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044aa:	f002 0201 	and.w	r2, r2, #1
 80044ae:	9205      	str	r2, [sp, #20]
 80044b0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	9406      	str	r4, [sp, #24]
 80044b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b6:	f042 0202 	orr.w	r2, r2, #2
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 80044c4:	4622      	mov	r2, r4
 80044c6:	4638      	mov	r0, r7
 80044c8:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ca:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 80044cc:	f7fd fa8e 	bl	80019ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80044d0:	4622      	mov	r2, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044d8:	f7fd fa88 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044dc:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044de:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044e0:	a907      	add	r1, sp, #28
 80044e2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044e4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044ec:	f7fd f99e 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044f4:	a907      	add	r1, sp, #28
 80044f6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044f8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044fa:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004500:	f7fd f994 	bl	800182c <HAL_GPIO_Init>

}
 8004504:	b00d      	add	sp, #52	; 0x34
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004508:	40023800 	.word	0x40023800
 800450c:	40021400 	.word	0x40021400
 8004510:	40020c00 	.word	0x40020c00

08004514 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004514:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004516:	480c      	ldr	r0, [pc, #48]	; (8004548 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <MX_I2C1_Init+0x38>)
 800451a:	f8df e034 	ldr.w	lr, [pc, #52]	; 8004550 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800451e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8004522:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004526:	2300      	movs	r3, #0
 8004528:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800452a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800452c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800452e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004530:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004532:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004534:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004536:	f7fd fb6b 	bl	8001c10 <HAL_I2C_Init>
 800453a:	b118      	cbz	r0, 8004544 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 800453c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004540:	f000 b980 	b.w	8004844 <Error_Handler>
 8004544:	bd08      	pop	{r3, pc}
 8004546:	bf00      	nop
 8004548:	200002b4 	.word	0x200002b4
 800454c:	40005400 	.word	0x40005400
 8004550:	000186a0 	.word	0x000186a0

08004554 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004554:	b530      	push	{r4, r5, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455a:	2214      	movs	r2, #20
 800455c:	2100      	movs	r1, #0
 800455e:	a803      	add	r0, sp, #12
 8004560:	f000 fe0c 	bl	800517c <memset>
  if(i2cHandle->Instance==I2C1)
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <HAL_I2C_MspInit+0x84>)
 8004568:	429a      	cmp	r2, r3
 800456a:	d133      	bne.n	80045d4 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800456c:	2500      	movs	r5, #0
 800456e:	4c1b      	ldr	r4, [pc, #108]	; (80045dc <HAL_I2C_MspInit+0x88>)
 8004570:	9501      	str	r5, [sp, #4]
 8004572:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004574:	481a      	ldr	r0, [pc, #104]	; (80045e0 <HAL_I2C_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004576:	f043 0302 	orr.w	r3, r3, #2
 800457a:	6323      	str	r3, [r4, #48]	; 0x30
 800457c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004586:	23c0      	movs	r3, #192	; 0xc0
 8004588:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800458a:	2312      	movs	r3, #18
 800458c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800458e:	2301      	movs	r3, #1
 8004590:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004592:	2303      	movs	r3, #3
 8004594:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004596:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004598:	2304      	movs	r3, #4
 800459a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459c:	f7fd f946 	bl	800182c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045a0:	9502      	str	r5, [sp, #8]
 80045a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045a8:	6423      	str	r3, [r4, #64]	; 0x40
 80045aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045b0:	462a      	mov	r2, r5
 80045b2:	4629      	mov	r1, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045b4:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045b6:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045b8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045ba:	f7fc ff7b 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80045be:	201f      	movs	r0, #31
 80045c0:	f7fc ffac 	bl	800151c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80045c4:	2020      	movs	r0, #32
 80045c6:	462a      	mov	r2, r5
 80045c8:	4629      	mov	r1, r5
 80045ca:	f7fc ff73 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80045ce:	2020      	movs	r0, #32
 80045d0:	f7fc ffa4 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80045d4:	b009      	add	sp, #36	; 0x24
 80045d6:	bd30      	pop	{r4, r5, pc}
 80045d8:	40005400 	.word	0x40005400
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40020400 	.word	0x40020400

080045e4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80045e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    /* Place your implementation of fputc here */
    /* e.g. write a character to the Debug USART and Loop until the end of transmission */

    if('\n' == ch)
 80045e6:	280a      	cmp	r0, #10
{
 80045e8:	9001      	str	r0, [sp, #4]
    if('\n' == ch)
 80045ea:	d109      	bne.n	8004600 <__io_putchar+0x1c>
    {
        int ch_tmp = '\r';
 80045ec:	a904      	add	r1, sp, #16
 80045ee:	230d      	movs	r3, #13
 80045f0:	f841 3d04 	str.w	r3, [r1, #-4]!

        /* Place your implementation of fputc here */
        /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch_tmp, 1, 0xFFFF);
 80045f4:	2201      	movs	r2, #1
 80045f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045fa:	4807      	ldr	r0, [pc, #28]	; (8004618 <__io_putchar+0x34>)
 80045fc:	f7ff fb2e 	bl	8003c5c <HAL_UART_Transmit>
    }

    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8004600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004604:	2201      	movs	r2, #1
 8004606:	a901      	add	r1, sp, #4
 8004608:	4803      	ldr	r0, [pc, #12]	; (8004618 <__io_putchar+0x34>)
 800460a:	f7ff fb27 	bl	8003c5c <HAL_UART_Transmit>

    return ch;
}
 800460e:	9801      	ldr	r0, [sp, #4]
 8004610:	b005      	add	sp, #20
 8004612:	f85d fb04 	ldr.w	pc, [sp], #4
 8004616:	bf00      	nop
 8004618:	20000470 	.word	0x20000470

0800461c <HAL_ADC_ConvCpltCallback>:
	  //printf("test\n");
	  }
	  adcIndex++;
	  if(adcIndex > 1) adcIndex=0;
#endif
	  HAL_ADC_Start_IT(&hadc3);
 800461c:	4801      	ldr	r0, [pc, #4]	; (8004624 <HAL_ADC_ConvCpltCallback+0x8>)
 800461e:	f7fc bd8d 	b.w	800113c <HAL_ADC_Start_IT>
 8004622:	bf00      	nop
 8004624:	2000026c 	.word	0x2000026c

08004628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800462c:	2230      	movs	r2, #48	; 0x30
 800462e:	2100      	movs	r1, #0
 8004630:	a808      	add	r0, sp, #32
 8004632:	f000 fda3 	bl	800517c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004636:	2100      	movs	r1, #0
 8004638:	2214      	movs	r2, #20
 800463a:	a803      	add	r0, sp, #12
 800463c:	f000 fd9e 	bl	800517c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004640:	2400      	movs	r4, #0
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <SystemClock_Config+0x8c>)
 8004644:	9401      	str	r4, [sp, #4]
 8004646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <SystemClock_Config+0x90>)
 800465a:	9402      	str	r4, [sp, #8]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800466e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004672:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004674:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004678:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800467a:	2319      	movs	r3, #25
 800467c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800467e:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004680:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004682:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004684:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004686:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004688:	2304      	movs	r3, #4
 800468a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800468c:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800468e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004690:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004692:	f7fe fb41 	bl	8002d18 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004696:	230f      	movs	r3, #15
 8004698:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800469e:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80046a4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046a6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046a8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046aa:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80046ac:	f7fe fce4 	bl	8003078 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80046b0:	b014      	add	sp, #80	; 0x50
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40007000 	.word	0x40007000

080046bc <main>:
{
 80046bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 80046be:	f7fc fc6b 	bl	8000f98 <HAL_Init>
  SystemClock_Config();
 80046c2:	f7ff ffb1 	bl	8004628 <SystemClock_Config>
  MX_GPIO_Init();
 80046c6:	f7ff fead 	bl	8004424 <MX_GPIO_Init>
  MX_ADC3_Init();
 80046ca:	f7ff fe0f 	bl	80042ec <MX_ADC3_Init>
  MX_TIM1_Init();
 80046ce:	f000 fa05 	bl	8004adc <MX_TIM1_Init>
  MX_TIM4_Init();
 80046d2:	f000 fa71 	bl	8004bb8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80046d6:	f000 fca1 	bl	800501c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80046da:	f7ff ff1b 	bl	8004514 <MX_I2C1_Init>
	printf("Start\n");
 80046de:	484c      	ldr	r0, [pc, #304]	; (8004810 <main+0x154>)
 80046e0:	f001 fa34 	bl	8005b4c <puts>
	if (MPU9250_Init(&hi2c1, &MPU9250, MPU9250_Device_0) != MPU9250_Result_Ok) {
 80046e4:	2200      	movs	r2, #0
 80046e6:	494b      	ldr	r1, [pc, #300]	; (8004814 <main+0x158>)
 80046e8:	484b      	ldr	r0, [pc, #300]	; (8004818 <main+0x15c>)
 80046ea:	f7ff fc33 	bl	8003f54 <MPU9250_Init>
 80046ee:	b110      	cbz	r0, 80046f6 <main+0x3a>
  printf("Device error!\r\n");}
 80046f0:	484a      	ldr	r0, [pc, #296]	; (800481c <main+0x160>)
 80046f2:	f001 fa2b 	bl	8005b4c <puts>
	TM_AHRSIMU_Init(&IMU, 1000, 0.5, 0);
 80046f6:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8004820 <main+0x164>
 80046fa:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8004824 <main+0x168>
 80046fe:	484a      	ldr	r0, [pc, #296]	; (8004828 <main+0x16c>)
	  if (MPU9250_DataReady(&hi2c1, &MPU9250) == MPU9250_Result_Ok) {
 8004700:	4c44      	ldr	r4, [pc, #272]	; (8004814 <main+0x158>)
 8004702:	4e45      	ldr	r6, [pc, #276]	; (8004818 <main+0x15c>)
	  TM_AHRSIMU_UpdateIMU(&IMU, MPU9250.Gx, MPU9250.Gy, MPU9250.Gz, MPU9250.Ax, MPU9250.Ay, MPU9250.Az);
 8004704:	4d48      	ldr	r5, [pc, #288]	; (8004828 <main+0x16c>)
	TM_AHRSIMU_Init(&IMU, 1000, 0.5, 0);
 8004706:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800470a:	f000 fb69 	bl	8004de0 <TM_AHRSIMU_Init>
  HAL_ADC_Start_IT(&hadc3);
 800470e:	4847      	ldr	r0, [pc, #284]	; (800482c <main+0x170>)
 8004710:	f7fc fd14 	bl	800113c <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8004714:	2104      	movs	r1, #4
 8004716:	4846      	ldr	r0, [pc, #280]	; (8004830 <main+0x174>)
 8004718:	f7ff f87c 	bl	8003814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 800471c:	2104      	movs	r1, #4
 800471e:	4844      	ldr	r0, [pc, #272]	; (8004830 <main+0x174>)
 8004720:	f7ff f898 	bl	8003854 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8004724:	210c      	movs	r1, #12
 8004726:	4843      	ldr	r0, [pc, #268]	; (8004834 <main+0x178>)
 8004728:	f7ff f874 	bl	8003814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_4);
 800472c:	210c      	movs	r1, #12
 800472e:	4841      	ldr	r0, [pc, #260]	; (8004834 <main+0x178>)
 8004730:	f7ff f890 	bl	8003854 <HAL_TIM_PWM_Start_IT>
  TIM4->CCR4=2700;
 8004734:	4b40      	ldr	r3, [pc, #256]	; (8004838 <main+0x17c>)
 8004736:	f640 228c 	movw	r2, #2700	; 0xa8c
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
	  if (MPU9250_DataReady(&hi2c1, &MPU9250) == MPU9250_Result_Ok) {
 800473c:	4621      	mov	r1, r4
 800473e:	4630      	mov	r0, r6
 8004740:	f7ff fdc1 	bl	80042c6 <MPU9250_DataReady>
 8004744:	b958      	cbnz	r0, 800475e <main+0xa2>
	  				MPU9250_ReadAcce(&hi2c1, &MPU9250);
 8004746:	4621      	mov	r1, r4
 8004748:	4630      	mov	r0, r6
 800474a:	f7ff fd01 	bl	8004150 <MPU9250_ReadAcce>
	          MPU9250_ReadGyro(&hi2c1, &MPU9250);
 800474e:	4621      	mov	r1, r4
 8004750:	4630      	mov	r0, r6
 8004752:	f7ff fd3b 	bl	80041cc <MPU9250_ReadGyro>
	          MPU9250_ReadMag(&hi2c1, &MPU9250);
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f7ff fd7f 	bl	800425c <MPU9250_ReadMag>
	  TM_AHRSIMU_UpdateIMU(&IMU, MPU9250.Gx, MPU9250.Gy, MPU9250.Gz, MPU9250.Ax, MPU9250.Ay, MPU9250.Az);
 800475e:	edd4 2a02 	vldr	s5, [r4, #8]
 8004762:	ed94 2a01 	vldr	s4, [r4, #4]
 8004766:	edd4 1a00 	vldr	s3, [r4]
 800476a:	ed94 1a05 	vldr	s2, [r4, #20]
 800476e:	edd4 0a04 	vldr	s1, [r4, #16]
 8004772:	ed94 0a03 	vldr	s0, [r4, #12]
 8004776:	482c      	ldr	r0, [pc, #176]	; (8004828 <main+0x16c>)
 8004778:	f000 fb43 	bl	8004e02 <TM_AHRSIMU_UpdateIMU>
	  if(IMU.Pitch>25  )
 800477c:	edd5 7a01 	vldr	s15, [r5, #4]
 8004780:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <main+0x17c>)
 8004782:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478e:	dd26      	ble.n	80047de <main+0x122>
		  TIM4->CCR4=3250+((int8_t)IMU.Pitch*15*-1);
 8004790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004794:	f640 40b2 	movw	r0, #3250	; 0xcb2
 8004798:	edcd 7a05 	vstr	s15, [sp, #20]
 800479c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 80047a0:	f64f 71f1 	movw	r1, #65521	; 0xfff1
 80047a4:	fb11 0303 	smlabb	r3, r1, r3, r0
 80047a8:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,1);
 80047aa:	2201      	movs	r2, #1
		  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,0);
 80047ac:	2140      	movs	r1, #64	; 0x40
 80047ae:	4823      	ldr	r0, [pc, #140]	; (800483c <main+0x180>)
 80047b0:	f7fd f91c 	bl	80019ec <HAL_GPIO_WritePin>
	  printf("R: %.0f, P: %.0f, Y: %.0f\n", IMU.Roll, IMU.Pitch, IMU.Yaw);
 80047b4:	6828      	ldr	r0, [r5, #0]
 80047b6:	f7fb fec7 	bl	8000548 <__aeabi_f2d>
 80047ba:	4680      	mov	r8, r0
 80047bc:	68a8      	ldr	r0, [r5, #8]
 80047be:	4689      	mov	r9, r1
 80047c0:	f7fb fec2 	bl	8000548 <__aeabi_f2d>
 80047c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047c8:	6868      	ldr	r0, [r5, #4]
 80047ca:	f7fb febd 	bl	8000548 <__aeabi_f2d>
 80047ce:	4642      	mov	r2, r8
 80047d0:	e9cd 0100 	strd	r0, r1, [sp]
 80047d4:	464b      	mov	r3, r9
 80047d6:	481a      	ldr	r0, [pc, #104]	; (8004840 <main+0x184>)
 80047d8:	f001 f944 	bl	8005a64 <iprintf>
	  if (MPU9250_DataReady(&hi2c1, &MPU9250) == MPU9250_Result_Ok) {
 80047dc:	e7ae      	b.n	800473c <main+0x80>
	  else if(IMU.Pitch<-25)
 80047de:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 80047e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ea:	f640 40b2 	movw	r0, #3250	; 0xcb2
 80047ee:	d50c      	bpl.n	800480a <main+0x14e>
		  TIM4->CCR4=3250+((int8_t)IMU.Pitch*15*-1);
 80047f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047f4:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 80047f8:	edcd 7a05 	vstr	s15, [sp, #20]
 80047fc:	f99d 1014 	ldrsb.w	r1, [sp, #20]
 8004800:	fb13 0301 	smlabb	r3, r3, r1, r0
 8004804:	6413      	str	r3, [r2, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,0);
 8004806:	2200      	movs	r2, #0
 8004808:	e7d0      	b.n	80047ac <main+0xf0>
		  TIM4->CCR4=3250;
 800480a:	6410      	str	r0, [r2, #64]	; 0x40
 800480c:	e7d2      	b.n	80047b4 <main+0xf8>
 800480e:	bf00      	nop
 8004810:	08008518 	.word	0x08008518
 8004814:	20000334 	.word	0x20000334
 8004818:	200002b4 	.word	0x200002b4
 800481c:	0800851e 	.word	0x0800851e
 8004820:	00000000 	.word	0x00000000
 8004824:	447a0000 	.word	0x447a0000
 8004828:	2000030c 	.word	0x2000030c
 800482c:	2000026c 	.word	0x2000026c
 8004830:	20000430 	.word	0x20000430
 8004834:	200003f0 	.word	0x200003f0
 8004838:	40000800 	.word	0x40000800
 800483c:	40021400 	.word	0x40021400
 8004840:	0800852d 	.word	0x0800852d

08004844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004844:	4770      	bx	lr
	...

08004848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004848:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <HAL_MspInit+0x44>)
 800484c:	2200      	movs	r2, #0
 800484e:	9200      	str	r2, [sp, #0]
 8004850:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004852:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004856:	6459      	str	r1, [r3, #68]	; 0x44
 8004858:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800485a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800485e:	9100      	str	r1, [sp, #0]
 8004860:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	9201      	str	r2, [sp, #4]
 8004864:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004866:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800486a:	6419      	str	r1, [r3, #64]	; 0x40
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004874:	4611      	mov	r1, r2
 8004876:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 8004878:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800487a:	f7fc fe1b 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800487e:	2005      	movs	r0, #5
 8004880:	f7fc fe4c 	bl	800151c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004884:	b003      	add	sp, #12
 8004886:	f85d fb04 	ldr.w	pc, [sp], #4
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800

08004890 <NMI_Handler>:
 8004890:	4770      	bx	lr

08004892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004892:	e7fe      	b.n	8004892 <HardFault_Handler>

08004894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004894:	e7fe      	b.n	8004894 <MemManage_Handler>

08004896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004896:	e7fe      	b.n	8004896 <BusFault_Handler>

08004898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004898:	e7fe      	b.n	8004898 <UsageFault_Handler>

0800489a <SVC_Handler>:
 800489a:	4770      	bx	lr

0800489c <DebugMon_Handler>:
 800489c:	4770      	bx	lr

0800489e <PendSV_Handler>:
 800489e:	4770      	bx	lr

080048a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a0:	f7fc bb94 	b.w	8000fcc <HAL_IncTick>

080048a4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80048a4:	4770      	bx	lr
	...

080048a8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80048a8:	4801      	ldr	r0, [pc, #4]	; (80048b0 <ADC_IRQHandler+0x8>)
 80048aa:	f7fc bcc5 	b.w	8001238 <HAL_ADC_IRQHandler>
 80048ae:	bf00      	nop
 80048b0:	2000026c 	.word	0x2000026c

080048b4 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048b4:	4801      	ldr	r0, [pc, #4]	; (80048bc <TIM1_CC_IRQHandler+0x8>)
 80048b6:	f7fe bd2d 	b.w	8003314 <HAL_TIM_IRQHandler>
 80048ba:	bf00      	nop
 80048bc:	20000430 	.word	0x20000430

080048c0 <TIM1_UP_TIM10_IRQHandler>:
 80048c0:	f7ff bff8 	b.w	80048b4 <TIM1_CC_IRQHandler>

080048c4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80048c4:	4801      	ldr	r0, [pc, #4]	; (80048cc <TIM4_IRQHandler+0x8>)
 80048c6:	f7fe bd25 	b.w	8003314 <HAL_TIM_IRQHandler>
 80048ca:	bf00      	nop
 80048cc:	200003f0 	.word	0x200003f0

080048d0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <I2C1_EV_IRQHandler+0x8>)
 80048d2:	f7fd bd65 	b.w	80023a0 <HAL_I2C_EV_IRQHandler>
 80048d6:	bf00      	nop
 80048d8:	200002b4 	.word	0x200002b4

080048dc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <I2C1_ER_IRQHandler+0x8>)
 80048de:	f7fe b983 	b.w	8002be8 <HAL_I2C_ER_IRQHandler>
 80048e2:	bf00      	nop
 80048e4:	200002b4 	.word	0x200002b4

080048e8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048e8:	4801      	ldr	r0, [pc, #4]	; (80048f0 <USART1_IRQHandler+0x8>)
 80048ea:	f7ff ba55 	b.w	8003d98 <HAL_UART_IRQHandler>
 80048ee:	bf00      	nop
 80048f0:	20000470 	.word	0x20000470

080048f4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80048f4:	4801      	ldr	r0, [pc, #4]	; (80048fc <DMA2_Stream0_IRQHandler+0x8>)
 80048f6:	f7fc bedb 	b.w	80016b0 <HAL_DMA_IRQHandler>
 80048fa:	bf00      	nop
 80048fc:	2000020c 	.word	0x2000020c

08004900 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	460e      	mov	r6, r1
 8004904:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004906:	460c      	mov	r4, r1
 8004908:	1ba3      	subs	r3, r4, r6
 800490a:	429d      	cmp	r5, r3
 800490c:	dc01      	bgt.n	8004912 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800490e:	4628      	mov	r0, r5
 8004910:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004912:	f3af 8000 	nop.w
 8004916:	f804 0b01 	strb.w	r0, [r4], #1
 800491a:	e7f5      	b.n	8004908 <_read+0x8>

0800491c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	460e      	mov	r6, r1
 8004920:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004922:	460c      	mov	r4, r1
 8004924:	1ba3      	subs	r3, r4, r6
 8004926:	429d      	cmp	r5, r3
 8004928:	dc01      	bgt.n	800492e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800492a:	4628      	mov	r0, r5
 800492c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800492e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004932:	f7ff fe57 	bl	80045e4 <__io_putchar>
 8004936:	e7f5      	b.n	8004924 <_write+0x8>

08004938 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004938:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <_sbrk+0x2c>)
 800493c:	6819      	ldr	r1, [r3, #0]
{
 800493e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004940:	b909      	cbnz	r1, 8004946 <_sbrk+0xe>
		heap_end = &end;
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <_sbrk+0x30>)
 8004944:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004946:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004948:	4669      	mov	r1, sp
 800494a:	4402      	add	r2, r0
 800494c:	428a      	cmp	r2, r1
 800494e:	d906      	bls.n	800495e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004950:	f000 fbea 	bl	8005128 <__errno>
 8004954:	230c      	movs	r3, #12
 8004956:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800495e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004960:	bd08      	pop	{r3, pc}
 8004962:	bf00      	nop
 8004964:	200001fc 	.word	0x200001fc
 8004968:	200004b4 	.word	0x200004b4

0800496c <_close>:

int _close(int file)
{
	return -1;
}
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	4770      	bx	lr

08004972 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004976:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004978:	2000      	movs	r0, #0
 800497a:	4770      	bx	lr

0800497c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800497c:	2001      	movs	r0, #1
 800497e:	4770      	bx	lr

08004980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004980:	2000      	movs	r0, #0
 8004982:	4770      	bx	lr

08004984 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004984:	490f      	ldr	r1, [pc, #60]	; (80049c4 <SystemInit+0x40>)
 8004986:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800498a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <SystemInit+0x44>)
 8004994:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004996:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800499e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80049a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <SystemInit+0x48>)
 80049ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049b6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80049b8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049be:	608b      	str	r3, [r1, #8]
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	24003010 	.word	0x24003010

080049d0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80049d0:	6803      	ldr	r3, [r0, #0]
 80049d2:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <HAL_TIM_Base_MspInit+0x70>)
 80049d4:	4293      	cmp	r3, r2
{
 80049d6:	b513      	push	{r0, r1, r4, lr}
  if(tim_baseHandle->Instance==TIM1)
 80049d8:	d11d      	bne.n	8004a16 <HAL_TIM_Base_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049da:	2400      	movs	r4, #0
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_TIM_Base_MspInit+0x74>)
 80049de:	9400      	str	r4, [sp, #0]
 80049e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	645a      	str	r2, [r3, #68]	; 0x44
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f003 0301 	and.w	r3, r3, #1

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80049ee:	4622      	mov	r2, r4
 80049f0:	4621      	mov	r1, r4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049f2:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80049f4:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049f6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80049f8:	f7fc fd5c 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049fc:	2019      	movs	r0, #25
 80049fe:	f7fc fd8d 	bl	800151c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004a02:	201b      	movs	r0, #27
 8004a04:	4622      	mov	r2, r4
 8004a06:	4621      	mov	r1, r4
 8004a08:	f7fc fd54 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004a0c:	201b      	movs	r0, #27
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004a0e:	f7fc fd85 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004a12:	b002      	add	sp, #8
 8004a14:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM4)
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <HAL_TIM_Base_MspInit+0x78>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d1fa      	bne.n	8004a12 <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_TIM_Base_MspInit+0x74>)
 8004a20:	9201      	str	r2, [sp, #4]
 8004a22:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a24:	f041 0104 	orr.w	r1, r1, #4
 8004a28:	6419      	str	r1, [r3, #64]	; 0x40
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004a32:	201e      	movs	r0, #30
 8004a34:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a36:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004a38:	f7fc fd3c 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004a3c:	201e      	movs	r0, #30
 8004a3e:	e7e6      	b.n	8004a0e <HAL_TIM_Base_MspInit+0x3e>
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40000800 	.word	0x40000800

08004a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	4604      	mov	r4, r0
 8004a50:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a52:	2214      	movs	r2, #20
 8004a54:	2100      	movs	r1, #0
 8004a56:	a803      	add	r0, sp, #12
 8004a58:	f000 fb90 	bl	800517c <memset>
  if(timHandle->Instance==TIM1)
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <HAL_TIM_MspPostInit+0x7c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d118      	bne.n	8004a96 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a64:	2300      	movs	r3, #0
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a6a:	4819      	ldr	r0, [pc, #100]	; (8004ad0 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6e:	f042 0210 	orr.w	r2, r2, #16
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a84:	2302      	movs	r3, #2
 8004a86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a8c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a8e:	f7fc fecd 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004a92:	b008      	add	sp, #32
 8004a94:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM4)
 8004a96:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <HAL_TIM_MspPostInit+0x88>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d1fa      	bne.n	8004a92 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_TIM_MspPostInit+0x80>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aa2:	480d      	ldr	r0, [pc, #52]	; (8004ad8 <HAL_TIM_MspPostInit+0x8c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa6:	f042 0208 	orr.w	r2, r2, #8
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abc:	2302      	movs	r3, #2
 8004abe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ac0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ac2:	a903      	add	r1, sp, #12
 8004ac4:	e7e3      	b.n	8004a8e <HAL_TIM_MspPostInit+0x42>
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40020c00 	.word	0x40020c00

08004adc <MX_TIM1_Init>:
{
 8004adc:	b510      	push	{r4, lr}
 8004ade:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	a803      	add	r0, sp, #12
 8004ae6:	f000 fb49 	bl	800517c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aea:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004aec:	221c      	movs	r2, #28
 8004aee:	4621      	mov	r1, r4
 8004af0:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af4:	9401      	str	r4, [sp, #4]
 8004af6:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004af8:	f000 fb40 	bl	800517c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004afc:	2220      	movs	r2, #32
 8004afe:	4621      	mov	r1, r4
 8004b00:	a80e      	add	r0, sp, #56	; 0x38
 8004b02:	f000 fb3b 	bl	800517c <memset>
  htim1.Instance = TIM1;
 8004b06:	482a      	ldr	r0, [pc, #168]	; (8004bb0 <MX_TIM1_Init+0xd4>)
  htim1.Init.Prescaler = 48;
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <MX_TIM1_Init+0xd8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b0a:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 48;
 8004b0c:	2330      	movs	r3, #48	; 0x30
 8004b0e:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 1000;
 8004b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b16:	60c3      	str	r3, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b18:	2380      	movs	r3, #128	; 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b1a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b1c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b1e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004b20:	f7fe fd00 	bl	8003524 <HAL_TIM_Base_Init>
 8004b24:	b108      	cbz	r0, 8004b2a <MX_TIM1_Init+0x4e>
    Error_Handler();
 8004b26:	f7ff fe8d 	bl	8004844 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004b2e:	a903      	add	r1, sp, #12
 8004b30:	481f      	ldr	r0, [pc, #124]	; (8004bb0 <MX_TIM1_Init+0xd4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b32:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004b34:	f7fe fdcc 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 8004b38:	b108      	cbz	r0, 8004b3e <MX_TIM1_Init+0x62>
    Error_Handler();
 8004b3a:	f7ff fe83 	bl	8004844 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b3e:	481c      	ldr	r0, [pc, #112]	; (8004bb0 <MX_TIM1_Init+0xd4>)
 8004b40:	f7fe fd0a 	bl	8003558 <HAL_TIM_PWM_Init>
 8004b44:	b108      	cbz	r0, 8004b4a <MX_TIM1_Init+0x6e>
    Error_Handler();
 8004b46:	f7ff fe7d 	bl	8004844 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b4a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b4c:	a901      	add	r1, sp, #4
 8004b4e:	4818      	ldr	r0, [pc, #96]	; (8004bb0 <MX_TIM1_Init+0xd4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b50:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b52:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b54:	f7fe febe 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b58:	b108      	cbz	r0, 8004b5e <MX_TIM1_Init+0x82>
    Error_Handler();
 8004b5a:	f7ff fe73 	bl	8004844 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b5e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b60:	2400      	movs	r4, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b62:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b64:	2204      	movs	r2, #4
  sConfigOC.Pulse = 500;
 8004b66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b6a:	a907      	add	r1, sp, #28
 8004b6c:	4810      	ldr	r0, [pc, #64]	; (8004bb0 <MX_TIM1_Init+0xd4>)
  sConfigOC.Pulse = 500;
 8004b6e:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b70:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b72:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b74:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b76:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b78:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b7a:	f7fe fd3d 	bl	80035f8 <HAL_TIM_PWM_ConfigChannel>
 8004b7e:	b108      	cbz	r0, 8004b84 <MX_TIM1_Init+0xa8>
    Error_Handler();
 8004b80:	f7ff fe60 	bl	8004844 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b88:	a90e      	add	r1, sp, #56	; 0x38
 8004b8a:	4809      	ldr	r0, [pc, #36]	; (8004bb0 <MX_TIM1_Init+0xd4>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b8c:	940e      	str	r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b8e:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b90:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b92:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b94:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b96:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b98:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b9a:	f7fe feb9 	bl	8003910 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b9e:	b108      	cbz	r0, 8004ba4 <MX_TIM1_Init+0xc8>
    Error_Handler();
 8004ba0:	f7ff fe50 	bl	8004844 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8004ba4:	4802      	ldr	r0, [pc, #8]	; (8004bb0 <MX_TIM1_Init+0xd4>)
 8004ba6:	f7ff ff51 	bl	8004a4c <HAL_TIM_MspPostInit>
}
 8004baa:	b016      	add	sp, #88	; 0x58
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000430 	.word	0x20000430
 8004bb4:	40010000 	.word	0x40010000

08004bb8 <MX_TIM4_Init>:
{
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	a803      	add	r0, sp, #12
 8004bc2:	f000 fadb 	bl	800517c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc6:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bc8:	221c      	movs	r2, #28
 8004bca:	eb0d 0002 	add.w	r0, sp, r2
 8004bce:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd0:	9401      	str	r4, [sp, #4]
 8004bd2:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd4:	f000 fad2 	bl	800517c <memset>
  htim4.Instance = TIM4;
 8004bd8:	481f      	ldr	r0, [pc, #124]	; (8004c58 <MX_TIM4_Init+0xa0>)
  htim4.Init.Prescaler = 24;
 8004bda:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <MX_TIM4_Init+0xa4>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bdc:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 24;
 8004bde:	2318      	movs	r3, #24
 8004be0:	e880 000c 	stmia.w	r0, {r2, r3}
  htim4.Init.Period = 40000;
 8004be4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004be8:	60c3      	str	r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bea:	2380      	movs	r3, #128	; 0x80
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bec:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004bf0:	f7fe fc98 	bl	8003524 <HAL_TIM_Base_Init>
 8004bf4:	b108      	cbz	r0, 8004bfa <MX_TIM4_Init+0x42>
    Error_Handler();
 8004bf6:	f7ff fe25 	bl	8004844 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004bfe:	a903      	add	r1, sp, #12
 8004c00:	4815      	ldr	r0, [pc, #84]	; (8004c58 <MX_TIM4_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c02:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004c04:	f7fe fd64 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 8004c08:	b108      	cbz	r0, 8004c0e <MX_TIM4_Init+0x56>
    Error_Handler();
 8004c0a:	f7ff fe1b 	bl	8004844 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004c0e:	4812      	ldr	r0, [pc, #72]	; (8004c58 <MX_TIM4_Init+0xa0>)
 8004c10:	f7fe fca2 	bl	8003558 <HAL_TIM_PWM_Init>
 8004c14:	b108      	cbz	r0, 8004c1a <MX_TIM4_Init+0x62>
    Error_Handler();
 8004c16:	f7ff fe15 	bl	8004844 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c1a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c1c:	a901      	add	r1, sp, #4
 8004c1e:	480e      	ldr	r0, [pc, #56]	; (8004c58 <MX_TIM4_Init+0xa0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c20:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c22:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c24:	f7fe fe56 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004c28:	b108      	cbz	r0, 8004c2e <MX_TIM4_Init+0x76>
    Error_Handler();
 8004c2a:	f7ff fe0b 	bl	8004844 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c2e:	2360      	movs	r3, #96	; 0x60
 8004c30:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 3250;
 8004c32:	f640 43b2 	movw	r3, #3250	; 0xcb2
 8004c36:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c38:	220c      	movs	r2, #12
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c3a:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c3c:	a907      	add	r1, sp, #28
 8004c3e:	4806      	ldr	r0, [pc, #24]	; (8004c58 <MX_TIM4_Init+0xa0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c40:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c42:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c44:	f7fe fcd8 	bl	80035f8 <HAL_TIM_PWM_ConfigChannel>
 8004c48:	b108      	cbz	r0, 8004c4e <MX_TIM4_Init+0x96>
    Error_Handler();
 8004c4a:	f7ff fdfb 	bl	8004844 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8004c4e:	4802      	ldr	r0, [pc, #8]	; (8004c58 <MX_TIM4_Init+0xa0>)
 8004c50:	f7ff fefc 	bl	8004a4c <HAL_TIM_MspPostInit>
}
 8004c54:	b00e      	add	sp, #56	; 0x38
 8004c56:	bd10      	pop	{r4, pc}
 8004c58:	200003f0 	.word	0x200003f0
 8004c5c:	40000800 	.word	0x40000800

08004c60 <oneOverSqrt>:
 */
#include "tm_stm32_ahrs_imu.h"

/* Calculate 1/sqrt(x) with magic number support */
static
float oneOverSqrt(float x) {
 8004c60:	b508      	push	{r3, lr}
    return 1.0f / (float) sqrt(x);
 8004c62:	ee10 0a10 	vmov	r0, s0
 8004c66:	f7fb fc6f 	bl	8000548 <__aeabi_f2d>
 8004c6a:	ec41 0b10 	vmov	d0, r0, r1
 8004c6e:	f002 fe95 	bl	800799c <sqrt>
 8004c72:	ec51 0b10 	vmov	r0, r1, d0
 8004c76:	f7fb ff93 	bl	8000ba0 <__aeabi_d2f>
}
 8004c7a:	ee07 0a90 	vmov	s15, r0
 8004c7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004c82:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8004c86:	bd08      	pop	{r3, pc}

08004c88 <calculateAngles>:

static
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	ed2d 8b04 	vpush	{d8-d9}
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8004c8e:	ed90 9a06 	vldr	s18, [r0, #24]
 8004c92:	ed90 8a07 	vldr	s16, [r0, #28]
 8004c96:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8004c9a:	eef0 7a68 	vmov.f32	s15, s17
 8004c9e:	eee9 7a49 	vfms.f32	s15, s18, s18
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	b082      	sub	sp, #8
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8004ca6:	eee8 7a48 	vfms.f32	s15, s16, s16
 8004caa:	ee17 0a90 	vmov	r0, s15
 8004cae:	f7fb fc4b 	bl	8000548 <__aeabi_f2d>
 8004cb2:	edd4 7a08 	vldr	s15, [r4, #32]
 8004cb6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004cba:	edd4 7a05 	vldr	s15, [r4, #20]
 8004cbe:	eea7 8a89 	vfma.f32	s16, s15, s18
 8004cc2:	e9cd 0100 	strd	r0, r1, [sp]
 8004cc6:	ee18 0a10 	vmov	r0, s16
 8004cca:	f7fb fc3d 	bl	8000548 <__aeabi_f2d>
 8004cce:	ed9d 1b00 	vldr	d1, [sp]
 8004cd2:	ec41 0b10 	vmov	d0, r0, r1
 8004cd6:	f002 fe5f 	bl	8007998 <atan2>
 8004cda:	ec51 0b10 	vmov	r0, r1, d0
 8004cde:	f7fb ff5f 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8004ce2:	ed94 7a05 	vldr	s14, [r4, #20]
 8004ce6:	edd4 7a07 	vldr	s15, [r4, #28]
 8004cea:	edd4 6a06 	vldr	s13, [r4, #24]
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8004cee:	6020      	str	r0, [r4, #0]
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8004cf0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8004cf4:	ed94 7a08 	vldr	s14, [r4, #32]
 8004cf8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004cfc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d04:	ee17 0a90 	vmov	r0, s15
 8004d08:	f7fb fc1e 	bl	8000548 <__aeabi_f2d>
 8004d0c:	ec41 0b10 	vmov	d0, r0, r1
 8004d10:	f002 fdea 	bl	80078e8 <asin>
 8004d14:	ec51 0b10 	vmov	r0, r1, d0
 8004d18:	f7fb ff42 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8004d1c:	ed94 9a07 	vldr	s18, [r4, #28]
 8004d20:	ed94 8a08 	vldr	s16, [r4, #32]
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 8004d24:	6060      	str	r0, [r4, #4]
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8004d26:	eee9 8a49 	vfms.f32	s17, s18, s18
 8004d2a:	eee8 8a48 	vfms.f32	s17, s16, s16
 8004d2e:	ee18 0a90 	vmov	r0, s17
 8004d32:	f7fb fc09 	bl	8000548 <__aeabi_f2d>
 8004d36:	edd4 7a05 	vldr	s15, [r4, #20]
 8004d3a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004d3e:	edd4 7a06 	vldr	s15, [r4, #24]
 8004d42:	eea7 8a89 	vfma.f32	s16, s15, s18
 8004d46:	e9cd 0100 	strd	r0, r1, [sp]
 8004d4a:	ee18 0a10 	vmov	r0, s16
 8004d4e:	f7fb fbfb 	bl	8000548 <__aeabi_f2d>
 8004d52:	ed9d 1b00 	vldr	d1, [sp]
 8004d56:	ec41 0b10 	vmov	d0, r0, r1
 8004d5a:	f002 fe1d 	bl	8007998 <atan2>

    /* Calculate degrees and remove inclination */
    AHRSIMU->Roll *= AHRSIMU_RAD2DEG(1);
 8004d5e:	ed9f 8a1d 	vldr	s16, [pc, #116]	; 8004dd4 <calculateAngles+0x14c>
 8004d62:	edd4 7a00 	vldr	s15, [r4]
 8004d66:	ee67 7a88 	vmul.f32	s15, s15, s16
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8004d6a:	ec51 0b10 	vmov	r0, r1, d0
    AHRSIMU->Roll *= AHRSIMU_RAD2DEG(1);
 8004d6e:	edc4 7a00 	vstr	s15, [r4]
    AHRSIMU->Pitch *= AHRSIMU_RAD2DEG(1);
 8004d72:	edd4 7a01 	vldr	s15, [r4, #4]
 8004d76:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004d7a:	edc4 7a01 	vstr	s15, [r4, #4]
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8004d7e:	f7fb ff0f 	bl	8000ba0 <__aeabi_d2f>
    AHRSIMU->Yaw = AHRSIMU->Yaw * AHRSIMU_RAD2DEG(1) - AHRSIMU->Inclination;
 8004d82:	edd4 7a03 	vldr	s15, [r4, #12]
 8004d86:	ee07 0a10 	vmov	s14, r0
 8004d8a:	eed7 7a08 	vfnms.f32	s15, s14, s16
 8004d8e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004dd8 <calculateAngles+0x150>
 8004d92:	eef0 6a67 	vmov.f32	s13, s15

    /* Check values because of inclination */
    if (AHRSIMU->Yaw < -180) {
 8004d96:	eddf 7a11 	vldr	s15, [pc, #68]	; 8004ddc <calculateAngles+0x154>
 8004d9a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	d506      	bpl.n	8004db2 <calculateAngles+0x12a>
        AHRSIMU->Yaw = 180.0f - (-180.0f - AHRSIMU->Yaw);
 8004da4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004da8:	ee77 7a67 	vsub.f32	s15, s14, s15
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8004dac:	edc4 7a02 	vstr	s15, [r4, #8]
    }
}
 8004db0:	e006      	b.n	8004dc0 <calculateAngles+0x138>
    } else if (AHRSIMU->Yaw > 180) {
 8004db2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	dc05      	bgt.n	8004dc8 <calculateAngles+0x140>
    AHRSIMU->Yaw = AHRSIMU->Yaw * AHRSIMU_RAD2DEG(1) - AHRSIMU->Inclination;
 8004dbc:	edc4 6a02 	vstr	s13, [r4, #8]
}
 8004dc0:	b002      	add	sp, #8
 8004dc2:	ecbd 8b04 	vpop	{d8-d9}
 8004dc6:	bd10      	pop	{r4, pc}
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8004dc8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dd0:	e7ec      	b.n	8004dac <calculateAngles+0x124>
 8004dd2:	bf00      	nop
 8004dd4:	42652ee1 	.word	0x42652ee1
 8004dd8:	43340000 	.word	0x43340000
 8004ddc:	c3340000 	.word	0xc3340000

08004de0 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float beta, float sampleRate, float inclination) {
    AHRSIMU->_beta = beta;
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8004de0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004de4:	eec7 0aa0 	vdiv.f32	s1, s15, s1
    AHRSIMU->Inclination = inclination;

    AHRSIMU->_q0 = 1.0f;
    AHRSIMU->_q1 = 0.0f;
 8004de8:	2300      	movs	r3, #0
 8004dea:	6183      	str	r3, [r0, #24]
    AHRSIMU->_q2 = 0.0f;
 8004dec:	61c3      	str	r3, [r0, #28]
    AHRSIMU->_q3 = 0.0f;
 8004dee:	6203      	str	r3, [r0, #32]
    AHRSIMU->_beta = beta;
 8004df0:	ed80 0a04 	vstr	s0, [r0, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 8004df4:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 8004df8:	ed80 1a03 	vstr	s2, [r0, #12]
    AHRSIMU->_q0 = 1.0f;
 8004dfc:	edc0 7a05 	vstr	s15, [r0, #20]
    AHRSIMU->_q3 = 0.0f;
 8004e00:	4770      	bx	lr

08004e02 <TM_AHRSIMU_UpdateIMU>:

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004e02:	b510      	push	{r4, lr}
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004e04:	edd0 7a06 	vldr	s15, [r0, #24]
 8004e08:	edd0 6a07 	vldr	s13, [r0, #28]
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004e0c:	ed90 6a05 	vldr	s12, [r0, #20]
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004e10:	edd0 5a08 	vldr	s11, [r0, #32]
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004e14:	ed2d 8b0a 	vpush	{d8-d12}
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004e18:	ee60 bae6 	vnmul.f32	s23, s1, s13
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004e1c:	ee26 ba81 	vmul.f32	s22, s13, s2
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8004e20:	ee61 aa67 	vnmul.f32	s21, s2, s15
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004e24:	ee27 9aa0 	vmul.f32	s18, s15, s1
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004e28:	eee7 bac0 	vfms.f32	s23, s15, s0
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004e2c:	4604      	mov	r4, r0
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004e2e:	eea0 ba06 	vfma.f32	s22, s0, s12
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8004e32:	eee0 aa86 	vfma.f32	s21, s1, s12
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004e36:	eea1 9a06 	vfma.f32	s18, s2, s12
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004e3a:	eee5 bac1 	vfms.f32	s23, s11, s2
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004e3e:	eea0 bae5 	vfms.f32	s22, s1, s11
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8004e42:	eee0 aa25 	vfma.f32	s21, s0, s11
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004e46:	eea0 9a66 	vfms.f32	s18, s0, s13

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004e4a:	eef5 1a40 	vcmp.f32	s3, #0.0
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004e4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 8004e56:	eef0 9a61 	vmov.f32	s19, s3
 8004e5a:	eef0 8a42 	vmov.f32	s17, s4
 8004e5e:	eeb0 8a62 	vmov.f32	s16, s5
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 8004e62:	ee6b ba87 	vmul.f32	s23, s23, s14
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8004e66:	ee2b ba07 	vmul.f32	s22, s22, s14
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 8004e6a:	ee6a aa87 	vmul.f32	s21, s21, s14
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 8004e6e:	ee29 9a07 	vmul.f32	s18, s18, s14
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 8004e72:	d10a      	bne.n	8004e8a <TM_AHRSIMU_UpdateIMU+0x88>
 8004e74:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	d105      	bne.n	8004e8a <TM_AHRSIMU_UpdateIMU+0x88>
 8004e7e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8004e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e86:	f000 8086 	beq.w	8004f96 <TM_AHRSIMU_UpdateIMU+0x194>

        /* Normalise accelerometer measurement */
        recipNorm = oneOverSqrt(ax * ax + ay * ay + az * az);
 8004e8a:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8004e8e:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8004e92:	eea8 0a08 	vfma.f32	s0, s16, s16
 8004e96:	f7ff fee3 	bl	8004c60 <oneOverSqrt>

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRSIMU->_q0;
        _2q1 = 2.0f * AHRSIMU->_q1;
        _2q2 = 2.0f * AHRSIMU->_q2;
        _2q3 = 2.0f * AHRSIMU->_q3;
 8004e9a:	edd4 6a08 	vldr	s13, [r4, #32]
        _2q1 = 2.0f * AHRSIMU->_q1;
 8004e9e:	edd4 4a06 	vldr	s9, [r4, #24]
        _2q0 = 2.0f * AHRSIMU->_q0;
 8004ea2:	ed94 3a05 	vldr	s6, [r4, #20]
        _2q2 = 2.0f * AHRSIMU->_q2;
 8004ea6:	ed94 ca07 	vldr	s24, [r4, #28]
        ax *= recipNorm;
 8004eaa:	ee69 1a80 	vmul.f32	s3, s19, s0
        _2q3 = 2.0f * AHRSIMU->_q3;
 8004eae:	ee36 1aa6 	vadd.f32	s2, s13, s13
        _4q0 = 4.0f * AHRSIMU->_q0;
 8004eb2:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
        az *= recipNorm;
 8004eb6:	ee68 2a00 	vmul.f32	s5, s16, s0
        _8q1 = 8.0f * AHRSIMU->_q1;
        _8q2 = 8.0f * AHRSIMU->_q2;
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8004eba:	ee66 0aa6 	vmul.f32	s1, s13, s13

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004ebe:	ee20 0a68 	vnmul.f32	s0, s0, s17
        _4q1 = 4.0f * AHRSIMU->_q1;
 8004ec2:	ee24 8aa5 	vmul.f32	s16, s9, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004ec6:	ee61 8a61 	vnmul.f32	s17, s2, s3
        _2q0 = 2.0f * AHRSIMU->_q0;
 8004eca:	ee73 7a03 	vadd.f32	s15, s6, s6
        _4q0 = 4.0f * AHRSIMU->_q0;
 8004ece:	ee23 2a25 	vmul.f32	s4, s6, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004ed2:	eee8 8a20 	vfma.f32	s17, s16, s1
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 8004ed6:	ee23 3a03 	vmul.f32	s6, s6, s6
        _8q1 = 8.0f * AHRSIMU->_q1;
 8004eda:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004ede:	ee23 3a25 	vmul.f32	s6, s6, s11
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8004ee2:	ee24 5aa4 	vmul.f32	s10, s9, s9
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004ee6:	eee4 8a83 	vfma.f32	s17, s9, s6
        _8q1 = 8.0f * AHRSIMU->_q1;
 8004eea:	ee64 caa3 	vmul.f32	s25, s9, s7
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004eee:	eee0 8a27 	vfma.f32	s17, s0, s15
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8004ef2:	ee2c 7a0c 	vmul.f32	s14, s24, s24
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004ef6:	ee78 8ac8 	vsub.f32	s17, s17, s16
        _4q2 = 4.0f * AHRSIMU->_q2;
 8004efa:	ee2c 4a25 	vmul.f32	s8, s24, s11
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004efe:	eeec 8a85 	vfma.f32	s17, s25, s10
        _2q2 = 2.0f * AHRSIMU->_q2;
 8004f02:	ee3c 6a0c 	vadd.f32	s12, s24, s24
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004f06:	eeec 8a87 	vfma.f32	s17, s25, s14
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004f0a:	ee21 aa86 	vmul.f32	s20, s3, s12
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004f0e:	eee2 8a88 	vfma.f32	s17, s5, s16
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f12:	ee21 8aa7 	vmul.f32	s16, s3, s15
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004f16:	eea2 aa07 	vfma.f32	s20, s4, s14
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f1a:	eeac 8a03 	vfma.f32	s16, s24, s6
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004f1e:	eea2 aa05 	vfma.f32	s20, s4, s10
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f22:	eea4 8a20 	vfma.f32	s16, s8, s1
        _2q1 = 2.0f * AHRSIMU->_q1;
 8004f26:	ee74 9aa4 	vadd.f32	s19, s9, s9
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f2a:	eea0 8a01 	vfma.f32	s16, s0, s2
        _8q2 = 8.0f * AHRSIMU->_q2;
 8004f2e:	ee6c 3a23 	vmul.f32	s7, s24, s7
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f32:	ee38 8a44 	vsub.f32	s16, s16, s8
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004f36:	eea0 aa29 	vfma.f32	s20, s0, s19
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f3a:	eea3 8a85 	vfma.f32	s16, s7, s10
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004f3e:	ee69 9ae1 	vnmul.f32	s19, s19, s3
 8004f42:	ee25 5a25 	vmul.f32	s10, s10, s11
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f46:	eea3 8a87 	vfma.f32	s16, s7, s14
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004f4a:	eee6 9a85 	vfma.f32	s19, s13, s10
 8004f4e:	ee27 7a25 	vmul.f32	s14, s14, s11
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004f52:	eea2 8a84 	vfma.f32	s16, s5, s8
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8004f56:	eee6 9a87 	vfma.f32	s19, s13, s14
 8004f5a:	eee0 9a06 	vfma.f32	s19, s0, s12

        /* Normalise step magnitude */
        recipNorm = oneOverSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004f5e:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8004f62:	eeaa 0a0a 	vfma.f32	s0, s20, s20
 8004f66:	eea8 0a08 	vfma.f32	s0, s16, s16
 8004f6a:	eea9 0aa9 	vfma.f32	s0, s19, s19
 8004f6e:	f7ff fe77 	bl	8004c60 <oneOverSqrt>
        s1 *= recipNorm;
        s2 *= recipNorm;
        s3 *= recipNorm;

        /* Apply feedback step */
        qDot1 -= AHRSIMU->_beta * s0;
 8004f72:	edd4 7a04 	vldr	s15, [r4, #16]
 8004f76:	ee20 aa4a 	vnmul.f32	s20, s0, s20
        qDot2 -= AHRSIMU->_beta * s1;
 8004f7a:	ee60 8a68 	vnmul.f32	s17, s0, s17
        qDot3 -= AHRSIMU->_beta * s2;
 8004f7e:	ee20 8a48 	vnmul.f32	s16, s0, s16
        qDot4 -= AHRSIMU->_beta * s3;
 8004f82:	ee20 0a69 	vnmul.f32	s0, s0, s19
        qDot1 -= AHRSIMU->_beta * s0;
 8004f86:	eeea ba27 	vfma.f32	s23, s20, s15
        qDot2 -= AHRSIMU->_beta * s1;
 8004f8a:	eea8 baa7 	vfma.f32	s22, s17, s15
        qDot3 -= AHRSIMU->_beta * s2;
 8004f8e:	eee8 aa27 	vfma.f32	s21, s16, s15
        qDot4 -= AHRSIMU->_beta * s3;
 8004f92:	eea0 9a27 	vfma.f32	s18, s0, s15
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004f96:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004f9a:	ed94 0a06 	vldr	s0, [r4, #24]
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004f9e:	edd4 6a05 	vldr	s13, [r4, #20]
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004fa2:	ed94 7a07 	vldr	s14, [r4, #28]
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004fa6:	edd4 7a08 	vldr	s15, [r4, #32]
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004faa:	eeab 0a06 	vfma.f32	s0, s22, s12
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004fae:	eeeb 6a86 	vfma.f32	s13, s23, s12
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8004fb2:	ed84 0a06 	vstr	s0, [r4, #24]

    /* Normalise quaternion */
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004fb6:	ee20 0a00 	vmul.f32	s0, s0, s0
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004fba:	eeaa 7a86 	vfma.f32	s14, s21, s12
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004fbe:	eea6 0aa6 	vfma.f32	s0, s13, s13
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004fc2:	eee9 7a06 	vfma.f32	s15, s18, s12
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004fc6:	eea7 0a07 	vfma.f32	s0, s14, s14
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8004fca:	edc4 7a08 	vstr	s15, [r4, #32]
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8004fce:	edc4 6a05 	vstr	s13, [r4, #20]
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8004fd2:	ed84 7a07 	vstr	s14, [r4, #28]
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8004fd6:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8004fda:	f7ff fe41 	bl	8004c60 <oneOverSqrt>
    AHRSIMU->_q0 *= recipNorm;
 8004fde:	edd4 7a05 	vldr	s15, [r4, #20]
 8004fe2:	ee67 7a80 	vmul.f32	s15, s15, s0
    AHRSIMU->_q2 *= recipNorm;
    AHRSIMU->_q3 *= recipNorm;

    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}
 8004fe6:	ecbd 8b0a 	vpop	{d8-d12}
    AHRSIMU->_q0 *= recipNorm;
 8004fea:	edc4 7a05 	vstr	s15, [r4, #20]
    AHRSIMU->_q1 *= recipNorm;
 8004fee:	edd4 7a06 	vldr	s15, [r4, #24]
 8004ff2:	ee67 7a80 	vmul.f32	s15, s15, s0
    calculateAngles(AHRSIMU);
 8004ff6:	4620      	mov	r0, r4
    AHRSIMU->_q1 *= recipNorm;
 8004ff8:	edc4 7a06 	vstr	s15, [r4, #24]
    AHRSIMU->_q2 *= recipNorm;
 8004ffc:	edd4 7a07 	vldr	s15, [r4, #28]
 8005000:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005004:	edc4 7a07 	vstr	s15, [r4, #28]
    AHRSIMU->_q3 *= recipNorm;
 8005008:	edd4 7a08 	vldr	s15, [r4, #32]
 800500c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005010:	ed84 0a08 	vstr	s0, [r4, #32]
}
 8005014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    calculateAngles(AHRSIMU);
 8005018:	f7ff be36 	b.w	8004c88 <calculateAngles>

0800501c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800501c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800501e:	480b      	ldr	r0, [pc, #44]	; (800504c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <MX_USART1_UART_Init+0x34>)
 8005022:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005026:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800502a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800502c:	2300      	movs	r3, #0
 800502e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005030:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005032:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005034:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005036:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005038:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800503a:	f7fe fde1 	bl	8003c00 <HAL_UART_Init>
 800503e:	b118      	cbz	r0, 8005048 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005044:	f7ff bbfe 	b.w	8004844 <Error_Handler>
 8005048:	bd08      	pop	{r3, pc}
 800504a:	bf00      	nop
 800504c:	20000470 	.word	0x20000470
 8005050:	40011000 	.word	0x40011000

08005054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005054:	b510      	push	{r4, lr}
 8005056:	4604      	mov	r4, r0
 8005058:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800505a:	2214      	movs	r2, #20
 800505c:	2100      	movs	r1, #0
 800505e:	a803      	add	r0, sp, #12
 8005060:	f000 f88c 	bl	800517c <memset>
  if(uartHandle->Instance==USART1)
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_UART_MspInit+0x78>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d12d      	bne.n	80050c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800506c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8005070:	2400      	movs	r4, #0
 8005072:	9401      	str	r4, [sp, #4]
 8005074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005076:	4816      	ldr	r0, [pc, #88]	; (80050d0 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005078:	f042 0210 	orr.w	r2, r2, #16
 800507c:	645a      	str	r2, [r3, #68]	; 0x44
 800507e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005080:	f002 0210 	and.w	r2, r2, #16
 8005084:	9201      	str	r2, [sp, #4]
 8005086:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005088:	9402      	str	r4, [sp, #8]
 800508a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	9302      	str	r3, [sp, #8]
 800509a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800509c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050a6:	2301      	movs	r3, #1
 80050a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050aa:	2303      	movs	r3, #3
 80050ac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050b0:	2307      	movs	r3, #7
 80050b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b4:	f7fc fbba 	bl	800182c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050b8:	2025      	movs	r0, #37	; 0x25
 80050ba:	4622      	mov	r2, r4
 80050bc:	4621      	mov	r1, r4
 80050be:	f7fc f9f9 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050c2:	2025      	movs	r0, #37	; 0x25
 80050c4:	f7fc fa2a 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80050c8:	b008      	add	sp, #32
 80050ca:	bd10      	pop	{r4, pc}
 80050cc:	40011000 	.word	0x40011000
 80050d0:	40020000 	.word	0x40020000

080050d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800510c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050da:	e003      	b.n	80050e4 <LoopCopyDataInit>

080050dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050e2:	3104      	adds	r1, #4

080050e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050e4:	480b      	ldr	r0, [pc, #44]	; (8005114 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050ec:	d3f6      	bcc.n	80050dc <CopyDataInit>
  ldr  r2, =_sbss
 80050ee:	4a0b      	ldr	r2, [pc, #44]	; (800511c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050f0:	e002      	b.n	80050f8 <LoopFillZerobss>

080050f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050f4:	f842 3b04 	str.w	r3, [r2], #4

080050f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050fc:	d3f9      	bcc.n	80050f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050fe:	f7ff fc41 	bl	8004984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005102:	f000 f817 	bl	8005134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005106:	f7ff fad9 	bl	80046bc <main>
  bx  lr    
 800510a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800510c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005110:	08008880 	.word	0x08008880
  ldr  r0, =_sdata
 8005114:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005118:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800511c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005120:	200004b4 	.word	0x200004b4

08005124 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005124:	e7fe      	b.n	8005124 <CAN1_RX0_IRQHandler>
	...

08005128 <__errno>:
 8005128:	4b01      	ldr	r3, [pc, #4]	; (8005130 <__errno+0x8>)
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	2000000c 	.word	0x2000000c

08005134 <__libc_init_array>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4e0d      	ldr	r6, [pc, #52]	; (800516c <__libc_init_array+0x38>)
 8005138:	4c0d      	ldr	r4, [pc, #52]	; (8005170 <__libc_init_array+0x3c>)
 800513a:	1ba4      	subs	r4, r4, r6
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	2500      	movs	r5, #0
 8005140:	42a5      	cmp	r5, r4
 8005142:	d109      	bne.n	8005158 <__libc_init_array+0x24>
 8005144:	4e0b      	ldr	r6, [pc, #44]	; (8005174 <__libc_init_array+0x40>)
 8005146:	4c0c      	ldr	r4, [pc, #48]	; (8005178 <__libc_init_array+0x44>)
 8005148:	f003 f9d6 	bl	80084f8 <_init>
 800514c:	1ba4      	subs	r4, r4, r6
 800514e:	10a4      	asrs	r4, r4, #2
 8005150:	2500      	movs	r5, #0
 8005152:	42a5      	cmp	r5, r4
 8005154:	d105      	bne.n	8005162 <__libc_init_array+0x2e>
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800515c:	4798      	blx	r3
 800515e:	3501      	adds	r5, #1
 8005160:	e7ee      	b.n	8005140 <__libc_init_array+0xc>
 8005162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005166:	4798      	blx	r3
 8005168:	3501      	adds	r5, #1
 800516a:	e7f2      	b.n	8005152 <__libc_init_array+0x1e>
 800516c:	08008878 	.word	0x08008878
 8005170:	08008878 	.word	0x08008878
 8005174:	08008878 	.word	0x08008878
 8005178:	0800887c 	.word	0x0800887c

0800517c <memset>:
 800517c:	4402      	add	r2, r0
 800517e:	4603      	mov	r3, r0
 8005180:	4293      	cmp	r3, r2
 8005182:	d100      	bne.n	8005186 <memset+0xa>
 8005184:	4770      	bx	lr
 8005186:	f803 1b01 	strb.w	r1, [r3], #1
 800518a:	e7f9      	b.n	8005180 <memset+0x4>

0800518c <__cvt>:
 800518c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	ec55 4b10 	vmov	r4, r5, d0
 8005194:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005196:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800519a:	2d00      	cmp	r5, #0
 800519c:	460e      	mov	r6, r1
 800519e:	4691      	mov	r9, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	bfb8      	it	lt
 80051a4:	4622      	movlt	r2, r4
 80051a6:	462b      	mov	r3, r5
 80051a8:	f027 0720 	bic.w	r7, r7, #32
 80051ac:	bfbb      	ittet	lt
 80051ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051b2:	461d      	movlt	r5, r3
 80051b4:	2300      	movge	r3, #0
 80051b6:	232d      	movlt	r3, #45	; 0x2d
 80051b8:	bfb8      	it	lt
 80051ba:	4614      	movlt	r4, r2
 80051bc:	2f46      	cmp	r7, #70	; 0x46
 80051be:	700b      	strb	r3, [r1, #0]
 80051c0:	d004      	beq.n	80051cc <__cvt+0x40>
 80051c2:	2f45      	cmp	r7, #69	; 0x45
 80051c4:	d100      	bne.n	80051c8 <__cvt+0x3c>
 80051c6:	3601      	adds	r6, #1
 80051c8:	2102      	movs	r1, #2
 80051ca:	e000      	b.n	80051ce <__cvt+0x42>
 80051cc:	2103      	movs	r1, #3
 80051ce:	ab03      	add	r3, sp, #12
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	ab02      	add	r3, sp, #8
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4632      	mov	r2, r6
 80051d8:	4653      	mov	r3, sl
 80051da:	ec45 4b10 	vmov	d0, r4, r5
 80051de:	f000 fe0b 	bl	8005df8 <_dtoa_r>
 80051e2:	2f47      	cmp	r7, #71	; 0x47
 80051e4:	4680      	mov	r8, r0
 80051e6:	d102      	bne.n	80051ee <__cvt+0x62>
 80051e8:	f019 0f01 	tst.w	r9, #1
 80051ec:	d026      	beq.n	800523c <__cvt+0xb0>
 80051ee:	2f46      	cmp	r7, #70	; 0x46
 80051f0:	eb08 0906 	add.w	r9, r8, r6
 80051f4:	d111      	bne.n	800521a <__cvt+0x8e>
 80051f6:	f898 3000 	ldrb.w	r3, [r8]
 80051fa:	2b30      	cmp	r3, #48	; 0x30
 80051fc:	d10a      	bne.n	8005214 <__cvt+0x88>
 80051fe:	2200      	movs	r2, #0
 8005200:	2300      	movs	r3, #0
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f7fb fc5b 	bl	8000ac0 <__aeabi_dcmpeq>
 800520a:	b918      	cbnz	r0, 8005214 <__cvt+0x88>
 800520c:	f1c6 0601 	rsb	r6, r6, #1
 8005210:	f8ca 6000 	str.w	r6, [sl]
 8005214:	f8da 3000 	ldr.w	r3, [sl]
 8005218:	4499      	add	r9, r3
 800521a:	2200      	movs	r2, #0
 800521c:	2300      	movs	r3, #0
 800521e:	4620      	mov	r0, r4
 8005220:	4629      	mov	r1, r5
 8005222:	f7fb fc4d 	bl	8000ac0 <__aeabi_dcmpeq>
 8005226:	b938      	cbnz	r0, 8005238 <__cvt+0xac>
 8005228:	2230      	movs	r2, #48	; 0x30
 800522a:	9b03      	ldr	r3, [sp, #12]
 800522c:	4599      	cmp	r9, r3
 800522e:	d905      	bls.n	800523c <__cvt+0xb0>
 8005230:	1c59      	adds	r1, r3, #1
 8005232:	9103      	str	r1, [sp, #12]
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e7f8      	b.n	800522a <__cvt+0x9e>
 8005238:	f8cd 900c 	str.w	r9, [sp, #12]
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005240:	eba3 0308 	sub.w	r3, r3, r8
 8005244:	4640      	mov	r0, r8
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	b004      	add	sp, #16
 800524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800524e <__exponent>:
 800524e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005250:	4603      	mov	r3, r0
 8005252:	2900      	cmp	r1, #0
 8005254:	bfb8      	it	lt
 8005256:	4249      	neglt	r1, r1
 8005258:	f803 2b02 	strb.w	r2, [r3], #2
 800525c:	bfb4      	ite	lt
 800525e:	222d      	movlt	r2, #45	; 0x2d
 8005260:	222b      	movge	r2, #43	; 0x2b
 8005262:	2909      	cmp	r1, #9
 8005264:	7042      	strb	r2, [r0, #1]
 8005266:	dd20      	ble.n	80052aa <__exponent+0x5c>
 8005268:	f10d 0207 	add.w	r2, sp, #7
 800526c:	4617      	mov	r7, r2
 800526e:	260a      	movs	r6, #10
 8005270:	fb91 f5f6 	sdiv	r5, r1, r6
 8005274:	fb06 1115 	mls	r1, r6, r5, r1
 8005278:	3130      	adds	r1, #48	; 0x30
 800527a:	2d09      	cmp	r5, #9
 800527c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005280:	f102 34ff 	add.w	r4, r2, #4294967295
 8005284:	4629      	mov	r1, r5
 8005286:	dc09      	bgt.n	800529c <__exponent+0x4e>
 8005288:	3130      	adds	r1, #48	; 0x30
 800528a:	3a02      	subs	r2, #2
 800528c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005290:	42ba      	cmp	r2, r7
 8005292:	461c      	mov	r4, r3
 8005294:	d304      	bcc.n	80052a0 <__exponent+0x52>
 8005296:	1a20      	subs	r0, r4, r0
 8005298:	b003      	add	sp, #12
 800529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529c:	4622      	mov	r2, r4
 800529e:	e7e7      	b.n	8005270 <__exponent+0x22>
 80052a0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80052a4:	f803 1b01 	strb.w	r1, [r3], #1
 80052a8:	e7f2      	b.n	8005290 <__exponent+0x42>
 80052aa:	2230      	movs	r2, #48	; 0x30
 80052ac:	461c      	mov	r4, r3
 80052ae:	4411      	add	r1, r2
 80052b0:	f804 2b02 	strb.w	r2, [r4], #2
 80052b4:	7059      	strb	r1, [r3, #1]
 80052b6:	e7ee      	b.n	8005296 <__exponent+0x48>

080052b8 <_printf_float>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	b08d      	sub	sp, #52	; 0x34
 80052be:	460c      	mov	r4, r1
 80052c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80052c4:	4616      	mov	r6, r2
 80052c6:	461f      	mov	r7, r3
 80052c8:	4605      	mov	r5, r0
 80052ca:	f001 fcdf 	bl	8006c8c <_localeconv_r>
 80052ce:	6803      	ldr	r3, [r0, #0]
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fa ff7c 	bl	80001d0 <strlen>
 80052d8:	2300      	movs	r3, #0
 80052da:	930a      	str	r3, [sp, #40]	; 0x28
 80052dc:	f8d8 3000 	ldr.w	r3, [r8]
 80052e0:	9005      	str	r0, [sp, #20]
 80052e2:	3307      	adds	r3, #7
 80052e4:	f023 0307 	bic.w	r3, r3, #7
 80052e8:	f103 0208 	add.w	r2, r3, #8
 80052ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80052f0:	f8d4 b000 	ldr.w	fp, [r4]
 80052f4:	f8c8 2000 	str.w	r2, [r8]
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005300:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005304:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005308:	9307      	str	r3, [sp, #28]
 800530a:	f8cd 8018 	str.w	r8, [sp, #24]
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	4ba5      	ldr	r3, [pc, #660]	; (80055a8 <_printf_float+0x2f0>)
 8005314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005318:	f7fb fc04 	bl	8000b24 <__aeabi_dcmpun>
 800531c:	2800      	cmp	r0, #0
 800531e:	f040 81fb 	bne.w	8005718 <_printf_float+0x460>
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	4ba0      	ldr	r3, [pc, #640]	; (80055a8 <_printf_float+0x2f0>)
 8005328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800532c:	f7fb fbdc 	bl	8000ae8 <__aeabi_dcmple>
 8005330:	2800      	cmp	r0, #0
 8005332:	f040 81f1 	bne.w	8005718 <_printf_float+0x460>
 8005336:	2200      	movs	r2, #0
 8005338:	2300      	movs	r3, #0
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fb fbc9 	bl	8000ad4 <__aeabi_dcmplt>
 8005342:	b110      	cbz	r0, 800534a <_printf_float+0x92>
 8005344:	232d      	movs	r3, #45	; 0x2d
 8005346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800534a:	4b98      	ldr	r3, [pc, #608]	; (80055ac <_printf_float+0x2f4>)
 800534c:	4a98      	ldr	r2, [pc, #608]	; (80055b0 <_printf_float+0x2f8>)
 800534e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005352:	bf8c      	ite	hi
 8005354:	4690      	movhi	r8, r2
 8005356:	4698      	movls	r8, r3
 8005358:	2303      	movs	r3, #3
 800535a:	f02b 0204 	bic.w	r2, fp, #4
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	6022      	str	r2, [r4, #0]
 8005362:	f04f 0900 	mov.w	r9, #0
 8005366:	9700      	str	r7, [sp, #0]
 8005368:	4633      	mov	r3, r6
 800536a:	aa0b      	add	r2, sp, #44	; 0x2c
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f9e2 	bl	8005738 <_printf_common>
 8005374:	3001      	adds	r0, #1
 8005376:	f040 8093 	bne.w	80054a0 <_printf_float+0x1e8>
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	b00d      	add	sp, #52	; 0x34
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	6861      	ldr	r1, [r4, #4]
 8005386:	1c4b      	adds	r3, r1, #1
 8005388:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800538c:	d13f      	bne.n	800540e <_printf_float+0x156>
 800538e:	2306      	movs	r3, #6
 8005390:	6063      	str	r3, [r4, #4]
 8005392:	2300      	movs	r3, #0
 8005394:	9303      	str	r3, [sp, #12]
 8005396:	ab0a      	add	r3, sp, #40	; 0x28
 8005398:	9302      	str	r3, [sp, #8]
 800539a:	ab09      	add	r3, sp, #36	; 0x24
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	ec49 8b10 	vmov	d0, r8, r9
 80053a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053a6:	6022      	str	r2, [r4, #0]
 80053a8:	f8cd a004 	str.w	sl, [sp, #4]
 80053ac:	6861      	ldr	r1, [r4, #4]
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7ff feec 	bl	800518c <__cvt>
 80053b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80053b8:	2b47      	cmp	r3, #71	; 0x47
 80053ba:	4680      	mov	r8, r0
 80053bc:	d109      	bne.n	80053d2 <_printf_float+0x11a>
 80053be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c0:	1cd8      	adds	r0, r3, #3
 80053c2:	db02      	blt.n	80053ca <_printf_float+0x112>
 80053c4:	6862      	ldr	r2, [r4, #4]
 80053c6:	4293      	cmp	r3, r2
 80053c8:	dd57      	ble.n	800547a <_printf_float+0x1c2>
 80053ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80053ce:	fa5f fa8a 	uxtb.w	sl, sl
 80053d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80053d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d8:	d834      	bhi.n	8005444 <_printf_float+0x18c>
 80053da:	3901      	subs	r1, #1
 80053dc:	4652      	mov	r2, sl
 80053de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053e2:	9109      	str	r1, [sp, #36]	; 0x24
 80053e4:	f7ff ff33 	bl	800524e <__exponent>
 80053e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ea:	1883      	adds	r3, r0, r2
 80053ec:	2a01      	cmp	r2, #1
 80053ee:	4681      	mov	r9, r0
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	dc02      	bgt.n	80053fa <_printf_float+0x142>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	07d1      	lsls	r1, r2, #31
 80053f8:	d501      	bpl.n	80053fe <_printf_float+0x146>
 80053fa:	3301      	adds	r3, #1
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0af      	beq.n	8005366 <_printf_float+0xae>
 8005406:	232d      	movs	r3, #45	; 0x2d
 8005408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540c:	e7ab      	b.n	8005366 <_printf_float+0xae>
 800540e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005412:	d002      	beq.n	800541a <_printf_float+0x162>
 8005414:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005418:	d1bb      	bne.n	8005392 <_printf_float+0xda>
 800541a:	b189      	cbz	r1, 8005440 <_printf_float+0x188>
 800541c:	2300      	movs	r3, #0
 800541e:	9303      	str	r3, [sp, #12]
 8005420:	ab0a      	add	r3, sp, #40	; 0x28
 8005422:	9302      	str	r3, [sp, #8]
 8005424:	ab09      	add	r3, sp, #36	; 0x24
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	ec49 8b10 	vmov	d0, r8, r9
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	f8cd a004 	str.w	sl, [sp, #4]
 8005432:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005436:	4628      	mov	r0, r5
 8005438:	f7ff fea8 	bl	800518c <__cvt>
 800543c:	4680      	mov	r8, r0
 800543e:	e7be      	b.n	80053be <_printf_float+0x106>
 8005440:	2301      	movs	r3, #1
 8005442:	e7a5      	b.n	8005390 <_printf_float+0xd8>
 8005444:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005448:	d119      	bne.n	800547e <_printf_float+0x1c6>
 800544a:	2900      	cmp	r1, #0
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	dd0c      	ble.n	800546a <_printf_float+0x1b2>
 8005450:	6121      	str	r1, [r4, #16]
 8005452:	b913      	cbnz	r3, 800545a <_printf_float+0x1a2>
 8005454:	6822      	ldr	r2, [r4, #0]
 8005456:	07d2      	lsls	r2, r2, #31
 8005458:	d502      	bpl.n	8005460 <_printf_float+0x1a8>
 800545a:	3301      	adds	r3, #1
 800545c:	440b      	add	r3, r1
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005462:	65a3      	str	r3, [r4, #88]	; 0x58
 8005464:	f04f 0900 	mov.w	r9, #0
 8005468:	e7c9      	b.n	80053fe <_printf_float+0x146>
 800546a:	b913      	cbnz	r3, 8005472 <_printf_float+0x1ba>
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	07d0      	lsls	r0, r2, #31
 8005470:	d501      	bpl.n	8005476 <_printf_float+0x1be>
 8005472:	3302      	adds	r3, #2
 8005474:	e7f3      	b.n	800545e <_printf_float+0x1a6>
 8005476:	2301      	movs	r3, #1
 8005478:	e7f1      	b.n	800545e <_printf_float+0x1a6>
 800547a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800547e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005482:	4293      	cmp	r3, r2
 8005484:	db05      	blt.n	8005492 <_printf_float+0x1da>
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	07d1      	lsls	r1, r2, #31
 800548c:	d5e8      	bpl.n	8005460 <_printf_float+0x1a8>
 800548e:	3301      	adds	r3, #1
 8005490:	e7e5      	b.n	800545e <_printf_float+0x1a6>
 8005492:	2b00      	cmp	r3, #0
 8005494:	bfd4      	ite	le
 8005496:	f1c3 0302 	rsble	r3, r3, #2
 800549a:	2301      	movgt	r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	e7de      	b.n	800545e <_printf_float+0x1a6>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	055a      	lsls	r2, r3, #21
 80054a4:	d407      	bmi.n	80054b6 <_printf_float+0x1fe>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	4642      	mov	r2, r8
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	d12b      	bne.n	800550c <_printf_float+0x254>
 80054b4:	e761      	b.n	800537a <_printf_float+0xc2>
 80054b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054ba:	f240 80e2 	bls.w	8005682 <_printf_float+0x3ca>
 80054be:	2200      	movs	r2, #0
 80054c0:	2300      	movs	r3, #0
 80054c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054c6:	f7fb fafb 	bl	8000ac0 <__aeabi_dcmpeq>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d03c      	beq.n	8005548 <_printf_float+0x290>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4a38      	ldr	r2, [pc, #224]	; (80055b4 <_printf_float+0x2fc>)
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f af4e 	beq.w	800537a <_printf_float+0xc2>
 80054de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e2:	429a      	cmp	r2, r3
 80054e4:	db02      	blt.n	80054ec <_printf_float+0x234>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	07d8      	lsls	r0, r3, #31
 80054ea:	d50f      	bpl.n	800550c <_printf_float+0x254>
 80054ec:	9b05      	ldr	r3, [sp, #20]
 80054ee:	9a04      	ldr	r2, [sp, #16]
 80054f0:	4631      	mov	r1, r6
 80054f2:	4628      	mov	r0, r5
 80054f4:	47b8      	blx	r7
 80054f6:	3001      	adds	r0, #1
 80054f8:	f43f af3f 	beq.w	800537a <_printf_float+0xc2>
 80054fc:	f04f 0800 	mov.w	r8, #0
 8005500:	f104 091a 	add.w	r9, r4, #26
 8005504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005506:	3b01      	subs	r3, #1
 8005508:	4598      	cmp	r8, r3
 800550a:	db12      	blt.n	8005532 <_printf_float+0x27a>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	079b      	lsls	r3, r3, #30
 8005510:	d509      	bpl.n	8005526 <_printf_float+0x26e>
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	f104 0919 	add.w	r9, r4, #25
 800551a:	68e3      	ldr	r3, [r4, #12]
 800551c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	4598      	cmp	r8, r3
 8005522:	f2c0 80ee 	blt.w	8005702 <_printf_float+0x44a>
 8005526:	68e0      	ldr	r0, [r4, #12]
 8005528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800552a:	4298      	cmp	r0, r3
 800552c:	bfb8      	it	lt
 800552e:	4618      	movlt	r0, r3
 8005530:	e725      	b.n	800537e <_printf_float+0xc6>
 8005532:	2301      	movs	r3, #1
 8005534:	464a      	mov	r2, r9
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	f43f af1c 	beq.w	800537a <_printf_float+0xc2>
 8005542:	f108 0801 	add.w	r8, r8, #1
 8005546:	e7dd      	b.n	8005504 <_printf_float+0x24c>
 8005548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	dc34      	bgt.n	80055b8 <_printf_float+0x300>
 800554e:	2301      	movs	r3, #1
 8005550:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <_printf_float+0x2fc>)
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	47b8      	blx	r7
 8005558:	3001      	adds	r0, #1
 800555a:	f43f af0e 	beq.w	800537a <_printf_float+0xc2>
 800555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005560:	b923      	cbnz	r3, 800556c <_printf_float+0x2b4>
 8005562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005564:	b913      	cbnz	r3, 800556c <_printf_float+0x2b4>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	07d9      	lsls	r1, r3, #31
 800556a:	d5cf      	bpl.n	800550c <_printf_float+0x254>
 800556c:	9b05      	ldr	r3, [sp, #20]
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	4631      	mov	r1, r6
 8005572:	4628      	mov	r0, r5
 8005574:	47b8      	blx	r7
 8005576:	3001      	adds	r0, #1
 8005578:	f43f aeff 	beq.w	800537a <_printf_float+0xc2>
 800557c:	f04f 0900 	mov.w	r9, #0
 8005580:	f104 0a1a 	add.w	sl, r4, #26
 8005584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005586:	425b      	negs	r3, r3
 8005588:	4599      	cmp	r9, r3
 800558a:	db01      	blt.n	8005590 <_printf_float+0x2d8>
 800558c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800558e:	e78b      	b.n	80054a8 <_printf_float+0x1f0>
 8005590:	2301      	movs	r3, #1
 8005592:	4652      	mov	r2, sl
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f aeed 	beq.w	800537a <_printf_float+0xc2>
 80055a0:	f109 0901 	add.w	r9, r9, #1
 80055a4:	e7ee      	b.n	8005584 <_printf_float+0x2cc>
 80055a6:	bf00      	nop
 80055a8:	7fefffff 	.word	0x7fefffff
 80055ac:	08008564 	.word	0x08008564
 80055b0:	08008568 	.word	0x08008568
 80055b4:	08008574 	.word	0x08008574
 80055b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055bc:	429a      	cmp	r2, r3
 80055be:	bfa8      	it	ge
 80055c0:	461a      	movge	r2, r3
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	4691      	mov	r9, r2
 80055c6:	dc38      	bgt.n	800563a <_printf_float+0x382>
 80055c8:	f104 031a 	add.w	r3, r4, #26
 80055cc:	f04f 0b00 	mov.w	fp, #0
 80055d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055d4:	9306      	str	r3, [sp, #24]
 80055d6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80055da:	ebaa 0309 	sub.w	r3, sl, r9
 80055de:	459b      	cmp	fp, r3
 80055e0:	db33      	blt.n	800564a <_printf_float+0x392>
 80055e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e6:	429a      	cmp	r2, r3
 80055e8:	db3a      	blt.n	8005660 <_printf_float+0x3a8>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	07da      	lsls	r2, r3, #31
 80055ee:	d437      	bmi.n	8005660 <_printf_float+0x3a8>
 80055f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055f4:	eba3 020a 	sub.w	r2, r3, sl
 80055f8:	eba3 0901 	sub.w	r9, r3, r1
 80055fc:	4591      	cmp	r9, r2
 80055fe:	bfa8      	it	ge
 8005600:	4691      	movge	r9, r2
 8005602:	f1b9 0f00 	cmp.w	r9, #0
 8005606:	dc33      	bgt.n	8005670 <_printf_float+0x3b8>
 8005608:	f04f 0800 	mov.w	r8, #0
 800560c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005610:	f104 0a1a 	add.w	sl, r4, #26
 8005614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	eba3 0309 	sub.w	r3, r3, r9
 800561e:	4598      	cmp	r8, r3
 8005620:	f6bf af74 	bge.w	800550c <_printf_float+0x254>
 8005624:	2301      	movs	r3, #1
 8005626:	4652      	mov	r2, sl
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f aea3 	beq.w	800537a <_printf_float+0xc2>
 8005634:	f108 0801 	add.w	r8, r8, #1
 8005638:	e7ec      	b.n	8005614 <_printf_float+0x35c>
 800563a:	4613      	mov	r3, r2
 800563c:	4631      	mov	r1, r6
 800563e:	4642      	mov	r2, r8
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	d1bf      	bne.n	80055c8 <_printf_float+0x310>
 8005648:	e697      	b.n	800537a <_printf_float+0xc2>
 800564a:	2301      	movs	r3, #1
 800564c:	9a06      	ldr	r2, [sp, #24]
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	f43f ae90 	beq.w	800537a <_printf_float+0xc2>
 800565a:	f10b 0b01 	add.w	fp, fp, #1
 800565e:	e7ba      	b.n	80055d6 <_printf_float+0x31e>
 8005660:	9b05      	ldr	r3, [sp, #20]
 8005662:	9a04      	ldr	r2, [sp, #16]
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	d1c0      	bne.n	80055f0 <_printf_float+0x338>
 800566e:	e684      	b.n	800537a <_printf_float+0xc2>
 8005670:	464b      	mov	r3, r9
 8005672:	eb08 020a 	add.w	r2, r8, sl
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	d1c3      	bne.n	8005608 <_printf_float+0x350>
 8005680:	e67b      	b.n	800537a <_printf_float+0xc2>
 8005682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005684:	2a01      	cmp	r2, #1
 8005686:	dc01      	bgt.n	800568c <_printf_float+0x3d4>
 8005688:	07db      	lsls	r3, r3, #31
 800568a:	d537      	bpl.n	80056fc <_printf_float+0x444>
 800568c:	2301      	movs	r3, #1
 800568e:	4642      	mov	r2, r8
 8005690:	4631      	mov	r1, r6
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	f43f ae6f 	beq.w	800537a <_printf_float+0xc2>
 800569c:	9b05      	ldr	r3, [sp, #20]
 800569e:	9a04      	ldr	r2, [sp, #16]
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f ae67 	beq.w	800537a <_printf_float+0xc2>
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056b4:	f7fb fa04 	bl	8000ac0 <__aeabi_dcmpeq>
 80056b8:	b158      	cbz	r0, 80056d2 <_printf_float+0x41a>
 80056ba:	f04f 0800 	mov.w	r8, #0
 80056be:	f104 0a1a 	add.w	sl, r4, #26
 80056c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c4:	3b01      	subs	r3, #1
 80056c6:	4598      	cmp	r8, r3
 80056c8:	db0d      	blt.n	80056e6 <_printf_float+0x42e>
 80056ca:	464b      	mov	r3, r9
 80056cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056d0:	e6eb      	b.n	80054aa <_printf_float+0x1f2>
 80056d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d4:	f108 0201 	add.w	r2, r8, #1
 80056d8:	3b01      	subs	r3, #1
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	d1f2      	bne.n	80056ca <_printf_float+0x412>
 80056e4:	e649      	b.n	800537a <_printf_float+0xc2>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f ae42 	beq.w	800537a <_printf_float+0xc2>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	e7e2      	b.n	80056c2 <_printf_float+0x40a>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4642      	mov	r2, r8
 8005700:	e7eb      	b.n	80056da <_printf_float+0x422>
 8005702:	2301      	movs	r3, #1
 8005704:	464a      	mov	r2, r9
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f ae34 	beq.w	800537a <_printf_float+0xc2>
 8005712:	f108 0801 	add.w	r8, r8, #1
 8005716:	e700      	b.n	800551a <_printf_float+0x262>
 8005718:	4642      	mov	r2, r8
 800571a:	464b      	mov	r3, r9
 800571c:	4640      	mov	r0, r8
 800571e:	4649      	mov	r1, r9
 8005720:	f7fb fa00 	bl	8000b24 <__aeabi_dcmpun>
 8005724:	2800      	cmp	r0, #0
 8005726:	f43f ae2d 	beq.w	8005384 <_printf_float+0xcc>
 800572a:	4b01      	ldr	r3, [pc, #4]	; (8005730 <_printf_float+0x478>)
 800572c:	4a01      	ldr	r2, [pc, #4]	; (8005734 <_printf_float+0x47c>)
 800572e:	e60e      	b.n	800534e <_printf_float+0x96>
 8005730:	0800856c 	.word	0x0800856c
 8005734:	08008570 	.word	0x08008570

08005738 <_printf_common>:
 8005738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800573c:	4691      	mov	r9, r2
 800573e:	461f      	mov	r7, r3
 8005740:	688a      	ldr	r2, [r1, #8]
 8005742:	690b      	ldr	r3, [r1, #16]
 8005744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005748:	4293      	cmp	r3, r2
 800574a:	bfb8      	it	lt
 800574c:	4613      	movlt	r3, r2
 800574e:	f8c9 3000 	str.w	r3, [r9]
 8005752:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005756:	4606      	mov	r6, r0
 8005758:	460c      	mov	r4, r1
 800575a:	b112      	cbz	r2, 8005762 <_printf_common+0x2a>
 800575c:	3301      	adds	r3, #1
 800575e:	f8c9 3000 	str.w	r3, [r9]
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	0699      	lsls	r1, r3, #26
 8005766:	bf42      	ittt	mi
 8005768:	f8d9 3000 	ldrmi.w	r3, [r9]
 800576c:	3302      	addmi	r3, #2
 800576e:	f8c9 3000 	strmi.w	r3, [r9]
 8005772:	6825      	ldr	r5, [r4, #0]
 8005774:	f015 0506 	ands.w	r5, r5, #6
 8005778:	d107      	bne.n	800578a <_printf_common+0x52>
 800577a:	f104 0a19 	add.w	sl, r4, #25
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	f8d9 2000 	ldr.w	r2, [r9]
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	429d      	cmp	r5, r3
 8005788:	db29      	blt.n	80057de <_printf_common+0xa6>
 800578a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	3300      	adds	r3, #0
 8005792:	bf18      	it	ne
 8005794:	2301      	movne	r3, #1
 8005796:	0692      	lsls	r2, r2, #26
 8005798:	d42e      	bmi.n	80057f8 <_printf_common+0xc0>
 800579a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800579e:	4639      	mov	r1, r7
 80057a0:	4630      	mov	r0, r6
 80057a2:	47c0      	blx	r8
 80057a4:	3001      	adds	r0, #1
 80057a6:	d021      	beq.n	80057ec <_printf_common+0xb4>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	68e5      	ldr	r5, [r4, #12]
 80057ac:	f8d9 2000 	ldr.w	r2, [r9]
 80057b0:	f003 0306 	and.w	r3, r3, #6
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	bf08      	it	eq
 80057b8:	1aad      	subeq	r5, r5, r2
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	bf0c      	ite	eq
 80057c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c4:	2500      	movne	r5, #0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bfc4      	itt	gt
 80057ca:	1a9b      	subgt	r3, r3, r2
 80057cc:	18ed      	addgt	r5, r5, r3
 80057ce:	f04f 0900 	mov.w	r9, #0
 80057d2:	341a      	adds	r4, #26
 80057d4:	454d      	cmp	r5, r9
 80057d6:	d11b      	bne.n	8005810 <_printf_common+0xd8>
 80057d8:	2000      	movs	r0, #0
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	2301      	movs	r3, #1
 80057e0:	4652      	mov	r2, sl
 80057e2:	4639      	mov	r1, r7
 80057e4:	4630      	mov	r0, r6
 80057e6:	47c0      	blx	r8
 80057e8:	3001      	adds	r0, #1
 80057ea:	d103      	bne.n	80057f4 <_printf_common+0xbc>
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f4:	3501      	adds	r5, #1
 80057f6:	e7c2      	b.n	800577e <_printf_common+0x46>
 80057f8:	18e1      	adds	r1, r4, r3
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	2030      	movs	r0, #48	; 0x30
 80057fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005802:	4422      	add	r2, r4
 8005804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800580c:	3302      	adds	r3, #2
 800580e:	e7c4      	b.n	800579a <_printf_common+0x62>
 8005810:	2301      	movs	r3, #1
 8005812:	4622      	mov	r2, r4
 8005814:	4639      	mov	r1, r7
 8005816:	4630      	mov	r0, r6
 8005818:	47c0      	blx	r8
 800581a:	3001      	adds	r0, #1
 800581c:	d0e6      	beq.n	80057ec <_printf_common+0xb4>
 800581e:	f109 0901 	add.w	r9, r9, #1
 8005822:	e7d7      	b.n	80057d4 <_printf_common+0x9c>

08005824 <_printf_i>:
 8005824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005828:	4617      	mov	r7, r2
 800582a:	7e0a      	ldrb	r2, [r1, #24]
 800582c:	b085      	sub	sp, #20
 800582e:	2a6e      	cmp	r2, #110	; 0x6e
 8005830:	4698      	mov	r8, r3
 8005832:	4606      	mov	r6, r0
 8005834:	460c      	mov	r4, r1
 8005836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005838:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800583c:	f000 80bc 	beq.w	80059b8 <_printf_i+0x194>
 8005840:	d81a      	bhi.n	8005878 <_printf_i+0x54>
 8005842:	2a63      	cmp	r2, #99	; 0x63
 8005844:	d02e      	beq.n	80058a4 <_printf_i+0x80>
 8005846:	d80a      	bhi.n	800585e <_printf_i+0x3a>
 8005848:	2a00      	cmp	r2, #0
 800584a:	f000 80c8 	beq.w	80059de <_printf_i+0x1ba>
 800584e:	2a58      	cmp	r2, #88	; 0x58
 8005850:	f000 808a 	beq.w	8005968 <_printf_i+0x144>
 8005854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005858:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800585c:	e02a      	b.n	80058b4 <_printf_i+0x90>
 800585e:	2a64      	cmp	r2, #100	; 0x64
 8005860:	d001      	beq.n	8005866 <_printf_i+0x42>
 8005862:	2a69      	cmp	r2, #105	; 0x69
 8005864:	d1f6      	bne.n	8005854 <_printf_i+0x30>
 8005866:	6821      	ldr	r1, [r4, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800586e:	d023      	beq.n	80058b8 <_printf_i+0x94>
 8005870:	1d11      	adds	r1, r2, #4
 8005872:	6019      	str	r1, [r3, #0]
 8005874:	6813      	ldr	r3, [r2, #0]
 8005876:	e027      	b.n	80058c8 <_printf_i+0xa4>
 8005878:	2a73      	cmp	r2, #115	; 0x73
 800587a:	f000 80b4 	beq.w	80059e6 <_printf_i+0x1c2>
 800587e:	d808      	bhi.n	8005892 <_printf_i+0x6e>
 8005880:	2a6f      	cmp	r2, #111	; 0x6f
 8005882:	d02a      	beq.n	80058da <_printf_i+0xb6>
 8005884:	2a70      	cmp	r2, #112	; 0x70
 8005886:	d1e5      	bne.n	8005854 <_printf_i+0x30>
 8005888:	680a      	ldr	r2, [r1, #0]
 800588a:	f042 0220 	orr.w	r2, r2, #32
 800588e:	600a      	str	r2, [r1, #0]
 8005890:	e003      	b.n	800589a <_printf_i+0x76>
 8005892:	2a75      	cmp	r2, #117	; 0x75
 8005894:	d021      	beq.n	80058da <_printf_i+0xb6>
 8005896:	2a78      	cmp	r2, #120	; 0x78
 8005898:	d1dc      	bne.n	8005854 <_printf_i+0x30>
 800589a:	2278      	movs	r2, #120	; 0x78
 800589c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80058a0:	496e      	ldr	r1, [pc, #440]	; (8005a5c <_printf_i+0x238>)
 80058a2:	e064      	b.n	800596e <_printf_i+0x14a>
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80058aa:	1d11      	adds	r1, r2, #4
 80058ac:	6019      	str	r1, [r3, #0]
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0a3      	b.n	8005a00 <_printf_i+0x1dc>
 80058b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80058bc:	f102 0104 	add.w	r1, r2, #4
 80058c0:	6019      	str	r1, [r3, #0]
 80058c2:	d0d7      	beq.n	8005874 <_printf_i+0x50>
 80058c4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	da03      	bge.n	80058d4 <_printf_i+0xb0>
 80058cc:	222d      	movs	r2, #45	; 0x2d
 80058ce:	425b      	negs	r3, r3
 80058d0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058d4:	4962      	ldr	r1, [pc, #392]	; (8005a60 <_printf_i+0x23c>)
 80058d6:	220a      	movs	r2, #10
 80058d8:	e017      	b.n	800590a <_printf_i+0xe6>
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80058e2:	d003      	beq.n	80058ec <_printf_i+0xc8>
 80058e4:	1d08      	adds	r0, r1, #4
 80058e6:	6018      	str	r0, [r3, #0]
 80058e8:	680b      	ldr	r3, [r1, #0]
 80058ea:	e006      	b.n	80058fa <_printf_i+0xd6>
 80058ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058f0:	f101 0004 	add.w	r0, r1, #4
 80058f4:	6018      	str	r0, [r3, #0]
 80058f6:	d0f7      	beq.n	80058e8 <_printf_i+0xc4>
 80058f8:	880b      	ldrh	r3, [r1, #0]
 80058fa:	4959      	ldr	r1, [pc, #356]	; (8005a60 <_printf_i+0x23c>)
 80058fc:	2a6f      	cmp	r2, #111	; 0x6f
 80058fe:	bf14      	ite	ne
 8005900:	220a      	movne	r2, #10
 8005902:	2208      	moveq	r2, #8
 8005904:	2000      	movs	r0, #0
 8005906:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800590a:	6865      	ldr	r5, [r4, #4]
 800590c:	60a5      	str	r5, [r4, #8]
 800590e:	2d00      	cmp	r5, #0
 8005910:	f2c0 809c 	blt.w	8005a4c <_printf_i+0x228>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	f020 0004 	bic.w	r0, r0, #4
 800591a:	6020      	str	r0, [r4, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d13f      	bne.n	80059a0 <_printf_i+0x17c>
 8005920:	2d00      	cmp	r5, #0
 8005922:	f040 8095 	bne.w	8005a50 <_printf_i+0x22c>
 8005926:	4675      	mov	r5, lr
 8005928:	2a08      	cmp	r2, #8
 800592a:	d10b      	bne.n	8005944 <_printf_i+0x120>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07da      	lsls	r2, r3, #31
 8005930:	d508      	bpl.n	8005944 <_printf_i+0x120>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6862      	ldr	r2, [r4, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	bfde      	ittt	le
 800593a:	2330      	movle	r3, #48	; 0x30
 800593c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005940:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005944:	ebae 0305 	sub.w	r3, lr, r5
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	f8cd 8000 	str.w	r8, [sp]
 800594e:	463b      	mov	r3, r7
 8005950:	aa03      	add	r2, sp, #12
 8005952:	4621      	mov	r1, r4
 8005954:	4630      	mov	r0, r6
 8005956:	f7ff feef 	bl	8005738 <_printf_common>
 800595a:	3001      	adds	r0, #1
 800595c:	d155      	bne.n	8005a0a <_printf_i+0x1e6>
 800595e:	f04f 30ff 	mov.w	r0, #4294967295
 8005962:	b005      	add	sp, #20
 8005964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005968:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800596c:	493c      	ldr	r1, [pc, #240]	; (8005a60 <_printf_i+0x23c>)
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005976:	f100 0504 	add.w	r5, r0, #4
 800597a:	601d      	str	r5, [r3, #0]
 800597c:	d001      	beq.n	8005982 <_printf_i+0x15e>
 800597e:	6803      	ldr	r3, [r0, #0]
 8005980:	e002      	b.n	8005988 <_printf_i+0x164>
 8005982:	0655      	lsls	r5, r2, #25
 8005984:	d5fb      	bpl.n	800597e <_printf_i+0x15a>
 8005986:	8803      	ldrh	r3, [r0, #0]
 8005988:	07d0      	lsls	r0, r2, #31
 800598a:	bf44      	itt	mi
 800598c:	f042 0220 	orrmi.w	r2, r2, #32
 8005990:	6022      	strmi	r2, [r4, #0]
 8005992:	b91b      	cbnz	r3, 800599c <_printf_i+0x178>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	f022 0220 	bic.w	r2, r2, #32
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	2210      	movs	r2, #16
 800599e:	e7b1      	b.n	8005904 <_printf_i+0xe0>
 80059a0:	4675      	mov	r5, lr
 80059a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80059a6:	fb02 3310 	mls	r3, r2, r0, r3
 80059aa:	5ccb      	ldrb	r3, [r1, r3]
 80059ac:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059b0:	4603      	mov	r3, r0
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d1f5      	bne.n	80059a2 <_printf_i+0x17e>
 80059b6:	e7b7      	b.n	8005928 <_printf_i+0x104>
 80059b8:	6808      	ldr	r0, [r1, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	6949      	ldr	r1, [r1, #20]
 80059be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80059c2:	d004      	beq.n	80059ce <_printf_i+0x1aa>
 80059c4:	1d10      	adds	r0, r2, #4
 80059c6:	6018      	str	r0, [r3, #0]
 80059c8:	6813      	ldr	r3, [r2, #0]
 80059ca:	6019      	str	r1, [r3, #0]
 80059cc:	e007      	b.n	80059de <_printf_i+0x1ba>
 80059ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059d2:	f102 0004 	add.w	r0, r2, #4
 80059d6:	6018      	str	r0, [r3, #0]
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	d0f6      	beq.n	80059ca <_printf_i+0x1a6>
 80059dc:	8019      	strh	r1, [r3, #0]
 80059de:	2300      	movs	r3, #0
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	4675      	mov	r5, lr
 80059e4:	e7b1      	b.n	800594a <_printf_i+0x126>
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	1d11      	adds	r1, r2, #4
 80059ea:	6019      	str	r1, [r3, #0]
 80059ec:	6815      	ldr	r5, [r2, #0]
 80059ee:	6862      	ldr	r2, [r4, #4]
 80059f0:	2100      	movs	r1, #0
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7fa fbf4 	bl	80001e0 <memchr>
 80059f8:	b108      	cbz	r0, 80059fe <_printf_i+0x1da>
 80059fa:	1b40      	subs	r0, r0, r5
 80059fc:	6060      	str	r0, [r4, #4]
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	6123      	str	r3, [r4, #16]
 8005a02:	2300      	movs	r3, #0
 8005a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a08:	e79f      	b.n	800594a <_printf_i+0x126>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4630      	mov	r0, r6
 8005a12:	47c0      	blx	r8
 8005a14:	3001      	adds	r0, #1
 8005a16:	d0a2      	beq.n	800595e <_printf_i+0x13a>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	d507      	bpl.n	8005a2e <_printf_i+0x20a>
 8005a1e:	2500      	movs	r5, #0
 8005a20:	f104 0919 	add.w	r9, r4, #25
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	9a03      	ldr	r2, [sp, #12]
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	429d      	cmp	r5, r3
 8005a2c:	db05      	blt.n	8005a3a <_printf_i+0x216>
 8005a2e:	68e0      	ldr	r0, [r4, #12]
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	4298      	cmp	r0, r3
 8005a34:	bfb8      	it	lt
 8005a36:	4618      	movlt	r0, r3
 8005a38:	e793      	b.n	8005962 <_printf_i+0x13e>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	464a      	mov	r2, r9
 8005a3e:	4639      	mov	r1, r7
 8005a40:	4630      	mov	r0, r6
 8005a42:	47c0      	blx	r8
 8005a44:	3001      	adds	r0, #1
 8005a46:	d08a      	beq.n	800595e <_printf_i+0x13a>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	e7eb      	b.n	8005a24 <_printf_i+0x200>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1a7      	bne.n	80059a0 <_printf_i+0x17c>
 8005a50:	780b      	ldrb	r3, [r1, #0]
 8005a52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5a:	e765      	b.n	8005928 <_printf_i+0x104>
 8005a5c:	08008587 	.word	0x08008587
 8005a60:	08008576 	.word	0x08008576

08005a64 <iprintf>:
 8005a64:	b40f      	push	{r0, r1, r2, r3}
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <iprintf+0x2c>)
 8005a68:	b513      	push	{r0, r1, r4, lr}
 8005a6a:	681c      	ldr	r4, [r3, #0]
 8005a6c:	b124      	cbz	r4, 8005a78 <iprintf+0x14>
 8005a6e:	69a3      	ldr	r3, [r4, #24]
 8005a70:	b913      	cbnz	r3, 8005a78 <iprintf+0x14>
 8005a72:	4620      	mov	r0, r4
 8005a74:	f001 f880 	bl	8006b78 <__sinit>
 8005a78:	ab05      	add	r3, sp, #20
 8005a7a:	9a04      	ldr	r2, [sp, #16]
 8005a7c:	68a1      	ldr	r1, [r4, #8]
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	4620      	mov	r0, r4
 8005a82:	f001 fd3d 	bl	8007500 <_vfiprintf_r>
 8005a86:	b002      	add	sp, #8
 8005a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8c:	b004      	add	sp, #16
 8005a8e:	4770      	bx	lr
 8005a90:	2000000c 	.word	0x2000000c

08005a94 <_puts_r>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	460e      	mov	r6, r1
 8005a98:	4605      	mov	r5, r0
 8005a9a:	b118      	cbz	r0, 8005aa4 <_puts_r+0x10>
 8005a9c:	6983      	ldr	r3, [r0, #24]
 8005a9e:	b90b      	cbnz	r3, 8005aa4 <_puts_r+0x10>
 8005aa0:	f001 f86a 	bl	8006b78 <__sinit>
 8005aa4:	69ab      	ldr	r3, [r5, #24]
 8005aa6:	68ac      	ldr	r4, [r5, #8]
 8005aa8:	b913      	cbnz	r3, 8005ab0 <_puts_r+0x1c>
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f001 f864 	bl	8006b78 <__sinit>
 8005ab0:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <_puts_r+0xac>)
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	d117      	bne.n	8005ae6 <_puts_r+0x52>
 8005ab6:	686c      	ldr	r4, [r5, #4]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	071b      	lsls	r3, r3, #28
 8005abc:	d51d      	bpl.n	8005afa <_puts_r+0x66>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	b1db      	cbz	r3, 8005afa <_puts_r+0x66>
 8005ac2:	3e01      	subs	r6, #1
 8005ac4:	68a3      	ldr	r3, [r4, #8]
 8005ac6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005aca:	3b01      	subs	r3, #1
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	b9e9      	cbnz	r1, 8005b0c <_puts_r+0x78>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da2e      	bge.n	8005b32 <_puts_r+0x9e>
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	210a      	movs	r1, #10
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f000 f83f 	bl	8005b5c <__swbuf_r>
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d011      	beq.n	8005b06 <_puts_r+0x72>
 8005ae2:	200a      	movs	r0, #10
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
 8005ae6:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <_puts_r+0xb0>)
 8005ae8:	429c      	cmp	r4, r3
 8005aea:	d101      	bne.n	8005af0 <_puts_r+0x5c>
 8005aec:	68ac      	ldr	r4, [r5, #8]
 8005aee:	e7e3      	b.n	8005ab8 <_puts_r+0x24>
 8005af0:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <_puts_r+0xb4>)
 8005af2:	429c      	cmp	r4, r3
 8005af4:	bf08      	it	eq
 8005af6:	68ec      	ldreq	r4, [r5, #12]
 8005af8:	e7de      	b.n	8005ab8 <_puts_r+0x24>
 8005afa:	4621      	mov	r1, r4
 8005afc:	4628      	mov	r0, r5
 8005afe:	f000 f87f 	bl	8005c00 <__swsetup_r>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d0dd      	beq.n	8005ac2 <_puts_r+0x2e>
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da04      	bge.n	8005b1a <_puts_r+0x86>
 8005b10:	69a2      	ldr	r2, [r4, #24]
 8005b12:	4293      	cmp	r3, r2
 8005b14:	db06      	blt.n	8005b24 <_puts_r+0x90>
 8005b16:	290a      	cmp	r1, #10
 8005b18:	d004      	beq.n	8005b24 <_puts_r+0x90>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	7019      	strb	r1, [r3, #0]
 8005b22:	e7cf      	b.n	8005ac4 <_puts_r+0x30>
 8005b24:	4622      	mov	r2, r4
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 f818 	bl	8005b5c <__swbuf_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d1c9      	bne.n	8005ac4 <_puts_r+0x30>
 8005b30:	e7e9      	b.n	8005b06 <_puts_r+0x72>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	200a      	movs	r0, #10
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	6022      	str	r2, [r4, #0]
 8005b3a:	7018      	strb	r0, [r3, #0]
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	bf00      	nop
 8005b40:	080085c8 	.word	0x080085c8
 8005b44:	080085e8 	.word	0x080085e8
 8005b48:	080085a8 	.word	0x080085a8

08005b4c <puts>:
 8005b4c:	4b02      	ldr	r3, [pc, #8]	; (8005b58 <puts+0xc>)
 8005b4e:	4601      	mov	r1, r0
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	f7ff bf9f 	b.w	8005a94 <_puts_r>
 8005b56:	bf00      	nop
 8005b58:	2000000c 	.word	0x2000000c

08005b5c <__swbuf_r>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	460e      	mov	r6, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	4605      	mov	r5, r0
 8005b64:	b118      	cbz	r0, 8005b6e <__swbuf_r+0x12>
 8005b66:	6983      	ldr	r3, [r0, #24]
 8005b68:	b90b      	cbnz	r3, 8005b6e <__swbuf_r+0x12>
 8005b6a:	f001 f805 	bl	8006b78 <__sinit>
 8005b6e:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <__swbuf_r+0x98>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	d12a      	bne.n	8005bca <__swbuf_r+0x6e>
 8005b74:	686c      	ldr	r4, [r5, #4]
 8005b76:	69a3      	ldr	r3, [r4, #24]
 8005b78:	60a3      	str	r3, [r4, #8]
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	071a      	lsls	r2, r3, #28
 8005b7e:	d52e      	bpl.n	8005bde <__swbuf_r+0x82>
 8005b80:	6923      	ldr	r3, [r4, #16]
 8005b82:	b363      	cbz	r3, 8005bde <__swbuf_r+0x82>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	6820      	ldr	r0, [r4, #0]
 8005b88:	1ac0      	subs	r0, r0, r3
 8005b8a:	6963      	ldr	r3, [r4, #20]
 8005b8c:	b2f6      	uxtb	r6, r6
 8005b8e:	4298      	cmp	r0, r3
 8005b90:	4637      	mov	r7, r6
 8005b92:	db04      	blt.n	8005b9e <__swbuf_r+0x42>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 ff84 	bl	8006aa4 <_fflush_r>
 8005b9c:	bb28      	cbnz	r0, 8005bea <__swbuf_r+0x8e>
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	60a3      	str	r3, [r4, #8]
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	6022      	str	r2, [r4, #0]
 8005baa:	701e      	strb	r6, [r3, #0]
 8005bac:	6963      	ldr	r3, [r4, #20]
 8005bae:	3001      	adds	r0, #1
 8005bb0:	4298      	cmp	r0, r3
 8005bb2:	d004      	beq.n	8005bbe <__swbuf_r+0x62>
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	07db      	lsls	r3, r3, #31
 8005bb8:	d519      	bpl.n	8005bee <__swbuf_r+0x92>
 8005bba:	2e0a      	cmp	r6, #10
 8005bbc:	d117      	bne.n	8005bee <__swbuf_r+0x92>
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 ff6f 	bl	8006aa4 <_fflush_r>
 8005bc6:	b190      	cbz	r0, 8005bee <__swbuf_r+0x92>
 8005bc8:	e00f      	b.n	8005bea <__swbuf_r+0x8e>
 8005bca:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <__swbuf_r+0x9c>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d101      	bne.n	8005bd4 <__swbuf_r+0x78>
 8005bd0:	68ac      	ldr	r4, [r5, #8]
 8005bd2:	e7d0      	b.n	8005b76 <__swbuf_r+0x1a>
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <__swbuf_r+0xa0>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	bf08      	it	eq
 8005bda:	68ec      	ldreq	r4, [r5, #12]
 8005bdc:	e7cb      	b.n	8005b76 <__swbuf_r+0x1a>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 f80d 	bl	8005c00 <__swsetup_r>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0cc      	beq.n	8005b84 <__swbuf_r+0x28>
 8005bea:	f04f 37ff 	mov.w	r7, #4294967295
 8005bee:	4638      	mov	r0, r7
 8005bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	080085c8 	.word	0x080085c8
 8005bf8:	080085e8 	.word	0x080085e8
 8005bfc:	080085a8 	.word	0x080085a8

08005c00 <__swsetup_r>:
 8005c00:	4b32      	ldr	r3, [pc, #200]	; (8005ccc <__swsetup_r+0xcc>)
 8005c02:	b570      	push	{r4, r5, r6, lr}
 8005c04:	681d      	ldr	r5, [r3, #0]
 8005c06:	4606      	mov	r6, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	b125      	cbz	r5, 8005c16 <__swsetup_r+0x16>
 8005c0c:	69ab      	ldr	r3, [r5, #24]
 8005c0e:	b913      	cbnz	r3, 8005c16 <__swsetup_r+0x16>
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 ffb1 	bl	8006b78 <__sinit>
 8005c16:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <__swsetup_r+0xd0>)
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	d10f      	bne.n	8005c3c <__swsetup_r+0x3c>
 8005c1c:	686c      	ldr	r4, [r5, #4]
 8005c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	0715      	lsls	r5, r2, #28
 8005c26:	d42c      	bmi.n	8005c82 <__swsetup_r+0x82>
 8005c28:	06d0      	lsls	r0, r2, #27
 8005c2a:	d411      	bmi.n	8005c50 <__swsetup_r+0x50>
 8005c2c:	2209      	movs	r2, #9
 8005c2e:	6032      	str	r2, [r6, #0]
 8005c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	4b25      	ldr	r3, [pc, #148]	; (8005cd4 <__swsetup_r+0xd4>)
 8005c3e:	429c      	cmp	r4, r3
 8005c40:	d101      	bne.n	8005c46 <__swsetup_r+0x46>
 8005c42:	68ac      	ldr	r4, [r5, #8]
 8005c44:	e7eb      	b.n	8005c1e <__swsetup_r+0x1e>
 8005c46:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <__swsetup_r+0xd8>)
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	bf08      	it	eq
 8005c4c:	68ec      	ldreq	r4, [r5, #12]
 8005c4e:	e7e6      	b.n	8005c1e <__swsetup_r+0x1e>
 8005c50:	0751      	lsls	r1, r2, #29
 8005c52:	d512      	bpl.n	8005c7a <__swsetup_r+0x7a>
 8005c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c56:	b141      	cbz	r1, 8005c6a <__swsetup_r+0x6a>
 8005c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	d002      	beq.n	8005c66 <__swsetup_r+0x66>
 8005c60:	4630      	mov	r0, r6
 8005c62:	f001 fb77 	bl	8007354 <_free_r>
 8005c66:	2300      	movs	r3, #0
 8005c68:	6363      	str	r3, [r4, #52]	; 0x34
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	f043 0308 	orr.w	r3, r3, #8
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	b94b      	cbnz	r3, 8005c9a <__swsetup_r+0x9a>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c90:	d003      	beq.n	8005c9a <__swsetup_r+0x9a>
 8005c92:	4621      	mov	r1, r4
 8005c94:	4630      	mov	r0, r6
 8005c96:	f001 f82b 	bl	8006cf0 <__smakebuf_r>
 8005c9a:	89a2      	ldrh	r2, [r4, #12]
 8005c9c:	f012 0301 	ands.w	r3, r2, #1
 8005ca0:	d00c      	beq.n	8005cbc <__swsetup_r+0xbc>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	6963      	ldr	r3, [r4, #20]
 8005ca8:	425b      	negs	r3, r3
 8005caa:	61a3      	str	r3, [r4, #24]
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	b953      	cbnz	r3, 8005cc6 <__swsetup_r+0xc6>
 8005cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005cb8:	d1ba      	bne.n	8005c30 <__swsetup_r+0x30>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	0792      	lsls	r2, r2, #30
 8005cbe:	bf58      	it	pl
 8005cc0:	6963      	ldrpl	r3, [r4, #20]
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	e7f2      	b.n	8005cac <__swsetup_r+0xac>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	e7f7      	b.n	8005cba <__swsetup_r+0xba>
 8005cca:	bf00      	nop
 8005ccc:	2000000c 	.word	0x2000000c
 8005cd0:	080085c8 	.word	0x080085c8
 8005cd4:	080085e8 	.word	0x080085e8
 8005cd8:	080085a8 	.word	0x080085a8

08005cdc <quorem>:
 8005cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	6903      	ldr	r3, [r0, #16]
 8005ce2:	690c      	ldr	r4, [r1, #16]
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	4680      	mov	r8, r0
 8005ce8:	f300 8082 	bgt.w	8005df0 <quorem+0x114>
 8005cec:	3c01      	subs	r4, #1
 8005cee:	f101 0714 	add.w	r7, r1, #20
 8005cf2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005cf6:	f100 0614 	add.w	r6, r0, #20
 8005cfa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005cfe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d02:	eb06 030e 	add.w	r3, r6, lr
 8005d06:	3501      	adds	r5, #1
 8005d08:	eb07 090e 	add.w	r9, r7, lr
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d12:	b395      	cbz	r5, 8005d7a <quorem+0x9e>
 8005d14:	f04f 0a00 	mov.w	sl, #0
 8005d18:	4638      	mov	r0, r7
 8005d1a:	46b4      	mov	ip, r6
 8005d1c:	46d3      	mov	fp, sl
 8005d1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d22:	b293      	uxth	r3, r2
 8005d24:	fb05 a303 	mla	r3, r5, r3, sl
 8005d28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ebab 0303 	sub.w	r3, fp, r3
 8005d32:	0c12      	lsrs	r2, r2, #16
 8005d34:	f8bc b000 	ldrh.w	fp, [ip]
 8005d38:	fb05 a202 	mla	r2, r5, r2, sl
 8005d3c:	fa13 f38b 	uxtah	r3, r3, fp
 8005d40:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005d44:	fa1f fb82 	uxth.w	fp, r2
 8005d48:	f8dc 2000 	ldr.w	r2, [ip]
 8005d4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005d50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d5a:	4581      	cmp	r9, r0
 8005d5c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005d60:	f84c 3b04 	str.w	r3, [ip], #4
 8005d64:	d2db      	bcs.n	8005d1e <quorem+0x42>
 8005d66:	f856 300e 	ldr.w	r3, [r6, lr]
 8005d6a:	b933      	cbnz	r3, 8005d7a <quorem+0x9e>
 8005d6c:	9b01      	ldr	r3, [sp, #4]
 8005d6e:	3b04      	subs	r3, #4
 8005d70:	429e      	cmp	r6, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	d330      	bcc.n	8005dd8 <quorem+0xfc>
 8005d76:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	f001 fa15 	bl	80071aa <__mcmp>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	db25      	blt.n	8005dd0 <quorem+0xf4>
 8005d84:	3501      	adds	r5, #1
 8005d86:	4630      	mov	r0, r6
 8005d88:	f04f 0e00 	mov.w	lr, #0
 8005d8c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005d90:	f8d0 c000 	ldr.w	ip, [r0]
 8005d94:	b293      	uxth	r3, r2
 8005d96:	ebae 0303 	sub.w	r3, lr, r3
 8005d9a:	0c12      	lsrs	r2, r2, #16
 8005d9c:	fa13 f38c 	uxtah	r3, r3, ip
 8005da0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dae:	45b9      	cmp	r9, r7
 8005db0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005db4:	f840 3b04 	str.w	r3, [r0], #4
 8005db8:	d2e8      	bcs.n	8005d8c <quorem+0xb0>
 8005dba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005dbe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005dc2:	b92a      	cbnz	r2, 8005dd0 <quorem+0xf4>
 8005dc4:	3b04      	subs	r3, #4
 8005dc6:	429e      	cmp	r6, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	d30b      	bcc.n	8005de4 <quorem+0x108>
 8005dcc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	b003      	add	sp, #12
 8005dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d1ca      	bne.n	8005d76 <quorem+0x9a>
 8005de0:	3c01      	subs	r4, #1
 8005de2:	e7c5      	b.n	8005d70 <quorem+0x94>
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	3b04      	subs	r3, #4
 8005de8:	2a00      	cmp	r2, #0
 8005dea:	d1ef      	bne.n	8005dcc <quorem+0xf0>
 8005dec:	3c01      	subs	r4, #1
 8005dee:	e7ea      	b.n	8005dc6 <quorem+0xea>
 8005df0:	2000      	movs	r0, #0
 8005df2:	e7ee      	b.n	8005dd2 <quorem+0xf6>
 8005df4:	0000      	movs	r0, r0
	...

08005df8 <_dtoa_r>:
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	ec57 6b10 	vmov	r6, r7, d0
 8005e00:	b097      	sub	sp, #92	; 0x5c
 8005e02:	e9cd 6700 	strd	r6, r7, [sp]
 8005e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e08:	9107      	str	r1, [sp, #28]
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e10:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005e12:	b93e      	cbnz	r6, 8005e24 <_dtoa_r+0x2c>
 8005e14:	2010      	movs	r0, #16
 8005e16:	f000 ffab 	bl	8006d70 <malloc>
 8005e1a:	6260      	str	r0, [r4, #36]	; 0x24
 8005e1c:	6046      	str	r6, [r0, #4]
 8005e1e:	6086      	str	r6, [r0, #8]
 8005e20:	6006      	str	r6, [r0, #0]
 8005e22:	60c6      	str	r6, [r0, #12]
 8005e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e26:	6819      	ldr	r1, [r3, #0]
 8005e28:	b151      	cbz	r1, 8005e40 <_dtoa_r+0x48>
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	604a      	str	r2, [r1, #4]
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4093      	lsls	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 ffe2 	bl	8006dfe <_Bfree>
 8005e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bfbf      	itttt	lt
 8005e46:	2301      	movlt	r3, #1
 8005e48:	602b      	strlt	r3, [r5, #0]
 8005e4a:	9b01      	ldrlt	r3, [sp, #4]
 8005e4c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e50:	bfb2      	itee	lt
 8005e52:	9301      	strlt	r3, [sp, #4]
 8005e54:	2300      	movge	r3, #0
 8005e56:	602b      	strge	r3, [r5, #0]
 8005e58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e5c:	4ba8      	ldr	r3, [pc, #672]	; (8006100 <_dtoa_r+0x308>)
 8005e5e:	ea33 0308 	bics.w	r3, r3, r8
 8005e62:	d11b      	bne.n	8005e9c <_dtoa_r+0xa4>
 8005e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e66:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	9b00      	ldr	r3, [sp, #0]
 8005e6e:	b923      	cbnz	r3, 8005e7a <_dtoa_r+0x82>
 8005e70:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f000 8578 	beq.w	800696a <_dtoa_r+0xb72>
 8005e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e7c:	b953      	cbnz	r3, 8005e94 <_dtoa_r+0x9c>
 8005e7e:	4ba1      	ldr	r3, [pc, #644]	; (8006104 <_dtoa_r+0x30c>)
 8005e80:	e021      	b.n	8005ec6 <_dtoa_r+0xce>
 8005e82:	4ba1      	ldr	r3, [pc, #644]	; (8006108 <_dtoa_r+0x310>)
 8005e84:	9302      	str	r3, [sp, #8]
 8005e86:	3308      	adds	r3, #8
 8005e88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	9802      	ldr	r0, [sp, #8]
 8005e8e:	b017      	add	sp, #92	; 0x5c
 8005e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	4b9b      	ldr	r3, [pc, #620]	; (8006104 <_dtoa_r+0x30c>)
 8005e96:	9302      	str	r3, [sp, #8]
 8005e98:	3303      	adds	r3, #3
 8005e9a:	e7f5      	b.n	8005e88 <_dtoa_r+0x90>
 8005e9c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	f7fa fe0a 	bl	8000ac0 <__aeabi_dcmpeq>
 8005eac:	4681      	mov	r9, r0
 8005eae:	b160      	cbz	r0, 8005eca <_dtoa_r+0xd2>
 8005eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8553 	beq.w	8006964 <_dtoa_r+0xb6c>
 8005ebe:	4b93      	ldr	r3, [pc, #588]	; (800610c <_dtoa_r+0x314>)
 8005ec0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	e7e0      	b.n	8005e8c <_dtoa_r+0x94>
 8005eca:	aa14      	add	r2, sp, #80	; 0x50
 8005ecc:	a915      	add	r1, sp, #84	; 0x54
 8005ece:	ec47 6b10 	vmov	d0, r6, r7
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f001 f9e1 	bl	800729a <__d2b>
 8005ed8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005edc:	4682      	mov	sl, r0
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	d07e      	beq.n	8005fe0 <_dtoa_r+0x1e8>
 8005ee2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ee6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005eea:	4630      	mov	r0, r6
 8005eec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005ef0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ef4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4b85      	ldr	r3, [pc, #532]	; (8006110 <_dtoa_r+0x318>)
 8005efc:	f7fa f9c4 	bl	8000288 <__aeabi_dsub>
 8005f00:	a379      	add	r3, pc, #484	; (adr r3, 80060e8 <_dtoa_r+0x2f0>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa fb73 	bl	80005f0 <__aeabi_dmul>
 8005f0a:	a379      	add	r3, pc, #484	; (adr r3, 80060f0 <_dtoa_r+0x2f8>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f7fa f9bc 	bl	800028c <__adddf3>
 8005f14:	4606      	mov	r6, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	460f      	mov	r7, r1
 8005f1a:	f7fa fb03 	bl	8000524 <__aeabi_i2d>
 8005f1e:	a376      	add	r3, pc, #472	; (adr r3, 80060f8 <_dtoa_r+0x300>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa fb64 	bl	80005f0 <__aeabi_dmul>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	4639      	mov	r1, r7
 8005f30:	f7fa f9ac 	bl	800028c <__adddf3>
 8005f34:	4606      	mov	r6, r0
 8005f36:	460f      	mov	r7, r1
 8005f38:	f7fa fe0a 	bl	8000b50 <__aeabi_d2iz>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4683      	mov	fp, r0
 8005f40:	2300      	movs	r3, #0
 8005f42:	4630      	mov	r0, r6
 8005f44:	4639      	mov	r1, r7
 8005f46:	f7fa fdc5 	bl	8000ad4 <__aeabi_dcmplt>
 8005f4a:	b158      	cbz	r0, 8005f64 <_dtoa_r+0x16c>
 8005f4c:	4658      	mov	r0, fp
 8005f4e:	f7fa fae9 	bl	8000524 <__aeabi_i2d>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	f7fa fdb1 	bl	8000ac0 <__aeabi_dcmpeq>
 8005f5e:	b908      	cbnz	r0, 8005f64 <_dtoa_r+0x16c>
 8005f60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f64:	f1bb 0f16 	cmp.w	fp, #22
 8005f68:	d859      	bhi.n	800601e <_dtoa_r+0x226>
 8005f6a:	496a      	ldr	r1, [pc, #424]	; (8006114 <_dtoa_r+0x31c>)
 8005f6c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f78:	f7fa fdca 	bl	8000b10 <__aeabi_dcmpgt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d050      	beq.n	8006022 <_dtoa_r+0x22a>
 8005f80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f84:	2300      	movs	r3, #0
 8005f86:	930e      	str	r3, [sp, #56]	; 0x38
 8005f88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f8a:	1b5d      	subs	r5, r3, r5
 8005f8c:	1e6b      	subs	r3, r5, #1
 8005f8e:	9306      	str	r3, [sp, #24]
 8005f90:	bf45      	ittet	mi
 8005f92:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f96:	9305      	strmi	r3, [sp, #20]
 8005f98:	2300      	movpl	r3, #0
 8005f9a:	2300      	movmi	r3, #0
 8005f9c:	bf4c      	ite	mi
 8005f9e:	9306      	strmi	r3, [sp, #24]
 8005fa0:	9305      	strpl	r3, [sp, #20]
 8005fa2:	f1bb 0f00 	cmp.w	fp, #0
 8005fa6:	db3e      	blt.n	8006026 <_dtoa_r+0x22e>
 8005fa8:	9b06      	ldr	r3, [sp, #24]
 8005faa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005fae:	445b      	add	r3, fp
 8005fb0:	9306      	str	r3, [sp, #24]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9308      	str	r3, [sp, #32]
 8005fb6:	9b07      	ldr	r3, [sp, #28]
 8005fb8:	2b09      	cmp	r3, #9
 8005fba:	f200 80af 	bhi.w	800611c <_dtoa_r+0x324>
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	bfc4      	itt	gt
 8005fc2:	3b04      	subgt	r3, #4
 8005fc4:	9307      	strgt	r3, [sp, #28]
 8005fc6:	9b07      	ldr	r3, [sp, #28]
 8005fc8:	f1a3 0302 	sub.w	r3, r3, #2
 8005fcc:	bfcc      	ite	gt
 8005fce:	2600      	movgt	r6, #0
 8005fd0:	2601      	movle	r6, #1
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	f200 80ae 	bhi.w	8006134 <_dtoa_r+0x33c>
 8005fd8:	e8df f003 	tbb	[pc, r3]
 8005fdc:	772f8482 	.word	0x772f8482
 8005fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fe2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005fe4:	441d      	add	r5, r3
 8005fe6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	dd11      	ble.n	8006012 <_dtoa_r+0x21a>
 8005fee:	9a00      	ldr	r2, [sp, #0]
 8005ff0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005ff4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005ff8:	fa22 f000 	lsr.w	r0, r2, r0
 8005ffc:	fa08 f303 	lsl.w	r3, r8, r3
 8006000:	4318      	orrs	r0, r3
 8006002:	f7fa fa7f 	bl	8000504 <__aeabi_ui2d>
 8006006:	2301      	movs	r3, #1
 8006008:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800600c:	3d01      	subs	r5, #1
 800600e:	9312      	str	r3, [sp, #72]	; 0x48
 8006010:	e772      	b.n	8005ef8 <_dtoa_r+0x100>
 8006012:	f1c3 0020 	rsb	r0, r3, #32
 8006016:	9b00      	ldr	r3, [sp, #0]
 8006018:	fa03 f000 	lsl.w	r0, r3, r0
 800601c:	e7f1      	b.n	8006002 <_dtoa_r+0x20a>
 800601e:	2301      	movs	r3, #1
 8006020:	e7b1      	b.n	8005f86 <_dtoa_r+0x18e>
 8006022:	900e      	str	r0, [sp, #56]	; 0x38
 8006024:	e7b0      	b.n	8005f88 <_dtoa_r+0x190>
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	eba3 030b 	sub.w	r3, r3, fp
 800602c:	9305      	str	r3, [sp, #20]
 800602e:	f1cb 0300 	rsb	r3, fp, #0
 8006032:	9308      	str	r3, [sp, #32]
 8006034:	2300      	movs	r3, #0
 8006036:	930b      	str	r3, [sp, #44]	; 0x2c
 8006038:	e7bd      	b.n	8005fb6 <_dtoa_r+0x1be>
 800603a:	2301      	movs	r3, #1
 800603c:	9309      	str	r3, [sp, #36]	; 0x24
 800603e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	dd7a      	ble.n	800613a <_dtoa_r+0x342>
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	9303      	str	r3, [sp, #12]
 8006048:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800604a:	2200      	movs	r2, #0
 800604c:	606a      	str	r2, [r5, #4]
 800604e:	2104      	movs	r1, #4
 8006050:	f101 0214 	add.w	r2, r1, #20
 8006054:	429a      	cmp	r2, r3
 8006056:	d975      	bls.n	8006144 <_dtoa_r+0x34c>
 8006058:	6869      	ldr	r1, [r5, #4]
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fe9b 	bl	8006d96 <_Balloc>
 8006060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006062:	6028      	str	r0, [r5, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9302      	str	r3, [sp, #8]
 8006068:	9b03      	ldr	r3, [sp, #12]
 800606a:	2b0e      	cmp	r3, #14
 800606c:	f200 80e5 	bhi.w	800623a <_dtoa_r+0x442>
 8006070:	2e00      	cmp	r6, #0
 8006072:	f000 80e2 	beq.w	800623a <_dtoa_r+0x442>
 8006076:	ed9d 7b00 	vldr	d7, [sp]
 800607a:	f1bb 0f00 	cmp.w	fp, #0
 800607e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006082:	dd74      	ble.n	800616e <_dtoa_r+0x376>
 8006084:	4a23      	ldr	r2, [pc, #140]	; (8006114 <_dtoa_r+0x31c>)
 8006086:	f00b 030f 	and.w	r3, fp, #15
 800608a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800608e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006092:	06f0      	lsls	r0, r6, #27
 8006094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006098:	d559      	bpl.n	800614e <_dtoa_r+0x356>
 800609a:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <_dtoa_r+0x320>)
 800609c:	ec51 0b17 	vmov	r0, r1, d7
 80060a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060a4:	f7fa fbce 	bl	8000844 <__aeabi_ddiv>
 80060a8:	e9cd 0100 	strd	r0, r1, [sp]
 80060ac:	f006 060f 	and.w	r6, r6, #15
 80060b0:	2503      	movs	r5, #3
 80060b2:	4f19      	ldr	r7, [pc, #100]	; (8006118 <_dtoa_r+0x320>)
 80060b4:	2e00      	cmp	r6, #0
 80060b6:	d14c      	bne.n	8006152 <_dtoa_r+0x35a>
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060c0:	f7fa fbc0 	bl	8000844 <__aeabi_ddiv>
 80060c4:	e9cd 0100 	strd	r0, r1, [sp]
 80060c8:	e06a      	b.n	80061a0 <_dtoa_r+0x3a8>
 80060ca:	2301      	movs	r3, #1
 80060cc:	9309      	str	r3, [sp, #36]	; 0x24
 80060ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d0:	445b      	add	r3, fp
 80060d2:	9304      	str	r3, [sp, #16]
 80060d4:	3301      	adds	r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	bfb8      	it	lt
 80060dc:	2301      	movlt	r3, #1
 80060de:	e7b3      	b.n	8006048 <_dtoa_r+0x250>
 80060e0:	2300      	movs	r3, #0
 80060e2:	e7ab      	b.n	800603c <_dtoa_r+0x244>
 80060e4:	2300      	movs	r3, #0
 80060e6:	e7f1      	b.n	80060cc <_dtoa_r+0x2d4>
 80060e8:	636f4361 	.word	0x636f4361
 80060ec:	3fd287a7 	.word	0x3fd287a7
 80060f0:	8b60c8b3 	.word	0x8b60c8b3
 80060f4:	3fc68a28 	.word	0x3fc68a28
 80060f8:	509f79fb 	.word	0x509f79fb
 80060fc:	3fd34413 	.word	0x3fd34413
 8006100:	7ff00000 	.word	0x7ff00000
 8006104:	080085a1 	.word	0x080085a1
 8006108:	08008598 	.word	0x08008598
 800610c:	08008575 	.word	0x08008575
 8006110:	3ff80000 	.word	0x3ff80000
 8006114:	08008630 	.word	0x08008630
 8006118:	08008608 	.word	0x08008608
 800611c:	2601      	movs	r6, #1
 800611e:	2300      	movs	r3, #0
 8006120:	9307      	str	r3, [sp, #28]
 8006122:	9609      	str	r6, [sp, #36]	; 0x24
 8006124:	f04f 33ff 	mov.w	r3, #4294967295
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	9303      	str	r3, [sp, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	2312      	movs	r3, #18
 8006130:	920a      	str	r2, [sp, #40]	; 0x28
 8006132:	e789      	b.n	8006048 <_dtoa_r+0x250>
 8006134:	2301      	movs	r3, #1
 8006136:	9309      	str	r3, [sp, #36]	; 0x24
 8006138:	e7f4      	b.n	8006124 <_dtoa_r+0x32c>
 800613a:	2301      	movs	r3, #1
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	9303      	str	r3, [sp, #12]
 8006140:	461a      	mov	r2, r3
 8006142:	e7f5      	b.n	8006130 <_dtoa_r+0x338>
 8006144:	686a      	ldr	r2, [r5, #4]
 8006146:	3201      	adds	r2, #1
 8006148:	606a      	str	r2, [r5, #4]
 800614a:	0049      	lsls	r1, r1, #1
 800614c:	e780      	b.n	8006050 <_dtoa_r+0x258>
 800614e:	2502      	movs	r5, #2
 8006150:	e7af      	b.n	80060b2 <_dtoa_r+0x2ba>
 8006152:	07f1      	lsls	r1, r6, #31
 8006154:	d508      	bpl.n	8006168 <_dtoa_r+0x370>
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	f7fa fa47 	bl	80005f0 <__aeabi_dmul>
 8006162:	3501      	adds	r5, #1
 8006164:	4680      	mov	r8, r0
 8006166:	4689      	mov	r9, r1
 8006168:	1076      	asrs	r6, r6, #1
 800616a:	3708      	adds	r7, #8
 800616c:	e7a2      	b.n	80060b4 <_dtoa_r+0x2bc>
 800616e:	f000 809d 	beq.w	80062ac <_dtoa_r+0x4b4>
 8006172:	f1cb 0600 	rsb	r6, fp, #0
 8006176:	4b9f      	ldr	r3, [pc, #636]	; (80063f4 <_dtoa_r+0x5fc>)
 8006178:	4f9f      	ldr	r7, [pc, #636]	; (80063f8 <_dtoa_r+0x600>)
 800617a:	f006 020f 	and.w	r2, r6, #15
 800617e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800618a:	f7fa fa31 	bl	80005f0 <__aeabi_dmul>
 800618e:	e9cd 0100 	strd	r0, r1, [sp]
 8006192:	1136      	asrs	r6, r6, #4
 8006194:	2300      	movs	r3, #0
 8006196:	2502      	movs	r5, #2
 8006198:	2e00      	cmp	r6, #0
 800619a:	d17c      	bne.n	8006296 <_dtoa_r+0x49e>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d191      	bne.n	80060c4 <_dtoa_r+0x2cc>
 80061a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8084 	beq.w	80062b0 <_dtoa_r+0x4b8>
 80061a8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80061ac:	2200      	movs	r2, #0
 80061ae:	4b93      	ldr	r3, [pc, #588]	; (80063fc <_dtoa_r+0x604>)
 80061b0:	4640      	mov	r0, r8
 80061b2:	4649      	mov	r1, r9
 80061b4:	f7fa fc8e 	bl	8000ad4 <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d079      	beq.n	80062b0 <_dtoa_r+0x4b8>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d076      	beq.n	80062b0 <_dtoa_r+0x4b8>
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd34      	ble.n	8006232 <_dtoa_r+0x43a>
 80061c8:	2200      	movs	r2, #0
 80061ca:	4b8d      	ldr	r3, [pc, #564]	; (8006400 <_dtoa_r+0x608>)
 80061cc:	4640      	mov	r0, r8
 80061ce:	4649      	mov	r1, r9
 80061d0:	f7fa fa0e 	bl	80005f0 <__aeabi_dmul>
 80061d4:	e9cd 0100 	strd	r0, r1, [sp]
 80061d8:	9e04      	ldr	r6, [sp, #16]
 80061da:	f10b 37ff 	add.w	r7, fp, #4294967295
 80061de:	3501      	adds	r5, #1
 80061e0:	4628      	mov	r0, r5
 80061e2:	f7fa f99f 	bl	8000524 <__aeabi_i2d>
 80061e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061ea:	f7fa fa01 	bl	80005f0 <__aeabi_dmul>
 80061ee:	2200      	movs	r2, #0
 80061f0:	4b84      	ldr	r3, [pc, #528]	; (8006404 <_dtoa_r+0x60c>)
 80061f2:	f7fa f84b 	bl	800028c <__adddf3>
 80061f6:	4680      	mov	r8, r0
 80061f8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	d15a      	bne.n	80062b6 <_dtoa_r+0x4be>
 8006200:	2200      	movs	r2, #0
 8006202:	4b81      	ldr	r3, [pc, #516]	; (8006408 <_dtoa_r+0x610>)
 8006204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006208:	f7fa f83e 	bl	8000288 <__aeabi_dsub>
 800620c:	4642      	mov	r2, r8
 800620e:	464b      	mov	r3, r9
 8006210:	e9cd 0100 	strd	r0, r1, [sp]
 8006214:	f7fa fc7c 	bl	8000b10 <__aeabi_dcmpgt>
 8006218:	2800      	cmp	r0, #0
 800621a:	f040 829b 	bne.w	8006754 <_dtoa_r+0x95c>
 800621e:	4642      	mov	r2, r8
 8006220:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006228:	f7fa fc54 	bl	8000ad4 <__aeabi_dcmplt>
 800622c:	2800      	cmp	r0, #0
 800622e:	f040 828f 	bne.w	8006750 <_dtoa_r+0x958>
 8006232:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006236:	e9cd 2300 	strd	r2, r3, [sp]
 800623a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800623c:	2b00      	cmp	r3, #0
 800623e:	f2c0 8150 	blt.w	80064e2 <_dtoa_r+0x6ea>
 8006242:	f1bb 0f0e 	cmp.w	fp, #14
 8006246:	f300 814c 	bgt.w	80064e2 <_dtoa_r+0x6ea>
 800624a:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <_dtoa_r+0x5fc>)
 800624c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006250:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006256:	2b00      	cmp	r3, #0
 8006258:	f280 80da 	bge.w	8006410 <_dtoa_r+0x618>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f300 80d6 	bgt.w	8006410 <_dtoa_r+0x618>
 8006264:	f040 8273 	bne.w	800674e <_dtoa_r+0x956>
 8006268:	2200      	movs	r2, #0
 800626a:	4b67      	ldr	r3, [pc, #412]	; (8006408 <_dtoa_r+0x610>)
 800626c:	4640      	mov	r0, r8
 800626e:	4649      	mov	r1, r9
 8006270:	f7fa f9be 	bl	80005f0 <__aeabi_dmul>
 8006274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006278:	f7fa fc40 	bl	8000afc <__aeabi_dcmpge>
 800627c:	9e03      	ldr	r6, [sp, #12]
 800627e:	4637      	mov	r7, r6
 8006280:	2800      	cmp	r0, #0
 8006282:	f040 824a 	bne.w	800671a <_dtoa_r+0x922>
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	9a02      	ldr	r2, [sp, #8]
 800628a:	1c5d      	adds	r5, r3, #1
 800628c:	2331      	movs	r3, #49	; 0x31
 800628e:	7013      	strb	r3, [r2, #0]
 8006290:	f10b 0b01 	add.w	fp, fp, #1
 8006294:	e245      	b.n	8006722 <_dtoa_r+0x92a>
 8006296:	07f2      	lsls	r2, r6, #31
 8006298:	d505      	bpl.n	80062a6 <_dtoa_r+0x4ae>
 800629a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629e:	f7fa f9a7 	bl	80005f0 <__aeabi_dmul>
 80062a2:	3501      	adds	r5, #1
 80062a4:	2301      	movs	r3, #1
 80062a6:	1076      	asrs	r6, r6, #1
 80062a8:	3708      	adds	r7, #8
 80062aa:	e775      	b.n	8006198 <_dtoa_r+0x3a0>
 80062ac:	2502      	movs	r5, #2
 80062ae:	e777      	b.n	80061a0 <_dtoa_r+0x3a8>
 80062b0:	465f      	mov	r7, fp
 80062b2:	9e03      	ldr	r6, [sp, #12]
 80062b4:	e794      	b.n	80061e0 <_dtoa_r+0x3e8>
 80062b6:	9a02      	ldr	r2, [sp, #8]
 80062b8:	4b4e      	ldr	r3, [pc, #312]	; (80063f4 <_dtoa_r+0x5fc>)
 80062ba:	4432      	add	r2, r6
 80062bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80062be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c0:	1e71      	subs	r1, r6, #1
 80062c2:	2a00      	cmp	r2, #0
 80062c4:	d048      	beq.n	8006358 <_dtoa_r+0x560>
 80062c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	2000      	movs	r0, #0
 80062d0:	494e      	ldr	r1, [pc, #312]	; (800640c <_dtoa_r+0x614>)
 80062d2:	f7fa fab7 	bl	8000844 <__aeabi_ddiv>
 80062d6:	4642      	mov	r2, r8
 80062d8:	464b      	mov	r3, r9
 80062da:	f7f9 ffd5 	bl	8000288 <__aeabi_dsub>
 80062de:	9d02      	ldr	r5, [sp, #8]
 80062e0:	4680      	mov	r8, r0
 80062e2:	4689      	mov	r9, r1
 80062e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062e8:	f7fa fc32 	bl	8000b50 <__aeabi_d2iz>
 80062ec:	4606      	mov	r6, r0
 80062ee:	f7fa f919 	bl	8000524 <__aeabi_i2d>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062fa:	f7f9 ffc5 	bl	8000288 <__aeabi_dsub>
 80062fe:	3630      	adds	r6, #48	; 0x30
 8006300:	f805 6b01 	strb.w	r6, [r5], #1
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	e9cd 0100 	strd	r0, r1, [sp]
 800630c:	f7fa fbe2 	bl	8000ad4 <__aeabi_dcmplt>
 8006310:	2800      	cmp	r0, #0
 8006312:	d165      	bne.n	80063e0 <_dtoa_r+0x5e8>
 8006314:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006318:	2000      	movs	r0, #0
 800631a:	4938      	ldr	r1, [pc, #224]	; (80063fc <_dtoa_r+0x604>)
 800631c:	f7f9 ffb4 	bl	8000288 <__aeabi_dsub>
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	f7fa fbd6 	bl	8000ad4 <__aeabi_dcmplt>
 8006328:	2800      	cmp	r0, #0
 800632a:	f040 80ba 	bne.w	80064a2 <_dtoa_r+0x6aa>
 800632e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006330:	429d      	cmp	r5, r3
 8006332:	f43f af7e 	beq.w	8006232 <_dtoa_r+0x43a>
 8006336:	2200      	movs	r2, #0
 8006338:	4b31      	ldr	r3, [pc, #196]	; (8006400 <_dtoa_r+0x608>)
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa f957 	bl	80005f0 <__aeabi_dmul>
 8006342:	2200      	movs	r2, #0
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	4b2d      	ldr	r3, [pc, #180]	; (8006400 <_dtoa_r+0x608>)
 800634a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800634e:	f7fa f94f 	bl	80005f0 <__aeabi_dmul>
 8006352:	e9cd 0100 	strd	r0, r1, [sp]
 8006356:	e7c5      	b.n	80062e4 <_dtoa_r+0x4ec>
 8006358:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800635c:	4642      	mov	r2, r8
 800635e:	464b      	mov	r3, r9
 8006360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006364:	f7fa f944 	bl	80005f0 <__aeabi_dmul>
 8006368:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800636c:	9d02      	ldr	r5, [sp, #8]
 800636e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006372:	f7fa fbed 	bl	8000b50 <__aeabi_d2iz>
 8006376:	4606      	mov	r6, r0
 8006378:	f7fa f8d4 	bl	8000524 <__aeabi_i2d>
 800637c:	3630      	adds	r6, #48	; 0x30
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006386:	f7f9 ff7f 	bl	8000288 <__aeabi_dsub>
 800638a:	f805 6b01 	strb.w	r6, [r5], #1
 800638e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006390:	42ab      	cmp	r3, r5
 8006392:	4680      	mov	r8, r0
 8006394:	4689      	mov	r9, r1
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	d125      	bne.n	80063e8 <_dtoa_r+0x5f0>
 800639c:	4b1b      	ldr	r3, [pc, #108]	; (800640c <_dtoa_r+0x614>)
 800639e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063a2:	f7f9 ff73 	bl	800028c <__adddf3>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7fa fbaf 	bl	8000b10 <__aeabi_dcmpgt>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d175      	bne.n	80064a2 <_dtoa_r+0x6aa>
 80063b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063ba:	2000      	movs	r0, #0
 80063bc:	4913      	ldr	r1, [pc, #76]	; (800640c <_dtoa_r+0x614>)
 80063be:	f7f9 ff63 	bl	8000288 <__aeabi_dsub>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4640      	mov	r0, r8
 80063c8:	4649      	mov	r1, r9
 80063ca:	f7fa fb83 	bl	8000ad4 <__aeabi_dcmplt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f43f af2f 	beq.w	8006232 <_dtoa_r+0x43a>
 80063d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	f105 32ff 	add.w	r2, r5, #4294967295
 80063de:	d001      	beq.n	80063e4 <_dtoa_r+0x5ec>
 80063e0:	46bb      	mov	fp, r7
 80063e2:	e04d      	b.n	8006480 <_dtoa_r+0x688>
 80063e4:	4615      	mov	r5, r2
 80063e6:	e7f5      	b.n	80063d4 <_dtoa_r+0x5dc>
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <_dtoa_r+0x608>)
 80063ea:	f7fa f901 	bl	80005f0 <__aeabi_dmul>
 80063ee:	e9cd 0100 	strd	r0, r1, [sp]
 80063f2:	e7bc      	b.n	800636e <_dtoa_r+0x576>
 80063f4:	08008630 	.word	0x08008630
 80063f8:	08008608 	.word	0x08008608
 80063fc:	3ff00000 	.word	0x3ff00000
 8006400:	40240000 	.word	0x40240000
 8006404:	401c0000 	.word	0x401c0000
 8006408:	40140000 	.word	0x40140000
 800640c:	3fe00000 	.word	0x3fe00000
 8006410:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006414:	9d02      	ldr	r5, [sp, #8]
 8006416:	4642      	mov	r2, r8
 8006418:	464b      	mov	r3, r9
 800641a:	4630      	mov	r0, r6
 800641c:	4639      	mov	r1, r7
 800641e:	f7fa fa11 	bl	8000844 <__aeabi_ddiv>
 8006422:	f7fa fb95 	bl	8000b50 <__aeabi_d2iz>
 8006426:	9000      	str	r0, [sp, #0]
 8006428:	f7fa f87c 	bl	8000524 <__aeabi_i2d>
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	f7fa f8de 	bl	80005f0 <__aeabi_dmul>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7f9 ff24 	bl	8000288 <__aeabi_dsub>
 8006440:	9e00      	ldr	r6, [sp, #0]
 8006442:	9f03      	ldr	r7, [sp, #12]
 8006444:	3630      	adds	r6, #48	; 0x30
 8006446:	f805 6b01 	strb.w	r6, [r5], #1
 800644a:	9e02      	ldr	r6, [sp, #8]
 800644c:	1bae      	subs	r6, r5, r6
 800644e:	42b7      	cmp	r7, r6
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	d138      	bne.n	80064c8 <_dtoa_r+0x6d0>
 8006456:	f7f9 ff19 	bl	800028c <__adddf3>
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f7fa fb35 	bl	8000ad4 <__aeabi_dcmplt>
 800646a:	b9c8      	cbnz	r0, 80064a0 <_dtoa_r+0x6a8>
 800646c:	4632      	mov	r2, r6
 800646e:	463b      	mov	r3, r7
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa fb24 	bl	8000ac0 <__aeabi_dcmpeq>
 8006478:	b110      	cbz	r0, 8006480 <_dtoa_r+0x688>
 800647a:	9b00      	ldr	r3, [sp, #0]
 800647c:	07db      	lsls	r3, r3, #31
 800647e:	d40f      	bmi.n	80064a0 <_dtoa_r+0x6a8>
 8006480:	4651      	mov	r1, sl
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fcbb 	bl	8006dfe <_Bfree>
 8006488:	2300      	movs	r3, #0
 800648a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800648c:	702b      	strb	r3, [r5, #0]
 800648e:	f10b 0301 	add.w	r3, fp, #1
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006496:	2b00      	cmp	r3, #0
 8006498:	f43f acf8 	beq.w	8005e8c <_dtoa_r+0x94>
 800649c:	601d      	str	r5, [r3, #0]
 800649e:	e4f5      	b.n	8005e8c <_dtoa_r+0x94>
 80064a0:	465f      	mov	r7, fp
 80064a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064a6:	2a39      	cmp	r2, #57	; 0x39
 80064a8:	f105 33ff 	add.w	r3, r5, #4294967295
 80064ac:	d106      	bne.n	80064bc <_dtoa_r+0x6c4>
 80064ae:	9a02      	ldr	r2, [sp, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d107      	bne.n	80064c4 <_dtoa_r+0x6cc>
 80064b4:	2330      	movs	r3, #48	; 0x30
 80064b6:	7013      	strb	r3, [r2, #0]
 80064b8:	3701      	adds	r7, #1
 80064ba:	4613      	mov	r3, r2
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	3201      	adds	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	e78d      	b.n	80063e0 <_dtoa_r+0x5e8>
 80064c4:	461d      	mov	r5, r3
 80064c6:	e7ec      	b.n	80064a2 <_dtoa_r+0x6aa>
 80064c8:	2200      	movs	r2, #0
 80064ca:	4ba4      	ldr	r3, [pc, #656]	; (800675c <_dtoa_r+0x964>)
 80064cc:	f7fa f890 	bl	80005f0 <__aeabi_dmul>
 80064d0:	2200      	movs	r2, #0
 80064d2:	2300      	movs	r3, #0
 80064d4:	4606      	mov	r6, r0
 80064d6:	460f      	mov	r7, r1
 80064d8:	f7fa faf2 	bl	8000ac0 <__aeabi_dcmpeq>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d09a      	beq.n	8006416 <_dtoa_r+0x61e>
 80064e0:	e7ce      	b.n	8006480 <_dtoa_r+0x688>
 80064e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	f000 80cd 	beq.w	8006684 <_dtoa_r+0x88c>
 80064ea:	9a07      	ldr	r2, [sp, #28]
 80064ec:	2a01      	cmp	r2, #1
 80064ee:	f300 80af 	bgt.w	8006650 <_dtoa_r+0x858>
 80064f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	f000 80a7 	beq.w	8006648 <_dtoa_r+0x850>
 80064fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064fe:	9e08      	ldr	r6, [sp, #32]
 8006500:	9d05      	ldr	r5, [sp, #20]
 8006502:	9a05      	ldr	r2, [sp, #20]
 8006504:	441a      	add	r2, r3
 8006506:	9205      	str	r2, [sp, #20]
 8006508:	9a06      	ldr	r2, [sp, #24]
 800650a:	2101      	movs	r1, #1
 800650c:	441a      	add	r2, r3
 800650e:	4620      	mov	r0, r4
 8006510:	9206      	str	r2, [sp, #24]
 8006512:	f000 fd14 	bl	8006f3e <__i2b>
 8006516:	4607      	mov	r7, r0
 8006518:	2d00      	cmp	r5, #0
 800651a:	dd0c      	ble.n	8006536 <_dtoa_r+0x73e>
 800651c:	9b06      	ldr	r3, [sp, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd09      	ble.n	8006536 <_dtoa_r+0x73e>
 8006522:	42ab      	cmp	r3, r5
 8006524:	9a05      	ldr	r2, [sp, #20]
 8006526:	bfa8      	it	ge
 8006528:	462b      	movge	r3, r5
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	9205      	str	r2, [sp, #20]
 800652e:	9a06      	ldr	r2, [sp, #24]
 8006530:	1aed      	subs	r5, r5, r3
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	9306      	str	r3, [sp, #24]
 8006536:	9b08      	ldr	r3, [sp, #32]
 8006538:	b1f3      	cbz	r3, 8006578 <_dtoa_r+0x780>
 800653a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80a5 	beq.w	800668c <_dtoa_r+0x894>
 8006542:	2e00      	cmp	r6, #0
 8006544:	dd10      	ble.n	8006568 <_dtoa_r+0x770>
 8006546:	4639      	mov	r1, r7
 8006548:	4632      	mov	r2, r6
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fd8e 	bl	800706c <__pow5mult>
 8006550:	4652      	mov	r2, sl
 8006552:	4601      	mov	r1, r0
 8006554:	4607      	mov	r7, r0
 8006556:	4620      	mov	r0, r4
 8006558:	f000 fcfa 	bl	8006f50 <__multiply>
 800655c:	4651      	mov	r1, sl
 800655e:	4680      	mov	r8, r0
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fc4c 	bl	8006dfe <_Bfree>
 8006566:	46c2      	mov	sl, r8
 8006568:	9b08      	ldr	r3, [sp, #32]
 800656a:	1b9a      	subs	r2, r3, r6
 800656c:	d004      	beq.n	8006578 <_dtoa_r+0x780>
 800656e:	4651      	mov	r1, sl
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fd7b 	bl	800706c <__pow5mult>
 8006576:	4682      	mov	sl, r0
 8006578:	2101      	movs	r1, #1
 800657a:	4620      	mov	r0, r4
 800657c:	f000 fcdf 	bl	8006f3e <__i2b>
 8006580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006582:	2b00      	cmp	r3, #0
 8006584:	4606      	mov	r6, r0
 8006586:	f340 8083 	ble.w	8006690 <_dtoa_r+0x898>
 800658a:	461a      	mov	r2, r3
 800658c:	4601      	mov	r1, r0
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fd6c 	bl	800706c <__pow5mult>
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	2b01      	cmp	r3, #1
 8006598:	4606      	mov	r6, r0
 800659a:	dd7c      	ble.n	8006696 <_dtoa_r+0x89e>
 800659c:	f04f 0800 	mov.w	r8, #0
 80065a0:	6933      	ldr	r3, [r6, #16]
 80065a2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065a6:	6918      	ldr	r0, [r3, #16]
 80065a8:	f000 fc7b 	bl	8006ea2 <__hi0bits>
 80065ac:	f1c0 0020 	rsb	r0, r0, #32
 80065b0:	9b06      	ldr	r3, [sp, #24]
 80065b2:	4418      	add	r0, r3
 80065b4:	f010 001f 	ands.w	r0, r0, #31
 80065b8:	f000 8096 	beq.w	80066e8 <_dtoa_r+0x8f0>
 80065bc:	f1c0 0320 	rsb	r3, r0, #32
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	f340 8087 	ble.w	80066d4 <_dtoa_r+0x8dc>
 80065c6:	9b05      	ldr	r3, [sp, #20]
 80065c8:	f1c0 001c 	rsb	r0, r0, #28
 80065cc:	4403      	add	r3, r0
 80065ce:	9305      	str	r3, [sp, #20]
 80065d0:	9b06      	ldr	r3, [sp, #24]
 80065d2:	4405      	add	r5, r0
 80065d4:	4403      	add	r3, r0
 80065d6:	9306      	str	r3, [sp, #24]
 80065d8:	9b05      	ldr	r3, [sp, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dd05      	ble.n	80065ea <_dtoa_r+0x7f2>
 80065de:	4651      	mov	r1, sl
 80065e0:	461a      	mov	r2, r3
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 fd90 	bl	8007108 <__lshift>
 80065e8:	4682      	mov	sl, r0
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dd05      	ble.n	80065fc <_dtoa_r+0x804>
 80065f0:	4631      	mov	r1, r6
 80065f2:	461a      	mov	r2, r3
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fd87 	bl	8007108 <__lshift>
 80065fa:	4606      	mov	r6, r0
 80065fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d074      	beq.n	80066ec <_dtoa_r+0x8f4>
 8006602:	4631      	mov	r1, r6
 8006604:	4650      	mov	r0, sl
 8006606:	f000 fdd0 	bl	80071aa <__mcmp>
 800660a:	2800      	cmp	r0, #0
 800660c:	da6e      	bge.n	80066ec <_dtoa_r+0x8f4>
 800660e:	2300      	movs	r3, #0
 8006610:	4651      	mov	r1, sl
 8006612:	220a      	movs	r2, #10
 8006614:	4620      	mov	r0, r4
 8006616:	f000 fc09 	bl	8006e2c <__multadd>
 800661a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006620:	4682      	mov	sl, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 81a8 	beq.w	8006978 <_dtoa_r+0xb80>
 8006628:	2300      	movs	r3, #0
 800662a:	4639      	mov	r1, r7
 800662c:	220a      	movs	r2, #10
 800662e:	4620      	mov	r0, r4
 8006630:	f000 fbfc 	bl	8006e2c <__multadd>
 8006634:	9b04      	ldr	r3, [sp, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	4607      	mov	r7, r0
 800663a:	f300 80c8 	bgt.w	80067ce <_dtoa_r+0x9d6>
 800663e:	9b07      	ldr	r3, [sp, #28]
 8006640:	2b02      	cmp	r3, #2
 8006642:	f340 80c4 	ble.w	80067ce <_dtoa_r+0x9d6>
 8006646:	e059      	b.n	80066fc <_dtoa_r+0x904>
 8006648:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800664a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800664e:	e756      	b.n	80064fe <_dtoa_r+0x706>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	1e5e      	subs	r6, r3, #1
 8006654:	9b08      	ldr	r3, [sp, #32]
 8006656:	42b3      	cmp	r3, r6
 8006658:	bfbf      	itttt	lt
 800665a:	9b08      	ldrlt	r3, [sp, #32]
 800665c:	9608      	strlt	r6, [sp, #32]
 800665e:	1af2      	sublt	r2, r6, r3
 8006660:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006662:	bfb6      	itet	lt
 8006664:	189b      	addlt	r3, r3, r2
 8006666:	1b9e      	subge	r6, r3, r6
 8006668:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	bfb8      	it	lt
 800666e:	2600      	movlt	r6, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	bfb9      	ittee	lt
 8006674:	9b05      	ldrlt	r3, [sp, #20]
 8006676:	9a03      	ldrlt	r2, [sp, #12]
 8006678:	9d05      	ldrge	r5, [sp, #20]
 800667a:	9b03      	ldrge	r3, [sp, #12]
 800667c:	bfbc      	itt	lt
 800667e:	1a9d      	sublt	r5, r3, r2
 8006680:	2300      	movlt	r3, #0
 8006682:	e73e      	b.n	8006502 <_dtoa_r+0x70a>
 8006684:	9e08      	ldr	r6, [sp, #32]
 8006686:	9d05      	ldr	r5, [sp, #20]
 8006688:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800668a:	e745      	b.n	8006518 <_dtoa_r+0x720>
 800668c:	9a08      	ldr	r2, [sp, #32]
 800668e:	e76e      	b.n	800656e <_dtoa_r+0x776>
 8006690:	9b07      	ldr	r3, [sp, #28]
 8006692:	2b01      	cmp	r3, #1
 8006694:	dc19      	bgt.n	80066ca <_dtoa_r+0x8d2>
 8006696:	9b00      	ldr	r3, [sp, #0]
 8006698:	b9bb      	cbnz	r3, 80066ca <_dtoa_r+0x8d2>
 800669a:	9b01      	ldr	r3, [sp, #4]
 800669c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a0:	b99b      	cbnz	r3, 80066ca <_dtoa_r+0x8d2>
 80066a2:	9b01      	ldr	r3, [sp, #4]
 80066a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	0d1b      	lsrs	r3, r3, #20
 80066aa:	051b      	lsls	r3, r3, #20
 80066ac:	b183      	cbz	r3, 80066d0 <_dtoa_r+0x8d8>
 80066ae:	9b05      	ldr	r3, [sp, #20]
 80066b0:	3301      	adds	r3, #1
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	9b06      	ldr	r3, [sp, #24]
 80066b6:	3301      	adds	r3, #1
 80066b8:	9306      	str	r3, [sp, #24]
 80066ba:	f04f 0801 	mov.w	r8, #1
 80066be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f47f af6d 	bne.w	80065a0 <_dtoa_r+0x7a8>
 80066c6:	2001      	movs	r0, #1
 80066c8:	e772      	b.n	80065b0 <_dtoa_r+0x7b8>
 80066ca:	f04f 0800 	mov.w	r8, #0
 80066ce:	e7f6      	b.n	80066be <_dtoa_r+0x8c6>
 80066d0:	4698      	mov	r8, r3
 80066d2:	e7f4      	b.n	80066be <_dtoa_r+0x8c6>
 80066d4:	d080      	beq.n	80065d8 <_dtoa_r+0x7e0>
 80066d6:	9a05      	ldr	r2, [sp, #20]
 80066d8:	331c      	adds	r3, #28
 80066da:	441a      	add	r2, r3
 80066dc:	9205      	str	r2, [sp, #20]
 80066de:	9a06      	ldr	r2, [sp, #24]
 80066e0:	441a      	add	r2, r3
 80066e2:	441d      	add	r5, r3
 80066e4:	4613      	mov	r3, r2
 80066e6:	e776      	b.n	80065d6 <_dtoa_r+0x7de>
 80066e8:	4603      	mov	r3, r0
 80066ea:	e7f4      	b.n	80066d6 <_dtoa_r+0x8de>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	dc36      	bgt.n	8006760 <_dtoa_r+0x968>
 80066f2:	9b07      	ldr	r3, [sp, #28]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	dd33      	ble.n	8006760 <_dtoa_r+0x968>
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	b963      	cbnz	r3, 800671a <_dtoa_r+0x922>
 8006700:	4631      	mov	r1, r6
 8006702:	2205      	movs	r2, #5
 8006704:	4620      	mov	r0, r4
 8006706:	f000 fb91 	bl	8006e2c <__multadd>
 800670a:	4601      	mov	r1, r0
 800670c:	4606      	mov	r6, r0
 800670e:	4650      	mov	r0, sl
 8006710:	f000 fd4b 	bl	80071aa <__mcmp>
 8006714:	2800      	cmp	r0, #0
 8006716:	f73f adb6 	bgt.w	8006286 <_dtoa_r+0x48e>
 800671a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671c:	9d02      	ldr	r5, [sp, #8]
 800671e:	ea6f 0b03 	mvn.w	fp, r3
 8006722:	2300      	movs	r3, #0
 8006724:	9303      	str	r3, [sp, #12]
 8006726:	4631      	mov	r1, r6
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fb68 	bl	8006dfe <_Bfree>
 800672e:	2f00      	cmp	r7, #0
 8006730:	f43f aea6 	beq.w	8006480 <_dtoa_r+0x688>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	b12b      	cbz	r3, 8006744 <_dtoa_r+0x94c>
 8006738:	42bb      	cmp	r3, r7
 800673a:	d003      	beq.n	8006744 <_dtoa_r+0x94c>
 800673c:	4619      	mov	r1, r3
 800673e:	4620      	mov	r0, r4
 8006740:	f000 fb5d 	bl	8006dfe <_Bfree>
 8006744:	4639      	mov	r1, r7
 8006746:	4620      	mov	r0, r4
 8006748:	f000 fb59 	bl	8006dfe <_Bfree>
 800674c:	e698      	b.n	8006480 <_dtoa_r+0x688>
 800674e:	2600      	movs	r6, #0
 8006750:	4637      	mov	r7, r6
 8006752:	e7e2      	b.n	800671a <_dtoa_r+0x922>
 8006754:	46bb      	mov	fp, r7
 8006756:	4637      	mov	r7, r6
 8006758:	e595      	b.n	8006286 <_dtoa_r+0x48e>
 800675a:	bf00      	nop
 800675c:	40240000 	.word	0x40240000
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	bb93      	cbnz	r3, 80067ca <_dtoa_r+0x9d2>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	9d02      	ldr	r5, [sp, #8]
 800676a:	4631      	mov	r1, r6
 800676c:	4650      	mov	r0, sl
 800676e:	f7ff fab5 	bl	8005cdc <quorem>
 8006772:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006776:	f805 9b01 	strb.w	r9, [r5], #1
 800677a:	9b02      	ldr	r3, [sp, #8]
 800677c:	9a04      	ldr	r2, [sp, #16]
 800677e:	1aeb      	subs	r3, r5, r3
 8006780:	429a      	cmp	r2, r3
 8006782:	f300 80dc 	bgt.w	800693e <_dtoa_r+0xb46>
 8006786:	9b02      	ldr	r3, [sp, #8]
 8006788:	2a01      	cmp	r2, #1
 800678a:	bfac      	ite	ge
 800678c:	189b      	addge	r3, r3, r2
 800678e:	3301      	addlt	r3, #1
 8006790:	4698      	mov	r8, r3
 8006792:	2300      	movs	r3, #0
 8006794:	9303      	str	r3, [sp, #12]
 8006796:	4651      	mov	r1, sl
 8006798:	2201      	movs	r2, #1
 800679a:	4620      	mov	r0, r4
 800679c:	f000 fcb4 	bl	8007108 <__lshift>
 80067a0:	4631      	mov	r1, r6
 80067a2:	4682      	mov	sl, r0
 80067a4:	f000 fd01 	bl	80071aa <__mcmp>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f300 808d 	bgt.w	80068c8 <_dtoa_r+0xad0>
 80067ae:	d103      	bne.n	80067b8 <_dtoa_r+0x9c0>
 80067b0:	f019 0f01 	tst.w	r9, #1
 80067b4:	f040 8088 	bne.w	80068c8 <_dtoa_r+0xad0>
 80067b8:	4645      	mov	r5, r8
 80067ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067be:	2b30      	cmp	r3, #48	; 0x30
 80067c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80067c4:	d1af      	bne.n	8006726 <_dtoa_r+0x92e>
 80067c6:	4615      	mov	r5, r2
 80067c8:	e7f7      	b.n	80067ba <_dtoa_r+0x9c2>
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	dd05      	ble.n	80067de <_dtoa_r+0x9e6>
 80067d2:	4639      	mov	r1, r7
 80067d4:	462a      	mov	r2, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fc96 	bl	8007108 <__lshift>
 80067dc:	4607      	mov	r7, r0
 80067de:	f1b8 0f00 	cmp.w	r8, #0
 80067e2:	d04c      	beq.n	800687e <_dtoa_r+0xa86>
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	4620      	mov	r0, r4
 80067e8:	f000 fad5 	bl	8006d96 <_Balloc>
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	3202      	adds	r2, #2
 80067f0:	4605      	mov	r5, r0
 80067f2:	0092      	lsls	r2, r2, #2
 80067f4:	f107 010c 	add.w	r1, r7, #12
 80067f8:	300c      	adds	r0, #12
 80067fa:	f000 fac1 	bl	8006d80 <memcpy>
 80067fe:	2201      	movs	r2, #1
 8006800:	4629      	mov	r1, r5
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fc80 	bl	8007108 <__lshift>
 8006808:	9b00      	ldr	r3, [sp, #0]
 800680a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800680e:	9703      	str	r7, [sp, #12]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	4607      	mov	r7, r0
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	4631      	mov	r1, r6
 800681a:	4650      	mov	r0, sl
 800681c:	f7ff fa5e 	bl	8005cdc <quorem>
 8006820:	9903      	ldr	r1, [sp, #12]
 8006822:	4605      	mov	r5, r0
 8006824:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006828:	4650      	mov	r0, sl
 800682a:	f000 fcbe 	bl	80071aa <__mcmp>
 800682e:	463a      	mov	r2, r7
 8006830:	9000      	str	r0, [sp, #0]
 8006832:	4631      	mov	r1, r6
 8006834:	4620      	mov	r0, r4
 8006836:	f000 fcd2 	bl	80071de <__mdiff>
 800683a:	68c3      	ldr	r3, [r0, #12]
 800683c:	4602      	mov	r2, r0
 800683e:	bb03      	cbnz	r3, 8006882 <_dtoa_r+0xa8a>
 8006840:	4601      	mov	r1, r0
 8006842:	9006      	str	r0, [sp, #24]
 8006844:	4650      	mov	r0, sl
 8006846:	f000 fcb0 	bl	80071aa <__mcmp>
 800684a:	9a06      	ldr	r2, [sp, #24]
 800684c:	4603      	mov	r3, r0
 800684e:	4611      	mov	r1, r2
 8006850:	4620      	mov	r0, r4
 8006852:	9306      	str	r3, [sp, #24]
 8006854:	f000 fad3 	bl	8006dfe <_Bfree>
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	b9a3      	cbnz	r3, 8006886 <_dtoa_r+0xa8e>
 800685c:	9a07      	ldr	r2, [sp, #28]
 800685e:	b992      	cbnz	r2, 8006886 <_dtoa_r+0xa8e>
 8006860:	9a05      	ldr	r2, [sp, #20]
 8006862:	b982      	cbnz	r2, 8006886 <_dtoa_r+0xa8e>
 8006864:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006868:	d029      	beq.n	80068be <_dtoa_r+0xac6>
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dd01      	ble.n	8006874 <_dtoa_r+0xa7c>
 8006870:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006874:	f108 0501 	add.w	r5, r8, #1
 8006878:	f888 9000 	strb.w	r9, [r8]
 800687c:	e753      	b.n	8006726 <_dtoa_r+0x92e>
 800687e:	4638      	mov	r0, r7
 8006880:	e7c2      	b.n	8006808 <_dtoa_r+0xa10>
 8006882:	2301      	movs	r3, #1
 8006884:	e7e3      	b.n	800684e <_dtoa_r+0xa56>
 8006886:	9a00      	ldr	r2, [sp, #0]
 8006888:	2a00      	cmp	r2, #0
 800688a:	db04      	blt.n	8006896 <_dtoa_r+0xa9e>
 800688c:	d125      	bne.n	80068da <_dtoa_r+0xae2>
 800688e:	9a07      	ldr	r2, [sp, #28]
 8006890:	bb1a      	cbnz	r2, 80068da <_dtoa_r+0xae2>
 8006892:	9a05      	ldr	r2, [sp, #20]
 8006894:	bb0a      	cbnz	r2, 80068da <_dtoa_r+0xae2>
 8006896:	2b00      	cmp	r3, #0
 8006898:	ddec      	ble.n	8006874 <_dtoa_r+0xa7c>
 800689a:	4651      	mov	r1, sl
 800689c:	2201      	movs	r2, #1
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fc32 	bl	8007108 <__lshift>
 80068a4:	4631      	mov	r1, r6
 80068a6:	4682      	mov	sl, r0
 80068a8:	f000 fc7f 	bl	80071aa <__mcmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	dc03      	bgt.n	80068b8 <_dtoa_r+0xac0>
 80068b0:	d1e0      	bne.n	8006874 <_dtoa_r+0xa7c>
 80068b2:	f019 0f01 	tst.w	r9, #1
 80068b6:	d0dd      	beq.n	8006874 <_dtoa_r+0xa7c>
 80068b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068bc:	d1d8      	bne.n	8006870 <_dtoa_r+0xa78>
 80068be:	2339      	movs	r3, #57	; 0x39
 80068c0:	f888 3000 	strb.w	r3, [r8]
 80068c4:	f108 0801 	add.w	r8, r8, #1
 80068c8:	4645      	mov	r5, r8
 80068ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068ce:	2b39      	cmp	r3, #57	; 0x39
 80068d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80068d4:	d03b      	beq.n	800694e <_dtoa_r+0xb56>
 80068d6:	3301      	adds	r3, #1
 80068d8:	e040      	b.n	800695c <_dtoa_r+0xb64>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f108 0501 	add.w	r5, r8, #1
 80068e0:	dd05      	ble.n	80068ee <_dtoa_r+0xaf6>
 80068e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068e6:	d0ea      	beq.n	80068be <_dtoa_r+0xac6>
 80068e8:	f109 0901 	add.w	r9, r9, #1
 80068ec:	e7c4      	b.n	8006878 <_dtoa_r+0xa80>
 80068ee:	9b02      	ldr	r3, [sp, #8]
 80068f0:	9a04      	ldr	r2, [sp, #16]
 80068f2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80068f6:	1aeb      	subs	r3, r5, r3
 80068f8:	4293      	cmp	r3, r2
 80068fa:	46a8      	mov	r8, r5
 80068fc:	f43f af4b 	beq.w	8006796 <_dtoa_r+0x99e>
 8006900:	4651      	mov	r1, sl
 8006902:	2300      	movs	r3, #0
 8006904:	220a      	movs	r2, #10
 8006906:	4620      	mov	r0, r4
 8006908:	f000 fa90 	bl	8006e2c <__multadd>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	9903      	ldr	r1, [sp, #12]
 8006910:	42bb      	cmp	r3, r7
 8006912:	4682      	mov	sl, r0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	f04f 020a 	mov.w	r2, #10
 800691c:	4620      	mov	r0, r4
 800691e:	d104      	bne.n	800692a <_dtoa_r+0xb32>
 8006920:	f000 fa84 	bl	8006e2c <__multadd>
 8006924:	9003      	str	r0, [sp, #12]
 8006926:	4607      	mov	r7, r0
 8006928:	e776      	b.n	8006818 <_dtoa_r+0xa20>
 800692a:	f000 fa7f 	bl	8006e2c <__multadd>
 800692e:	2300      	movs	r3, #0
 8006930:	9003      	str	r0, [sp, #12]
 8006932:	220a      	movs	r2, #10
 8006934:	4639      	mov	r1, r7
 8006936:	4620      	mov	r0, r4
 8006938:	f000 fa78 	bl	8006e2c <__multadd>
 800693c:	e7f3      	b.n	8006926 <_dtoa_r+0xb2e>
 800693e:	4651      	mov	r1, sl
 8006940:	2300      	movs	r3, #0
 8006942:	220a      	movs	r2, #10
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fa71 	bl	8006e2c <__multadd>
 800694a:	4682      	mov	sl, r0
 800694c:	e70d      	b.n	800676a <_dtoa_r+0x972>
 800694e:	9b02      	ldr	r3, [sp, #8]
 8006950:	4293      	cmp	r3, r2
 8006952:	d105      	bne.n	8006960 <_dtoa_r+0xb68>
 8006954:	9a02      	ldr	r2, [sp, #8]
 8006956:	f10b 0b01 	add.w	fp, fp, #1
 800695a:	2331      	movs	r3, #49	; 0x31
 800695c:	7013      	strb	r3, [r2, #0]
 800695e:	e6e2      	b.n	8006726 <_dtoa_r+0x92e>
 8006960:	4615      	mov	r5, r2
 8006962:	e7b2      	b.n	80068ca <_dtoa_r+0xad2>
 8006964:	4b09      	ldr	r3, [pc, #36]	; (800698c <_dtoa_r+0xb94>)
 8006966:	f7ff baae 	b.w	8005ec6 <_dtoa_r+0xce>
 800696a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800696c:	2b00      	cmp	r3, #0
 800696e:	f47f aa88 	bne.w	8005e82 <_dtoa_r+0x8a>
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <_dtoa_r+0xb98>)
 8006974:	f7ff baa7 	b.w	8005ec6 <_dtoa_r+0xce>
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f73f aef4 	bgt.w	8006768 <_dtoa_r+0x970>
 8006980:	9b07      	ldr	r3, [sp, #28]
 8006982:	2b02      	cmp	r3, #2
 8006984:	f77f aef0 	ble.w	8006768 <_dtoa_r+0x970>
 8006988:	e6b8      	b.n	80066fc <_dtoa_r+0x904>
 800698a:	bf00      	nop
 800698c:	08008574 	.word	0x08008574
 8006990:	08008598 	.word	0x08008598

08006994 <__sflush_r>:
 8006994:	898a      	ldrh	r2, [r1, #12]
 8006996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699a:	4605      	mov	r5, r0
 800699c:	0710      	lsls	r0, r2, #28
 800699e:	460c      	mov	r4, r1
 80069a0:	d45a      	bmi.n	8006a58 <__sflush_r+0xc4>
 80069a2:	684b      	ldr	r3, [r1, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	dc05      	bgt.n	80069b4 <__sflush_r+0x20>
 80069a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dc02      	bgt.n	80069b4 <__sflush_r+0x20>
 80069ae:	2000      	movs	r0, #0
 80069b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	d0f9      	beq.n	80069ae <__sflush_r+0x1a>
 80069ba:	2300      	movs	r3, #0
 80069bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069c0:	682f      	ldr	r7, [r5, #0]
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	d033      	beq.n	8006a2e <__sflush_r+0x9a>
 80069c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	075a      	lsls	r2, r3, #29
 80069cc:	d505      	bpl.n	80069da <__sflush_r+0x46>
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	1ac0      	subs	r0, r0, r3
 80069d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069d4:	b10b      	cbz	r3, 80069da <__sflush_r+0x46>
 80069d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069d8:	1ac0      	subs	r0, r0, r3
 80069da:	2300      	movs	r3, #0
 80069dc:	4602      	mov	r2, r0
 80069de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069e0:	6a21      	ldr	r1, [r4, #32]
 80069e2:	4628      	mov	r0, r5
 80069e4:	47b0      	blx	r6
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	d106      	bne.n	80069fa <__sflush_r+0x66>
 80069ec:	6829      	ldr	r1, [r5, #0]
 80069ee:	291d      	cmp	r1, #29
 80069f0:	d84b      	bhi.n	8006a8a <__sflush_r+0xf6>
 80069f2:	4a2b      	ldr	r2, [pc, #172]	; (8006aa0 <__sflush_r+0x10c>)
 80069f4:	40ca      	lsrs	r2, r1
 80069f6:	07d6      	lsls	r6, r2, #31
 80069f8:	d547      	bpl.n	8006a8a <__sflush_r+0xf6>
 80069fa:	2200      	movs	r2, #0
 80069fc:	6062      	str	r2, [r4, #4]
 80069fe:	04d9      	lsls	r1, r3, #19
 8006a00:	6922      	ldr	r2, [r4, #16]
 8006a02:	6022      	str	r2, [r4, #0]
 8006a04:	d504      	bpl.n	8006a10 <__sflush_r+0x7c>
 8006a06:	1c42      	adds	r2, r0, #1
 8006a08:	d101      	bne.n	8006a0e <__sflush_r+0x7a>
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	b903      	cbnz	r3, 8006a10 <__sflush_r+0x7c>
 8006a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8006a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a12:	602f      	str	r7, [r5, #0]
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d0ca      	beq.n	80069ae <__sflush_r+0x1a>
 8006a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	d002      	beq.n	8006a26 <__sflush_r+0x92>
 8006a20:	4628      	mov	r0, r5
 8006a22:	f000 fc97 	bl	8007354 <_free_r>
 8006a26:	2000      	movs	r0, #0
 8006a28:	6360      	str	r0, [r4, #52]	; 0x34
 8006a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2e:	6a21      	ldr	r1, [r4, #32]
 8006a30:	2301      	movs	r3, #1
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b0      	blx	r6
 8006a36:	1c41      	adds	r1, r0, #1
 8006a38:	d1c6      	bne.n	80069c8 <__sflush_r+0x34>
 8006a3a:	682b      	ldr	r3, [r5, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0c3      	beq.n	80069c8 <__sflush_r+0x34>
 8006a40:	2b1d      	cmp	r3, #29
 8006a42:	d001      	beq.n	8006a48 <__sflush_r+0xb4>
 8006a44:	2b16      	cmp	r3, #22
 8006a46:	d101      	bne.n	8006a4c <__sflush_r+0xb8>
 8006a48:	602f      	str	r7, [r5, #0]
 8006a4a:	e7b0      	b.n	80069ae <__sflush_r+0x1a>
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a58:	690f      	ldr	r7, [r1, #16]
 8006a5a:	2f00      	cmp	r7, #0
 8006a5c:	d0a7      	beq.n	80069ae <__sflush_r+0x1a>
 8006a5e:	0793      	lsls	r3, r2, #30
 8006a60:	680e      	ldr	r6, [r1, #0]
 8006a62:	bf08      	it	eq
 8006a64:	694b      	ldreq	r3, [r1, #20]
 8006a66:	600f      	str	r7, [r1, #0]
 8006a68:	bf18      	it	ne
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	eba6 0807 	sub.w	r8, r6, r7
 8006a70:	608b      	str	r3, [r1, #8]
 8006a72:	f1b8 0f00 	cmp.w	r8, #0
 8006a76:	dd9a      	ble.n	80069ae <__sflush_r+0x1a>
 8006a78:	4643      	mov	r3, r8
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	6a21      	ldr	r1, [r4, #32]
 8006a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b0      	blx	r6
 8006a84:	2800      	cmp	r0, #0
 8006a86:	dc07      	bgt.n	8006a98 <__sflush_r+0x104>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a98:	4407      	add	r7, r0
 8006a9a:	eba8 0800 	sub.w	r8, r8, r0
 8006a9e:	e7e8      	b.n	8006a72 <__sflush_r+0xde>
 8006aa0:	20400001 	.word	0x20400001

08006aa4 <_fflush_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	690b      	ldr	r3, [r1, #16]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b1db      	cbz	r3, 8006ae6 <_fflush_r+0x42>
 8006aae:	b118      	cbz	r0, 8006ab8 <_fflush_r+0x14>
 8006ab0:	6983      	ldr	r3, [r0, #24]
 8006ab2:	b90b      	cbnz	r3, 8006ab8 <_fflush_r+0x14>
 8006ab4:	f000 f860 	bl	8006b78 <__sinit>
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <_fflush_r+0x48>)
 8006aba:	429c      	cmp	r4, r3
 8006abc:	d109      	bne.n	8006ad2 <_fflush_r+0x2e>
 8006abe:	686c      	ldr	r4, [r5, #4]
 8006ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac4:	b17b      	cbz	r3, 8006ae6 <_fflush_r+0x42>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ace:	f7ff bf61 	b.w	8006994 <__sflush_r>
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <_fflush_r+0x4c>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	d101      	bne.n	8006adc <_fflush_r+0x38>
 8006ad8:	68ac      	ldr	r4, [r5, #8]
 8006ada:	e7f1      	b.n	8006ac0 <_fflush_r+0x1c>
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <_fflush_r+0x50>)
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	bf08      	it	eq
 8006ae2:	68ec      	ldreq	r4, [r5, #12]
 8006ae4:	e7ec      	b.n	8006ac0 <_fflush_r+0x1c>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	bd38      	pop	{r3, r4, r5, pc}
 8006aea:	bf00      	nop
 8006aec:	080085c8 	.word	0x080085c8
 8006af0:	080085e8 	.word	0x080085e8
 8006af4:	080085a8 	.word	0x080085a8

08006af8 <_cleanup_r>:
 8006af8:	4901      	ldr	r1, [pc, #4]	; (8006b00 <_cleanup_r+0x8>)
 8006afa:	f000 b8a9 	b.w	8006c50 <_fwalk_reent>
 8006afe:	bf00      	nop
 8006b00:	08006aa5 	.word	0x08006aa5

08006b04 <std.isra.0>:
 8006b04:	2300      	movs	r3, #0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	6003      	str	r3, [r0, #0]
 8006b0c:	6043      	str	r3, [r0, #4]
 8006b0e:	6083      	str	r3, [r0, #8]
 8006b10:	8181      	strh	r1, [r0, #12]
 8006b12:	6643      	str	r3, [r0, #100]	; 0x64
 8006b14:	81c2      	strh	r2, [r0, #14]
 8006b16:	6103      	str	r3, [r0, #16]
 8006b18:	6143      	str	r3, [r0, #20]
 8006b1a:	6183      	str	r3, [r0, #24]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2208      	movs	r2, #8
 8006b20:	305c      	adds	r0, #92	; 0x5c
 8006b22:	f7fe fb2b 	bl	800517c <memset>
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <std.isra.0+0x38>)
 8006b28:	6263      	str	r3, [r4, #36]	; 0x24
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std.isra.0+0x3c>)
 8006b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std.isra.0+0x40>)
 8006b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std.isra.0+0x44>)
 8006b34:	6224      	str	r4, [r4, #32]
 8006b36:	6323      	str	r3, [r4, #48]	; 0x30
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	0800774d 	.word	0x0800774d
 8006b40:	0800776f 	.word	0x0800776f
 8006b44:	080077a7 	.word	0x080077a7
 8006b48:	080077cb 	.word	0x080077cb

08006b4c <__sfmoreglue>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	1e4a      	subs	r2, r1, #1
 8006b50:	2568      	movs	r5, #104	; 0x68
 8006b52:	4355      	muls	r5, r2
 8006b54:	460e      	mov	r6, r1
 8006b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b5a:	f000 fc49 	bl	80073f0 <_malloc_r>
 8006b5e:	4604      	mov	r4, r0
 8006b60:	b140      	cbz	r0, 8006b74 <__sfmoreglue+0x28>
 8006b62:	2100      	movs	r1, #0
 8006b64:	e880 0042 	stmia.w	r0, {r1, r6}
 8006b68:	300c      	adds	r0, #12
 8006b6a:	60a0      	str	r0, [r4, #8]
 8006b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b70:	f7fe fb04 	bl	800517c <memset>
 8006b74:	4620      	mov	r0, r4
 8006b76:	bd70      	pop	{r4, r5, r6, pc}

08006b78 <__sinit>:
 8006b78:	6983      	ldr	r3, [r0, #24]
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	bb33      	cbnz	r3, 8006bce <__sinit+0x56>
 8006b80:	6483      	str	r3, [r0, #72]	; 0x48
 8006b82:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006b84:	6503      	str	r3, [r0, #80]	; 0x50
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <__sinit+0x58>)
 8006b88:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <__sinit+0x5c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6282      	str	r2, [r0, #40]	; 0x28
 8006b8e:	4298      	cmp	r0, r3
 8006b90:	bf04      	itt	eq
 8006b92:	2301      	moveq	r3, #1
 8006b94:	6183      	streq	r3, [r0, #24]
 8006b96:	f000 f81f 	bl	8006bd8 <__sfp>
 8006b9a:	6060      	str	r0, [r4, #4]
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f81b 	bl	8006bd8 <__sfp>
 8006ba2:	60a0      	str	r0, [r4, #8]
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f000 f817 	bl	8006bd8 <__sfp>
 8006baa:	2200      	movs	r2, #0
 8006bac:	60e0      	str	r0, [r4, #12]
 8006bae:	2104      	movs	r1, #4
 8006bb0:	6860      	ldr	r0, [r4, #4]
 8006bb2:	f7ff ffa7 	bl	8006b04 <std.isra.0>
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2109      	movs	r1, #9
 8006bba:	68a0      	ldr	r0, [r4, #8]
 8006bbc:	f7ff ffa2 	bl	8006b04 <std.isra.0>
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	2112      	movs	r1, #18
 8006bc4:	68e0      	ldr	r0, [r4, #12]
 8006bc6:	f7ff ff9d 	bl	8006b04 <std.isra.0>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	61a3      	str	r3, [r4, #24]
 8006bce:	bd10      	pop	{r4, pc}
 8006bd0:	08008560 	.word	0x08008560
 8006bd4:	08006af9 	.word	0x08006af9

08006bd8 <__sfp>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <__sfp+0x74>)
 8006bdc:	681e      	ldr	r6, [r3, #0]
 8006bde:	69b3      	ldr	r3, [r6, #24]
 8006be0:	4607      	mov	r7, r0
 8006be2:	b913      	cbnz	r3, 8006bea <__sfp+0x12>
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff ffc7 	bl	8006b78 <__sinit>
 8006bea:	3648      	adds	r6, #72	; 0x48
 8006bec:	68b4      	ldr	r4, [r6, #8]
 8006bee:	6873      	ldr	r3, [r6, #4]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	d503      	bpl.n	8006bfc <__sfp+0x24>
 8006bf4:	6833      	ldr	r3, [r6, #0]
 8006bf6:	b133      	cbz	r3, 8006c06 <__sfp+0x2e>
 8006bf8:	6836      	ldr	r6, [r6, #0]
 8006bfa:	e7f7      	b.n	8006bec <__sfp+0x14>
 8006bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c00:	b16d      	cbz	r5, 8006c1e <__sfp+0x46>
 8006c02:	3468      	adds	r4, #104	; 0x68
 8006c04:	e7f4      	b.n	8006bf0 <__sfp+0x18>
 8006c06:	2104      	movs	r1, #4
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7ff ff9f 	bl	8006b4c <__sfmoreglue>
 8006c0e:	6030      	str	r0, [r6, #0]
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d1f1      	bne.n	8006bf8 <__sfp+0x20>
 8006c14:	230c      	movs	r3, #12
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4604      	mov	r4, r0
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c22:	81e3      	strh	r3, [r4, #14]
 8006c24:	2301      	movs	r3, #1
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	6665      	str	r5, [r4, #100]	; 0x64
 8006c2a:	6025      	str	r5, [r4, #0]
 8006c2c:	60a5      	str	r5, [r4, #8]
 8006c2e:	6065      	str	r5, [r4, #4]
 8006c30:	6125      	str	r5, [r4, #16]
 8006c32:	6165      	str	r5, [r4, #20]
 8006c34:	61a5      	str	r5, [r4, #24]
 8006c36:	2208      	movs	r2, #8
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c3e:	f7fe fa9d 	bl	800517c <memset>
 8006c42:	6365      	str	r5, [r4, #52]	; 0x34
 8006c44:	63a5      	str	r5, [r4, #56]	; 0x38
 8006c46:	64a5      	str	r5, [r4, #72]	; 0x48
 8006c48:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006c4a:	e7e6      	b.n	8006c1a <__sfp+0x42>
 8006c4c:	08008560 	.word	0x08008560

08006c50 <_fwalk_reent>:
 8006c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c54:	4680      	mov	r8, r0
 8006c56:	4689      	mov	r9, r1
 8006c58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	b914      	cbnz	r4, 8006c66 <_fwalk_reent+0x16>
 8006c60:	4630      	mov	r0, r6
 8006c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c66:	68a5      	ldr	r5, [r4, #8]
 8006c68:	6867      	ldr	r7, [r4, #4]
 8006c6a:	3f01      	subs	r7, #1
 8006c6c:	d501      	bpl.n	8006c72 <_fwalk_reent+0x22>
 8006c6e:	6824      	ldr	r4, [r4, #0]
 8006c70:	e7f5      	b.n	8006c5e <_fwalk_reent+0xe>
 8006c72:	89ab      	ldrh	r3, [r5, #12]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d907      	bls.n	8006c88 <_fwalk_reent+0x38>
 8006c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	d003      	beq.n	8006c88 <_fwalk_reent+0x38>
 8006c80:	4629      	mov	r1, r5
 8006c82:	4640      	mov	r0, r8
 8006c84:	47c8      	blx	r9
 8006c86:	4306      	orrs	r6, r0
 8006c88:	3568      	adds	r5, #104	; 0x68
 8006c8a:	e7ee      	b.n	8006c6a <_fwalk_reent+0x1a>

08006c8c <_localeconv_r>:
 8006c8c:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <_localeconv_r+0x14>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6a18      	ldr	r0, [r3, #32]
 8006c92:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <_localeconv_r+0x18>)
 8006c94:	2800      	cmp	r0, #0
 8006c96:	bf08      	it	eq
 8006c98:	4618      	moveq	r0, r3
 8006c9a:	30f0      	adds	r0, #240	; 0xf0
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	2000000c 	.word	0x2000000c
 8006ca4:	20000070 	.word	0x20000070

08006ca8 <__swhatbuf_r>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	460e      	mov	r6, r1
 8006cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	b090      	sub	sp, #64	; 0x40
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	da07      	bge.n	8006cca <__swhatbuf_r+0x22>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	89b3      	ldrh	r3, [r6, #12]
 8006cc0:	061a      	lsls	r2, r3, #24
 8006cc2:	d410      	bmi.n	8006ce6 <__swhatbuf_r+0x3e>
 8006cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc8:	e00e      	b.n	8006ce8 <__swhatbuf_r+0x40>
 8006cca:	aa01      	add	r2, sp, #4
 8006ccc:	f000 fda4 	bl	8007818 <_fstat_r>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	dbf2      	blt.n	8006cba <__swhatbuf_r+0x12>
 8006cd4:	9a02      	ldr	r2, [sp, #8]
 8006cd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cde:	425a      	negs	r2, r3
 8006ce0:	415a      	adcs	r2, r3
 8006ce2:	602a      	str	r2, [r5, #0]
 8006ce4:	e7ee      	b.n	8006cc4 <__swhatbuf_r+0x1c>
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	2000      	movs	r0, #0
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	b010      	add	sp, #64	; 0x40
 8006cee:	bd70      	pop	{r4, r5, r6, pc}

08006cf0 <__smakebuf_r>:
 8006cf0:	898b      	ldrh	r3, [r1, #12]
 8006cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cf4:	079d      	lsls	r5, r3, #30
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	d507      	bpl.n	8006d0c <__smakebuf_r+0x1c>
 8006cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2301      	movs	r3, #1
 8006d06:	6163      	str	r3, [r4, #20]
 8006d08:	b002      	add	sp, #8
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	ab01      	add	r3, sp, #4
 8006d0e:	466a      	mov	r2, sp
 8006d10:	f7ff ffca 	bl	8006ca8 <__swhatbuf_r>
 8006d14:	9900      	ldr	r1, [sp, #0]
 8006d16:	4605      	mov	r5, r0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 fb69 	bl	80073f0 <_malloc_r>
 8006d1e:	b948      	cbnz	r0, 8006d34 <__smakebuf_r+0x44>
 8006d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d24:	059a      	lsls	r2, r3, #22
 8006d26:	d4ef      	bmi.n	8006d08 <__smakebuf_r+0x18>
 8006d28:	f023 0303 	bic.w	r3, r3, #3
 8006d2c:	f043 0302 	orr.w	r3, r3, #2
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	e7e3      	b.n	8006cfc <__smakebuf_r+0xc>
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <__smakebuf_r+0x7c>)
 8006d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	6020      	str	r0, [r4, #0]
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	9b00      	ldr	r3, [sp, #0]
 8006d44:	6163      	str	r3, [r4, #20]
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	6120      	str	r0, [r4, #16]
 8006d4a:	b15b      	cbz	r3, 8006d64 <__smakebuf_r+0x74>
 8006d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d50:	4630      	mov	r0, r6
 8006d52:	f000 fd73 	bl	800783c <_isatty_r>
 8006d56:	b128      	cbz	r0, 8006d64 <__smakebuf_r+0x74>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	431d      	orrs	r5, r3
 8006d68:	81a5      	strh	r5, [r4, #12]
 8006d6a:	e7cd      	b.n	8006d08 <__smakebuf_r+0x18>
 8006d6c:	08006af9 	.word	0x08006af9

08006d70 <malloc>:
 8006d70:	4b02      	ldr	r3, [pc, #8]	; (8006d7c <malloc+0xc>)
 8006d72:	4601      	mov	r1, r0
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	f000 bb3b 	b.w	80073f0 <_malloc_r>
 8006d7a:	bf00      	nop
 8006d7c:	2000000c 	.word	0x2000000c

08006d80 <memcpy>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	1e43      	subs	r3, r0, #1
 8006d84:	440a      	add	r2, r1
 8006d86:	4291      	cmp	r1, r2
 8006d88:	d100      	bne.n	8006d8c <memcpy+0xc>
 8006d8a:	bd10      	pop	{r4, pc}
 8006d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d94:	e7f7      	b.n	8006d86 <memcpy+0x6>

08006d96 <_Balloc>:
 8006d96:	b570      	push	{r4, r5, r6, lr}
 8006d98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	460e      	mov	r6, r1
 8006d9e:	b93d      	cbnz	r5, 8006db0 <_Balloc+0x1a>
 8006da0:	2010      	movs	r0, #16
 8006da2:	f7ff ffe5 	bl	8006d70 <malloc>
 8006da6:	6260      	str	r0, [r4, #36]	; 0x24
 8006da8:	6045      	str	r5, [r0, #4]
 8006daa:	6085      	str	r5, [r0, #8]
 8006dac:	6005      	str	r5, [r0, #0]
 8006dae:	60c5      	str	r5, [r0, #12]
 8006db0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006db2:	68eb      	ldr	r3, [r5, #12]
 8006db4:	b183      	cbz	r3, 8006dd8 <_Balloc+0x42>
 8006db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006dbe:	b9b8      	cbnz	r0, 8006df0 <_Balloc+0x5a>
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	fa01 f506 	lsl.w	r5, r1, r6
 8006dc6:	1d6a      	adds	r2, r5, #5
 8006dc8:	0092      	lsls	r2, r2, #2
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 fab4 	bl	8007338 <_calloc_r>
 8006dd0:	b160      	cbz	r0, 8006dec <_Balloc+0x56>
 8006dd2:	6046      	str	r6, [r0, #4]
 8006dd4:	6085      	str	r5, [r0, #8]
 8006dd6:	e00e      	b.n	8006df6 <_Balloc+0x60>
 8006dd8:	2221      	movs	r2, #33	; 0x21
 8006dda:	2104      	movs	r1, #4
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 faab 	bl	8007338 <_calloc_r>
 8006de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006de4:	60e8      	str	r0, [r5, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e4      	bne.n	8006db6 <_Balloc+0x20>
 8006dec:	2000      	movs	r0, #0
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006df6:	2300      	movs	r3, #0
 8006df8:	6103      	str	r3, [r0, #16]
 8006dfa:	60c3      	str	r3, [r0, #12]
 8006dfc:	bd70      	pop	{r4, r5, r6, pc}

08006dfe <_Bfree>:
 8006dfe:	b570      	push	{r4, r5, r6, lr}
 8006e00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e02:	4606      	mov	r6, r0
 8006e04:	460d      	mov	r5, r1
 8006e06:	b93c      	cbnz	r4, 8006e18 <_Bfree+0x1a>
 8006e08:	2010      	movs	r0, #16
 8006e0a:	f7ff ffb1 	bl	8006d70 <malloc>
 8006e0e:	6270      	str	r0, [r6, #36]	; 0x24
 8006e10:	6044      	str	r4, [r0, #4]
 8006e12:	6084      	str	r4, [r0, #8]
 8006e14:	6004      	str	r4, [r0, #0]
 8006e16:	60c4      	str	r4, [r0, #12]
 8006e18:	b13d      	cbz	r5, 8006e2a <_Bfree+0x2c>
 8006e1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e1c:	686a      	ldr	r2, [r5, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e24:	6029      	str	r1, [r5, #0]
 8006e26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}

08006e2c <__multadd>:
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	690d      	ldr	r5, [r1, #16]
 8006e32:	461f      	mov	r7, r3
 8006e34:	4606      	mov	r6, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	f101 0e14 	add.w	lr, r1, #20
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f8de 0000 	ldr.w	r0, [lr]
 8006e42:	b281      	uxth	r1, r0
 8006e44:	fb02 7101 	mla	r1, r2, r1, r7
 8006e48:	0c0f      	lsrs	r7, r1, #16
 8006e4a:	0c00      	lsrs	r0, r0, #16
 8006e4c:	fb02 7000 	mla	r0, r2, r0, r7
 8006e50:	b289      	uxth	r1, r1
 8006e52:	3301      	adds	r3, #1
 8006e54:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006e58:	429d      	cmp	r5, r3
 8006e5a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006e5e:	f84e 1b04 	str.w	r1, [lr], #4
 8006e62:	dcec      	bgt.n	8006e3e <__multadd+0x12>
 8006e64:	b1d7      	cbz	r7, 8006e9c <__multadd+0x70>
 8006e66:	68a3      	ldr	r3, [r4, #8]
 8006e68:	429d      	cmp	r5, r3
 8006e6a:	db12      	blt.n	8006e92 <__multadd+0x66>
 8006e6c:	6861      	ldr	r1, [r4, #4]
 8006e6e:	4630      	mov	r0, r6
 8006e70:	3101      	adds	r1, #1
 8006e72:	f7ff ff90 	bl	8006d96 <_Balloc>
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	3202      	adds	r2, #2
 8006e7a:	f104 010c 	add.w	r1, r4, #12
 8006e7e:	4680      	mov	r8, r0
 8006e80:	0092      	lsls	r2, r2, #2
 8006e82:	300c      	adds	r0, #12
 8006e84:	f7ff ff7c 	bl	8006d80 <memcpy>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7ff ffb7 	bl	8006dfe <_Bfree>
 8006e90:	4644      	mov	r4, r8
 8006e92:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e96:	3501      	adds	r5, #1
 8006e98:	615f      	str	r7, [r3, #20]
 8006e9a:	6125      	str	r5, [r4, #16]
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ea2 <__hi0bits>:
 8006ea2:	0c02      	lsrs	r2, r0, #16
 8006ea4:	0412      	lsls	r2, r2, #16
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	b9b2      	cbnz	r2, 8006ed8 <__hi0bits+0x36>
 8006eaa:	0403      	lsls	r3, r0, #16
 8006eac:	2010      	movs	r0, #16
 8006eae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006eb2:	bf04      	itt	eq
 8006eb4:	021b      	lsleq	r3, r3, #8
 8006eb6:	3008      	addeq	r0, #8
 8006eb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ebc:	bf04      	itt	eq
 8006ebe:	011b      	lsleq	r3, r3, #4
 8006ec0:	3004      	addeq	r0, #4
 8006ec2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ec6:	bf04      	itt	eq
 8006ec8:	009b      	lsleq	r3, r3, #2
 8006eca:	3002      	addeq	r0, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	db06      	blt.n	8006ede <__hi0bits+0x3c>
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	d503      	bpl.n	8006edc <__hi0bits+0x3a>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	4770      	bx	lr
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e7e8      	b.n	8006eae <__hi0bits+0xc>
 8006edc:	2020      	movs	r0, #32
 8006ede:	4770      	bx	lr

08006ee0 <__lo0bits>:
 8006ee0:	6803      	ldr	r3, [r0, #0]
 8006ee2:	f013 0207 	ands.w	r2, r3, #7
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	d00b      	beq.n	8006f02 <__lo0bits+0x22>
 8006eea:	07da      	lsls	r2, r3, #31
 8006eec:	d423      	bmi.n	8006f36 <__lo0bits+0x56>
 8006eee:	0798      	lsls	r0, r3, #30
 8006ef0:	bf49      	itett	mi
 8006ef2:	085b      	lsrmi	r3, r3, #1
 8006ef4:	089b      	lsrpl	r3, r3, #2
 8006ef6:	2001      	movmi	r0, #1
 8006ef8:	600b      	strmi	r3, [r1, #0]
 8006efa:	bf5c      	itt	pl
 8006efc:	600b      	strpl	r3, [r1, #0]
 8006efe:	2002      	movpl	r0, #2
 8006f00:	4770      	bx	lr
 8006f02:	b298      	uxth	r0, r3
 8006f04:	b9a8      	cbnz	r0, 8006f32 <__lo0bits+0x52>
 8006f06:	0c1b      	lsrs	r3, r3, #16
 8006f08:	2010      	movs	r0, #16
 8006f0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f0e:	bf04      	itt	eq
 8006f10:	0a1b      	lsreq	r3, r3, #8
 8006f12:	3008      	addeq	r0, #8
 8006f14:	071a      	lsls	r2, r3, #28
 8006f16:	bf04      	itt	eq
 8006f18:	091b      	lsreq	r3, r3, #4
 8006f1a:	3004      	addeq	r0, #4
 8006f1c:	079a      	lsls	r2, r3, #30
 8006f1e:	bf04      	itt	eq
 8006f20:	089b      	lsreq	r3, r3, #2
 8006f22:	3002      	addeq	r0, #2
 8006f24:	07da      	lsls	r2, r3, #31
 8006f26:	d402      	bmi.n	8006f2e <__lo0bits+0x4e>
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	d006      	beq.n	8006f3a <__lo0bits+0x5a>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	600b      	str	r3, [r1, #0]
 8006f30:	4770      	bx	lr
 8006f32:	4610      	mov	r0, r2
 8006f34:	e7e9      	b.n	8006f0a <__lo0bits+0x2a>
 8006f36:	2000      	movs	r0, #0
 8006f38:	4770      	bx	lr
 8006f3a:	2020      	movs	r0, #32
 8006f3c:	4770      	bx	lr

08006f3e <__i2b>:
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	460c      	mov	r4, r1
 8006f42:	2101      	movs	r1, #1
 8006f44:	f7ff ff27 	bl	8006d96 <_Balloc>
 8006f48:	2201      	movs	r2, #1
 8006f4a:	6144      	str	r4, [r0, #20]
 8006f4c:	6102      	str	r2, [r0, #16]
 8006f4e:	bd10      	pop	{r4, pc}

08006f50 <__multiply>:
 8006f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	4614      	mov	r4, r2
 8006f56:	690a      	ldr	r2, [r1, #16]
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	bfb8      	it	lt
 8006f5e:	460b      	movlt	r3, r1
 8006f60:	4689      	mov	r9, r1
 8006f62:	bfbc      	itt	lt
 8006f64:	46a1      	movlt	r9, r4
 8006f66:	461c      	movlt	r4, r3
 8006f68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006f74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f78:	eb07 060a 	add.w	r6, r7, sl
 8006f7c:	429e      	cmp	r6, r3
 8006f7e:	bfc8      	it	gt
 8006f80:	3101      	addgt	r1, #1
 8006f82:	f7ff ff08 	bl	8006d96 <_Balloc>
 8006f86:	f100 0514 	add.w	r5, r0, #20
 8006f8a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f8e:	462b      	mov	r3, r5
 8006f90:	2200      	movs	r2, #0
 8006f92:	4543      	cmp	r3, r8
 8006f94:	d316      	bcc.n	8006fc4 <__multiply+0x74>
 8006f96:	f104 0214 	add.w	r2, r4, #20
 8006f9a:	f109 0114 	add.w	r1, r9, #20
 8006f9e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006fa2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	9c01      	ldr	r4, [sp, #4]
 8006faa:	4294      	cmp	r4, r2
 8006fac:	4613      	mov	r3, r2
 8006fae:	d80c      	bhi.n	8006fca <__multiply+0x7a>
 8006fb0:	2e00      	cmp	r6, #0
 8006fb2:	dd03      	ble.n	8006fbc <__multiply+0x6c>
 8006fb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d054      	beq.n	8007066 <__multiply+0x116>
 8006fbc:	6106      	str	r6, [r0, #16]
 8006fbe:	b003      	add	sp, #12
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	f843 2b04 	str.w	r2, [r3], #4
 8006fc8:	e7e3      	b.n	8006f92 <__multiply+0x42>
 8006fca:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fce:	3204      	adds	r2, #4
 8006fd0:	f1ba 0f00 	cmp.w	sl, #0
 8006fd4:	d020      	beq.n	8007018 <__multiply+0xc8>
 8006fd6:	46ae      	mov	lr, r5
 8006fd8:	4689      	mov	r9, r1
 8006fda:	f04f 0c00 	mov.w	ip, #0
 8006fde:	f859 4b04 	ldr.w	r4, [r9], #4
 8006fe2:	f8be b000 	ldrh.w	fp, [lr]
 8006fe6:	b2a3      	uxth	r3, r4
 8006fe8:	fb0a b303 	mla	r3, sl, r3, fp
 8006fec:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006ff0:	f8de 4000 	ldr.w	r4, [lr]
 8006ff4:	4463      	add	r3, ip
 8006ff6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006ffa:	fb0a c40b 	mla	r4, sl, fp, ip
 8006ffe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007002:	b29b      	uxth	r3, r3
 8007004:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007008:	454f      	cmp	r7, r9
 800700a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800700e:	f84e 3b04 	str.w	r3, [lr], #4
 8007012:	d8e4      	bhi.n	8006fde <__multiply+0x8e>
 8007014:	f8ce c000 	str.w	ip, [lr]
 8007018:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800701c:	f1b9 0f00 	cmp.w	r9, #0
 8007020:	d01f      	beq.n	8007062 <__multiply+0x112>
 8007022:	682b      	ldr	r3, [r5, #0]
 8007024:	46ae      	mov	lr, r5
 8007026:	468c      	mov	ip, r1
 8007028:	f04f 0a00 	mov.w	sl, #0
 800702c:	f8bc 4000 	ldrh.w	r4, [ip]
 8007030:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007034:	fb09 b404 	mla	r4, r9, r4, fp
 8007038:	44a2      	add	sl, r4
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007040:	f84e 3b04 	str.w	r3, [lr], #4
 8007044:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007048:	f8be 4000 	ldrh.w	r4, [lr]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	fb09 4303 	mla	r3, r9, r3, r4
 8007052:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007056:	4567      	cmp	r7, ip
 8007058:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800705c:	d8e6      	bhi.n	800702c <__multiply+0xdc>
 800705e:	f8ce 3000 	str.w	r3, [lr]
 8007062:	3504      	adds	r5, #4
 8007064:	e7a0      	b.n	8006fa8 <__multiply+0x58>
 8007066:	3e01      	subs	r6, #1
 8007068:	e7a2      	b.n	8006fb0 <__multiply+0x60>
	...

0800706c <__pow5mult>:
 800706c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007070:	4615      	mov	r5, r2
 8007072:	f012 0203 	ands.w	r2, r2, #3
 8007076:	4606      	mov	r6, r0
 8007078:	460f      	mov	r7, r1
 800707a:	d007      	beq.n	800708c <__pow5mult+0x20>
 800707c:	3a01      	subs	r2, #1
 800707e:	4c21      	ldr	r4, [pc, #132]	; (8007104 <__pow5mult+0x98>)
 8007080:	2300      	movs	r3, #0
 8007082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007086:	f7ff fed1 	bl	8006e2c <__multadd>
 800708a:	4607      	mov	r7, r0
 800708c:	10ad      	asrs	r5, r5, #2
 800708e:	d035      	beq.n	80070fc <__pow5mult+0x90>
 8007090:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007092:	b93c      	cbnz	r4, 80070a4 <__pow5mult+0x38>
 8007094:	2010      	movs	r0, #16
 8007096:	f7ff fe6b 	bl	8006d70 <malloc>
 800709a:	6270      	str	r0, [r6, #36]	; 0x24
 800709c:	6044      	str	r4, [r0, #4]
 800709e:	6084      	str	r4, [r0, #8]
 80070a0:	6004      	str	r4, [r0, #0]
 80070a2:	60c4      	str	r4, [r0, #12]
 80070a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070ac:	b94c      	cbnz	r4, 80070c2 <__pow5mult+0x56>
 80070ae:	f240 2171 	movw	r1, #625	; 0x271
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7ff ff43 	bl	8006f3e <__i2b>
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80070be:	4604      	mov	r4, r0
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	07eb      	lsls	r3, r5, #31
 80070c8:	d50a      	bpl.n	80070e0 <__pow5mult+0x74>
 80070ca:	4639      	mov	r1, r7
 80070cc:	4622      	mov	r2, r4
 80070ce:	4630      	mov	r0, r6
 80070d0:	f7ff ff3e 	bl	8006f50 <__multiply>
 80070d4:	4639      	mov	r1, r7
 80070d6:	4681      	mov	r9, r0
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff fe90 	bl	8006dfe <_Bfree>
 80070de:	464f      	mov	r7, r9
 80070e0:	106d      	asrs	r5, r5, #1
 80070e2:	d00b      	beq.n	80070fc <__pow5mult+0x90>
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	b938      	cbnz	r0, 80070f8 <__pow5mult+0x8c>
 80070e8:	4622      	mov	r2, r4
 80070ea:	4621      	mov	r1, r4
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff ff2f 	bl	8006f50 <__multiply>
 80070f2:	6020      	str	r0, [r4, #0]
 80070f4:	f8c0 8000 	str.w	r8, [r0]
 80070f8:	4604      	mov	r4, r0
 80070fa:	e7e4      	b.n	80070c6 <__pow5mult+0x5a>
 80070fc:	4638      	mov	r0, r7
 80070fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007102:	bf00      	nop
 8007104:	080086f8 	.word	0x080086f8

08007108 <__lshift>:
 8007108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	460c      	mov	r4, r1
 800710e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	6849      	ldr	r1, [r1, #4]
 8007116:	eb0a 0903 	add.w	r9, sl, r3
 800711a:	68a3      	ldr	r3, [r4, #8]
 800711c:	4607      	mov	r7, r0
 800711e:	4616      	mov	r6, r2
 8007120:	f109 0501 	add.w	r5, r9, #1
 8007124:	42ab      	cmp	r3, r5
 8007126:	db31      	blt.n	800718c <__lshift+0x84>
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff fe34 	bl	8006d96 <_Balloc>
 800712e:	2200      	movs	r2, #0
 8007130:	4680      	mov	r8, r0
 8007132:	f100 0314 	add.w	r3, r0, #20
 8007136:	4611      	mov	r1, r2
 8007138:	4552      	cmp	r2, sl
 800713a:	db2a      	blt.n	8007192 <__lshift+0x8a>
 800713c:	6920      	ldr	r0, [r4, #16]
 800713e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007142:	f104 0114 	add.w	r1, r4, #20
 8007146:	f016 021f 	ands.w	r2, r6, #31
 800714a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800714e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007152:	d022      	beq.n	800719a <__lshift+0x92>
 8007154:	f1c2 0c20 	rsb	ip, r2, #32
 8007158:	2000      	movs	r0, #0
 800715a:	680e      	ldr	r6, [r1, #0]
 800715c:	4096      	lsls	r6, r2
 800715e:	4330      	orrs	r0, r6
 8007160:	f843 0b04 	str.w	r0, [r3], #4
 8007164:	f851 0b04 	ldr.w	r0, [r1], #4
 8007168:	458e      	cmp	lr, r1
 800716a:	fa20 f00c 	lsr.w	r0, r0, ip
 800716e:	d8f4      	bhi.n	800715a <__lshift+0x52>
 8007170:	6018      	str	r0, [r3, #0]
 8007172:	b108      	cbz	r0, 8007178 <__lshift+0x70>
 8007174:	f109 0502 	add.w	r5, r9, #2
 8007178:	3d01      	subs	r5, #1
 800717a:	4638      	mov	r0, r7
 800717c:	f8c8 5010 	str.w	r5, [r8, #16]
 8007180:	4621      	mov	r1, r4
 8007182:	f7ff fe3c 	bl	8006dfe <_Bfree>
 8007186:	4640      	mov	r0, r8
 8007188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718c:	3101      	adds	r1, #1
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	e7c8      	b.n	8007124 <__lshift+0x1c>
 8007192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007196:	3201      	adds	r2, #1
 8007198:	e7ce      	b.n	8007138 <__lshift+0x30>
 800719a:	3b04      	subs	r3, #4
 800719c:	f851 2b04 	ldr.w	r2, [r1], #4
 80071a0:	f843 2f04 	str.w	r2, [r3, #4]!
 80071a4:	458e      	cmp	lr, r1
 80071a6:	d8f9      	bhi.n	800719c <__lshift+0x94>
 80071a8:	e7e6      	b.n	8007178 <__lshift+0x70>

080071aa <__mcmp>:
 80071aa:	6903      	ldr	r3, [r0, #16]
 80071ac:	690a      	ldr	r2, [r1, #16]
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	b530      	push	{r4, r5, lr}
 80071b2:	d10c      	bne.n	80071ce <__mcmp+0x24>
 80071b4:	0092      	lsls	r2, r2, #2
 80071b6:	3014      	adds	r0, #20
 80071b8:	3114      	adds	r1, #20
 80071ba:	1884      	adds	r4, r0, r2
 80071bc:	4411      	add	r1, r2
 80071be:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071c6:	4295      	cmp	r5, r2
 80071c8:	d003      	beq.n	80071d2 <__mcmp+0x28>
 80071ca:	d305      	bcc.n	80071d8 <__mcmp+0x2e>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4618      	mov	r0, r3
 80071d0:	bd30      	pop	{r4, r5, pc}
 80071d2:	42a0      	cmp	r0, r4
 80071d4:	d3f3      	bcc.n	80071be <__mcmp+0x14>
 80071d6:	e7fa      	b.n	80071ce <__mcmp+0x24>
 80071d8:	f04f 33ff 	mov.w	r3, #4294967295
 80071dc:	e7f7      	b.n	80071ce <__mcmp+0x24>

080071de <__mdiff>:
 80071de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e2:	460d      	mov	r5, r1
 80071e4:	4607      	mov	r7, r0
 80071e6:	4611      	mov	r1, r2
 80071e8:	4628      	mov	r0, r5
 80071ea:	4614      	mov	r4, r2
 80071ec:	f7ff ffdd 	bl	80071aa <__mcmp>
 80071f0:	1e06      	subs	r6, r0, #0
 80071f2:	d108      	bne.n	8007206 <__mdiff+0x28>
 80071f4:	4631      	mov	r1, r6
 80071f6:	4638      	mov	r0, r7
 80071f8:	f7ff fdcd 	bl	8006d96 <_Balloc>
 80071fc:	2301      	movs	r3, #1
 80071fe:	6103      	str	r3, [r0, #16]
 8007200:	6146      	str	r6, [r0, #20]
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	bfa4      	itt	ge
 8007208:	4623      	movge	r3, r4
 800720a:	462c      	movge	r4, r5
 800720c:	4638      	mov	r0, r7
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	bfa6      	itte	ge
 8007212:	461d      	movge	r5, r3
 8007214:	2600      	movge	r6, #0
 8007216:	2601      	movlt	r6, #1
 8007218:	f7ff fdbd 	bl	8006d96 <_Balloc>
 800721c:	692b      	ldr	r3, [r5, #16]
 800721e:	60c6      	str	r6, [r0, #12]
 8007220:	6926      	ldr	r6, [r4, #16]
 8007222:	f105 0914 	add.w	r9, r5, #20
 8007226:	f104 0214 	add.w	r2, r4, #20
 800722a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800722e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007232:	f100 0514 	add.w	r5, r0, #20
 8007236:	f04f 0c00 	mov.w	ip, #0
 800723a:	f852 ab04 	ldr.w	sl, [r2], #4
 800723e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007242:	fa1c f18a 	uxtah	r1, ip, sl
 8007246:	b2a3      	uxth	r3, r4
 8007248:	1ac9      	subs	r1, r1, r3
 800724a:	0c23      	lsrs	r3, r4, #16
 800724c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007250:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007254:	b289      	uxth	r1, r1
 8007256:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800725a:	45c8      	cmp	r8, r9
 800725c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007260:	4696      	mov	lr, r2
 8007262:	f845 3b04 	str.w	r3, [r5], #4
 8007266:	d8e8      	bhi.n	800723a <__mdiff+0x5c>
 8007268:	45be      	cmp	lr, r7
 800726a:	d305      	bcc.n	8007278 <__mdiff+0x9a>
 800726c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007270:	b18b      	cbz	r3, 8007296 <__mdiff+0xb8>
 8007272:	6106      	str	r6, [r0, #16]
 8007274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007278:	f85e 1b04 	ldr.w	r1, [lr], #4
 800727c:	fa1c f381 	uxtah	r3, ip, r1
 8007280:	141a      	asrs	r2, r3, #16
 8007282:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007286:	b29b      	uxth	r3, r3
 8007288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007290:	f845 3b04 	str.w	r3, [r5], #4
 8007294:	e7e8      	b.n	8007268 <__mdiff+0x8a>
 8007296:	3e01      	subs	r6, #1
 8007298:	e7e8      	b.n	800726c <__mdiff+0x8e>

0800729a <__d2b>:
 800729a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800729e:	460e      	mov	r6, r1
 80072a0:	2101      	movs	r1, #1
 80072a2:	ec59 8b10 	vmov	r8, r9, d0
 80072a6:	4615      	mov	r5, r2
 80072a8:	f7ff fd75 	bl	8006d96 <_Balloc>
 80072ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072b0:	4607      	mov	r7, r0
 80072b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072b6:	bb34      	cbnz	r4, 8007306 <__d2b+0x6c>
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	f1b8 0f00 	cmp.w	r8, #0
 80072be:	d027      	beq.n	8007310 <__d2b+0x76>
 80072c0:	a802      	add	r0, sp, #8
 80072c2:	f840 8d08 	str.w	r8, [r0, #-8]!
 80072c6:	f7ff fe0b 	bl	8006ee0 <__lo0bits>
 80072ca:	9900      	ldr	r1, [sp, #0]
 80072cc:	b1f0      	cbz	r0, 800730c <__d2b+0x72>
 80072ce:	9a01      	ldr	r2, [sp, #4]
 80072d0:	f1c0 0320 	rsb	r3, r0, #32
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	430b      	orrs	r3, r1
 80072da:	40c2      	lsrs	r2, r0
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	9201      	str	r2, [sp, #4]
 80072e0:	9b01      	ldr	r3, [sp, #4]
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bf14      	ite	ne
 80072e8:	2102      	movne	r1, #2
 80072ea:	2101      	moveq	r1, #1
 80072ec:	6139      	str	r1, [r7, #16]
 80072ee:	b1c4      	cbz	r4, 8007322 <__d2b+0x88>
 80072f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80072f4:	4404      	add	r4, r0
 80072f6:	6034      	str	r4, [r6, #0]
 80072f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072fc:	6028      	str	r0, [r5, #0]
 80072fe:	4638      	mov	r0, r7
 8007300:	b003      	add	sp, #12
 8007302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730a:	e7d5      	b.n	80072b8 <__d2b+0x1e>
 800730c:	6179      	str	r1, [r7, #20]
 800730e:	e7e7      	b.n	80072e0 <__d2b+0x46>
 8007310:	a801      	add	r0, sp, #4
 8007312:	f7ff fde5 	bl	8006ee0 <__lo0bits>
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	2101      	movs	r1, #1
 800731c:	6139      	str	r1, [r7, #16]
 800731e:	3020      	adds	r0, #32
 8007320:	e7e5      	b.n	80072ee <__d2b+0x54>
 8007322:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007326:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800732a:	6030      	str	r0, [r6, #0]
 800732c:	6918      	ldr	r0, [r3, #16]
 800732e:	f7ff fdb8 	bl	8006ea2 <__hi0bits>
 8007332:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007336:	e7e1      	b.n	80072fc <__d2b+0x62>

08007338 <_calloc_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	fb02 f401 	mul.w	r4, r2, r1
 800733e:	4621      	mov	r1, r4
 8007340:	f000 f856 	bl	80073f0 <_malloc_r>
 8007344:	4605      	mov	r5, r0
 8007346:	b118      	cbz	r0, 8007350 <_calloc_r+0x18>
 8007348:	4622      	mov	r2, r4
 800734a:	2100      	movs	r1, #0
 800734c:	f7fd ff16 	bl	800517c <memset>
 8007350:	4628      	mov	r0, r5
 8007352:	bd38      	pop	{r3, r4, r5, pc}

08007354 <_free_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	2900      	cmp	r1, #0
 800735a:	d045      	beq.n	80073e8 <_free_r+0x94>
 800735c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007360:	1f0c      	subs	r4, r1, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	bfb8      	it	lt
 8007366:	18e4      	addlt	r4, r4, r3
 8007368:	f000 fa9c 	bl	80078a4 <__malloc_lock>
 800736c:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <_free_r+0x98>)
 800736e:	6813      	ldr	r3, [r2, #0]
 8007370:	4610      	mov	r0, r2
 8007372:	b933      	cbnz	r3, 8007382 <_free_r+0x2e>
 8007374:	6063      	str	r3, [r4, #4]
 8007376:	6014      	str	r4, [r2, #0]
 8007378:	4628      	mov	r0, r5
 800737a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800737e:	f000 ba92 	b.w	80078a6 <__malloc_unlock>
 8007382:	42a3      	cmp	r3, r4
 8007384:	d90c      	bls.n	80073a0 <_free_r+0x4c>
 8007386:	6821      	ldr	r1, [r4, #0]
 8007388:	1862      	adds	r2, r4, r1
 800738a:	4293      	cmp	r3, r2
 800738c:	bf04      	itt	eq
 800738e:	681a      	ldreq	r2, [r3, #0]
 8007390:	685b      	ldreq	r3, [r3, #4]
 8007392:	6063      	str	r3, [r4, #4]
 8007394:	bf04      	itt	eq
 8007396:	1852      	addeq	r2, r2, r1
 8007398:	6022      	streq	r2, [r4, #0]
 800739a:	6004      	str	r4, [r0, #0]
 800739c:	e7ec      	b.n	8007378 <_free_r+0x24>
 800739e:	4613      	mov	r3, r2
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	b10a      	cbz	r2, 80073a8 <_free_r+0x54>
 80073a4:	42a2      	cmp	r2, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x4a>
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	1858      	adds	r0, r3, r1
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x74>
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	4401      	add	r1, r0
 80073b4:	1858      	adds	r0, r3, r1
 80073b6:	4282      	cmp	r2, r0
 80073b8:	6019      	str	r1, [r3, #0]
 80073ba:	d1dd      	bne.n	8007378 <_free_r+0x24>
 80073bc:	6810      	ldr	r0, [r2, #0]
 80073be:	6852      	ldr	r2, [r2, #4]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	4401      	add	r1, r0
 80073c4:	6019      	str	r1, [r3, #0]
 80073c6:	e7d7      	b.n	8007378 <_free_r+0x24>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x7c>
 80073ca:	230c      	movs	r3, #12
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	e7d3      	b.n	8007378 <_free_r+0x24>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	1821      	adds	r1, r4, r0
 80073d4:	428a      	cmp	r2, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6811      	ldreq	r1, [r2, #0]
 80073da:	6852      	ldreq	r2, [r2, #4]
 80073dc:	6062      	str	r2, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1809      	addeq	r1, r1, r0
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	605c      	str	r4, [r3, #4]
 80073e6:	e7c7      	b.n	8007378 <_free_r+0x24>
 80073e8:	bd38      	pop	{r3, r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	20000200 	.word	0x20000200

080073f0 <_malloc_r>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	1ccd      	adds	r5, r1, #3
 80073f4:	f025 0503 	bic.w	r5, r5, #3
 80073f8:	3508      	adds	r5, #8
 80073fa:	2d0c      	cmp	r5, #12
 80073fc:	bf38      	it	cc
 80073fe:	250c      	movcc	r5, #12
 8007400:	2d00      	cmp	r5, #0
 8007402:	4606      	mov	r6, r0
 8007404:	db01      	blt.n	800740a <_malloc_r+0x1a>
 8007406:	42a9      	cmp	r1, r5
 8007408:	d903      	bls.n	8007412 <_malloc_r+0x22>
 800740a:	230c      	movs	r3, #12
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	2000      	movs	r0, #0
 8007410:	bd70      	pop	{r4, r5, r6, pc}
 8007412:	f000 fa47 	bl	80078a4 <__malloc_lock>
 8007416:	4a23      	ldr	r2, [pc, #140]	; (80074a4 <_malloc_r+0xb4>)
 8007418:	6814      	ldr	r4, [r2, #0]
 800741a:	4621      	mov	r1, r4
 800741c:	b991      	cbnz	r1, 8007444 <_malloc_r+0x54>
 800741e:	4c22      	ldr	r4, [pc, #136]	; (80074a8 <_malloc_r+0xb8>)
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	b91b      	cbnz	r3, 800742c <_malloc_r+0x3c>
 8007424:	4630      	mov	r0, r6
 8007426:	f000 f981 	bl	800772c <_sbrk_r>
 800742a:	6020      	str	r0, [r4, #0]
 800742c:	4629      	mov	r1, r5
 800742e:	4630      	mov	r0, r6
 8007430:	f000 f97c 	bl	800772c <_sbrk_r>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d126      	bne.n	8007486 <_malloc_r+0x96>
 8007438:	230c      	movs	r3, #12
 800743a:	6033      	str	r3, [r6, #0]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 fa32 	bl	80078a6 <__malloc_unlock>
 8007442:	e7e4      	b.n	800740e <_malloc_r+0x1e>
 8007444:	680b      	ldr	r3, [r1, #0]
 8007446:	1b5b      	subs	r3, r3, r5
 8007448:	d41a      	bmi.n	8007480 <_malloc_r+0x90>
 800744a:	2b0b      	cmp	r3, #11
 800744c:	d90f      	bls.n	800746e <_malloc_r+0x7e>
 800744e:	600b      	str	r3, [r1, #0]
 8007450:	50cd      	str	r5, [r1, r3]
 8007452:	18cc      	adds	r4, r1, r3
 8007454:	4630      	mov	r0, r6
 8007456:	f000 fa26 	bl	80078a6 <__malloc_unlock>
 800745a:	f104 000b 	add.w	r0, r4, #11
 800745e:	1d23      	adds	r3, r4, #4
 8007460:	f020 0007 	bic.w	r0, r0, #7
 8007464:	1ac3      	subs	r3, r0, r3
 8007466:	d01b      	beq.n	80074a0 <_malloc_r+0xb0>
 8007468:	425a      	negs	r2, r3
 800746a:	50e2      	str	r2, [r4, r3]
 800746c:	bd70      	pop	{r4, r5, r6, pc}
 800746e:	428c      	cmp	r4, r1
 8007470:	bf0d      	iteet	eq
 8007472:	6863      	ldreq	r3, [r4, #4]
 8007474:	684b      	ldrne	r3, [r1, #4]
 8007476:	6063      	strne	r3, [r4, #4]
 8007478:	6013      	streq	r3, [r2, #0]
 800747a:	bf18      	it	ne
 800747c:	460c      	movne	r4, r1
 800747e:	e7e9      	b.n	8007454 <_malloc_r+0x64>
 8007480:	460c      	mov	r4, r1
 8007482:	6849      	ldr	r1, [r1, #4]
 8007484:	e7ca      	b.n	800741c <_malloc_r+0x2c>
 8007486:	1cc4      	adds	r4, r0, #3
 8007488:	f024 0403 	bic.w	r4, r4, #3
 800748c:	42a0      	cmp	r0, r4
 800748e:	d005      	beq.n	800749c <_malloc_r+0xac>
 8007490:	1a21      	subs	r1, r4, r0
 8007492:	4630      	mov	r0, r6
 8007494:	f000 f94a 	bl	800772c <_sbrk_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d0cd      	beq.n	8007438 <_malloc_r+0x48>
 800749c:	6025      	str	r5, [r4, #0]
 800749e:	e7d9      	b.n	8007454 <_malloc_r+0x64>
 80074a0:	bd70      	pop	{r4, r5, r6, pc}
 80074a2:	bf00      	nop
 80074a4:	20000200 	.word	0x20000200
 80074a8:	20000204 	.word	0x20000204

080074ac <__sfputc_r>:
 80074ac:	6893      	ldr	r3, [r2, #8]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	b410      	push	{r4}
 80074b4:	6093      	str	r3, [r2, #8]
 80074b6:	da09      	bge.n	80074cc <__sfputc_r+0x20>
 80074b8:	6994      	ldr	r4, [r2, #24]
 80074ba:	42a3      	cmp	r3, r4
 80074bc:	db02      	blt.n	80074c4 <__sfputc_r+0x18>
 80074be:	b2cb      	uxtb	r3, r1
 80074c0:	2b0a      	cmp	r3, #10
 80074c2:	d103      	bne.n	80074cc <__sfputc_r+0x20>
 80074c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c8:	f7fe bb48 	b.w	8005b5c <__swbuf_r>
 80074cc:	6813      	ldr	r3, [r2, #0]
 80074ce:	1c58      	adds	r0, r3, #1
 80074d0:	6010      	str	r0, [r2, #0]
 80074d2:	7019      	strb	r1, [r3, #0]
 80074d4:	b2c8      	uxtb	r0, r1
 80074d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074da:	4770      	bx	lr

080074dc <__sfputs_r>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	4614      	mov	r4, r2
 80074e4:	18d5      	adds	r5, r2, r3
 80074e6:	42ac      	cmp	r4, r5
 80074e8:	d101      	bne.n	80074ee <__sfputs_r+0x12>
 80074ea:	2000      	movs	r0, #0
 80074ec:	e007      	b.n	80074fe <__sfputs_r+0x22>
 80074ee:	463a      	mov	r2, r7
 80074f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff ffd9 	bl	80074ac <__sfputc_r>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	d1f3      	bne.n	80074e6 <__sfputs_r+0xa>
 80074fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007500 <_vfiprintf_r>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	b09d      	sub	sp, #116	; 0x74
 8007506:	460c      	mov	r4, r1
 8007508:	4617      	mov	r7, r2
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	4606      	mov	r6, r0
 800750e:	b118      	cbz	r0, 8007518 <_vfiprintf_r+0x18>
 8007510:	6983      	ldr	r3, [r0, #24]
 8007512:	b90b      	cbnz	r3, 8007518 <_vfiprintf_r+0x18>
 8007514:	f7ff fb30 	bl	8006b78 <__sinit>
 8007518:	4b7c      	ldr	r3, [pc, #496]	; (800770c <_vfiprintf_r+0x20c>)
 800751a:	429c      	cmp	r4, r3
 800751c:	d157      	bne.n	80075ce <_vfiprintf_r+0xce>
 800751e:	6874      	ldr	r4, [r6, #4]
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	0718      	lsls	r0, r3, #28
 8007524:	d55d      	bpl.n	80075e2 <_vfiprintf_r+0xe2>
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05a      	beq.n	80075e2 <_vfiprintf_r+0xe2>
 800752c:	2300      	movs	r3, #0
 800752e:	9309      	str	r3, [sp, #36]	; 0x24
 8007530:	2320      	movs	r3, #32
 8007532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007536:	2330      	movs	r3, #48	; 0x30
 8007538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800753c:	f04f 0b01 	mov.w	fp, #1
 8007540:	46b8      	mov	r8, r7
 8007542:	4645      	mov	r5, r8
 8007544:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d155      	bne.n	80075f8 <_vfiprintf_r+0xf8>
 800754c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007550:	d00b      	beq.n	800756a <_vfiprintf_r+0x6a>
 8007552:	4653      	mov	r3, sl
 8007554:	463a      	mov	r2, r7
 8007556:	4621      	mov	r1, r4
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff ffbf 	bl	80074dc <__sfputs_r>
 800755e:	3001      	adds	r0, #1
 8007560:	f000 80c4 	beq.w	80076ec <_vfiprintf_r+0x1ec>
 8007564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007566:	4453      	add	r3, sl
 8007568:	9309      	str	r3, [sp, #36]	; 0x24
 800756a:	f898 3000 	ldrb.w	r3, [r8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 80bc 	beq.w	80076ec <_vfiprintf_r+0x1ec>
 8007574:	2300      	movs	r3, #0
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	9307      	str	r3, [sp, #28]
 800757e:	9205      	str	r2, [sp, #20]
 8007580:	9306      	str	r3, [sp, #24]
 8007582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007586:	931a      	str	r3, [sp, #104]	; 0x68
 8007588:	2205      	movs	r2, #5
 800758a:	7829      	ldrb	r1, [r5, #0]
 800758c:	4860      	ldr	r0, [pc, #384]	; (8007710 <_vfiprintf_r+0x210>)
 800758e:	f7f8 fe27 	bl	80001e0 <memchr>
 8007592:	f105 0801 	add.w	r8, r5, #1
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	2800      	cmp	r0, #0
 800759a:	d131      	bne.n	8007600 <_vfiprintf_r+0x100>
 800759c:	06d9      	lsls	r1, r3, #27
 800759e:	bf44      	itt	mi
 80075a0:	2220      	movmi	r2, #32
 80075a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075a6:	071a      	lsls	r2, r3, #28
 80075a8:	bf44      	itt	mi
 80075aa:	222b      	movmi	r2, #43	; 0x2b
 80075ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075b0:	782a      	ldrb	r2, [r5, #0]
 80075b2:	2a2a      	cmp	r2, #42	; 0x2a
 80075b4:	d02c      	beq.n	8007610 <_vfiprintf_r+0x110>
 80075b6:	9a07      	ldr	r2, [sp, #28]
 80075b8:	2100      	movs	r1, #0
 80075ba:	200a      	movs	r0, #10
 80075bc:	46a8      	mov	r8, r5
 80075be:	3501      	adds	r5, #1
 80075c0:	f898 3000 	ldrb.w	r3, [r8]
 80075c4:	3b30      	subs	r3, #48	; 0x30
 80075c6:	2b09      	cmp	r3, #9
 80075c8:	d96d      	bls.n	80076a6 <_vfiprintf_r+0x1a6>
 80075ca:	b371      	cbz	r1, 800762a <_vfiprintf_r+0x12a>
 80075cc:	e026      	b.n	800761c <_vfiprintf_r+0x11c>
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <_vfiprintf_r+0x214>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d101      	bne.n	80075d8 <_vfiprintf_r+0xd8>
 80075d4:	68b4      	ldr	r4, [r6, #8]
 80075d6:	e7a3      	b.n	8007520 <_vfiprintf_r+0x20>
 80075d8:	4b4f      	ldr	r3, [pc, #316]	; (8007718 <_vfiprintf_r+0x218>)
 80075da:	429c      	cmp	r4, r3
 80075dc:	bf08      	it	eq
 80075de:	68f4      	ldreq	r4, [r6, #12]
 80075e0:	e79e      	b.n	8007520 <_vfiprintf_r+0x20>
 80075e2:	4621      	mov	r1, r4
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7fe fb0b 	bl	8005c00 <__swsetup_r>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d09e      	beq.n	800752c <_vfiprintf_r+0x2c>
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295
 80075f2:	b01d      	add	sp, #116	; 0x74
 80075f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f8:	2b25      	cmp	r3, #37	; 0x25
 80075fa:	d0a7      	beq.n	800754c <_vfiprintf_r+0x4c>
 80075fc:	46a8      	mov	r8, r5
 80075fe:	e7a0      	b.n	8007542 <_vfiprintf_r+0x42>
 8007600:	4a43      	ldr	r2, [pc, #268]	; (8007710 <_vfiprintf_r+0x210>)
 8007602:	1a80      	subs	r0, r0, r2
 8007604:	fa0b f000 	lsl.w	r0, fp, r0
 8007608:	4318      	orrs	r0, r3
 800760a:	9004      	str	r0, [sp, #16]
 800760c:	4645      	mov	r5, r8
 800760e:	e7bb      	b.n	8007588 <_vfiprintf_r+0x88>
 8007610:	9a03      	ldr	r2, [sp, #12]
 8007612:	1d11      	adds	r1, r2, #4
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	2a00      	cmp	r2, #0
 800761a:	db01      	blt.n	8007620 <_vfiprintf_r+0x120>
 800761c:	9207      	str	r2, [sp, #28]
 800761e:	e004      	b.n	800762a <_vfiprintf_r+0x12a>
 8007620:	4252      	negs	r2, r2
 8007622:	f043 0302 	orr.w	r3, r3, #2
 8007626:	9207      	str	r2, [sp, #28]
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	f898 3000 	ldrb.w	r3, [r8]
 800762e:	2b2e      	cmp	r3, #46	; 0x2e
 8007630:	d110      	bne.n	8007654 <_vfiprintf_r+0x154>
 8007632:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007636:	2b2a      	cmp	r3, #42	; 0x2a
 8007638:	f108 0101 	add.w	r1, r8, #1
 800763c:	d137      	bne.n	80076ae <_vfiprintf_r+0x1ae>
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	9203      	str	r2, [sp, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfb8      	it	lt
 800764a:	f04f 33ff 	movlt.w	r3, #4294967295
 800764e:	f108 0802 	add.w	r8, r8, #2
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	4d31      	ldr	r5, [pc, #196]	; (800771c <_vfiprintf_r+0x21c>)
 8007656:	f898 1000 	ldrb.w	r1, [r8]
 800765a:	2203      	movs	r2, #3
 800765c:	4628      	mov	r0, r5
 800765e:	f7f8 fdbf 	bl	80001e0 <memchr>
 8007662:	b140      	cbz	r0, 8007676 <_vfiprintf_r+0x176>
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	1b40      	subs	r0, r0, r5
 8007668:	fa03 f000 	lsl.w	r0, r3, r0
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	4303      	orrs	r3, r0
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	f108 0801 	add.w	r8, r8, #1
 8007676:	f898 1000 	ldrb.w	r1, [r8]
 800767a:	4829      	ldr	r0, [pc, #164]	; (8007720 <_vfiprintf_r+0x220>)
 800767c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007680:	2206      	movs	r2, #6
 8007682:	f108 0701 	add.w	r7, r8, #1
 8007686:	f7f8 fdab 	bl	80001e0 <memchr>
 800768a:	2800      	cmp	r0, #0
 800768c:	d034      	beq.n	80076f8 <_vfiprintf_r+0x1f8>
 800768e:	4b25      	ldr	r3, [pc, #148]	; (8007724 <_vfiprintf_r+0x224>)
 8007690:	bb03      	cbnz	r3, 80076d4 <_vfiprintf_r+0x1d4>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3307      	adds	r3, #7
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	3308      	adds	r3, #8
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a0:	444b      	add	r3, r9
 80076a2:	9309      	str	r3, [sp, #36]	; 0x24
 80076a4:	e74c      	b.n	8007540 <_vfiprintf_r+0x40>
 80076a6:	fb00 3202 	mla	r2, r0, r2, r3
 80076aa:	2101      	movs	r1, #1
 80076ac:	e786      	b.n	80075bc <_vfiprintf_r+0xbc>
 80076ae:	2300      	movs	r3, #0
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	4618      	mov	r0, r3
 80076b4:	250a      	movs	r5, #10
 80076b6:	4688      	mov	r8, r1
 80076b8:	3101      	adds	r1, #1
 80076ba:	f898 2000 	ldrb.w	r2, [r8]
 80076be:	3a30      	subs	r2, #48	; 0x30
 80076c0:	2a09      	cmp	r2, #9
 80076c2:	d903      	bls.n	80076cc <_vfiprintf_r+0x1cc>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0c5      	beq.n	8007654 <_vfiprintf_r+0x154>
 80076c8:	9005      	str	r0, [sp, #20]
 80076ca:	e7c3      	b.n	8007654 <_vfiprintf_r+0x154>
 80076cc:	fb05 2000 	mla	r0, r5, r0, r2
 80076d0:	2301      	movs	r3, #1
 80076d2:	e7f0      	b.n	80076b6 <_vfiprintf_r+0x1b6>
 80076d4:	ab03      	add	r3, sp, #12
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	4622      	mov	r2, r4
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <_vfiprintf_r+0x228>)
 80076dc:	a904      	add	r1, sp, #16
 80076de:	4630      	mov	r0, r6
 80076e0:	f7fd fdea 	bl	80052b8 <_printf_float>
 80076e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076e8:	4681      	mov	r9, r0
 80076ea:	d1d8      	bne.n	800769e <_vfiprintf_r+0x19e>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	065b      	lsls	r3, r3, #25
 80076f0:	f53f af7d 	bmi.w	80075ee <_vfiprintf_r+0xee>
 80076f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f6:	e77c      	b.n	80075f2 <_vfiprintf_r+0xf2>
 80076f8:	ab03      	add	r3, sp, #12
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4622      	mov	r2, r4
 80076fe:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <_vfiprintf_r+0x228>)
 8007700:	a904      	add	r1, sp, #16
 8007702:	4630      	mov	r0, r6
 8007704:	f7fe f88e 	bl	8005824 <_printf_i>
 8007708:	e7ec      	b.n	80076e4 <_vfiprintf_r+0x1e4>
 800770a:	bf00      	nop
 800770c:	080085c8 	.word	0x080085c8
 8007710:	08008704 	.word	0x08008704
 8007714:	080085e8 	.word	0x080085e8
 8007718:	080085a8 	.word	0x080085a8
 800771c:	0800870a 	.word	0x0800870a
 8007720:	0800870e 	.word	0x0800870e
 8007724:	080052b9 	.word	0x080052b9
 8007728:	080074dd 	.word	0x080074dd

0800772c <_sbrk_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4c06      	ldr	r4, [pc, #24]	; (8007748 <_sbrk_r+0x1c>)
 8007730:	2300      	movs	r3, #0
 8007732:	4605      	mov	r5, r0
 8007734:	4608      	mov	r0, r1
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	f7fd f8fe 	bl	8004938 <_sbrk>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_sbrk_r+0x1a>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	b103      	cbz	r3, 8007746 <_sbrk_r+0x1a>
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	200004b0 	.word	0x200004b0

0800774c <__sread>:
 800774c:	b510      	push	{r4, lr}
 800774e:	460c      	mov	r4, r1
 8007750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007754:	f000 f8a8 	bl	80078a8 <_read_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	bfab      	itete	ge
 800775c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800775e:	89a3      	ldrhlt	r3, [r4, #12]
 8007760:	181b      	addge	r3, r3, r0
 8007762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007766:	bfac      	ite	ge
 8007768:	6563      	strge	r3, [r4, #84]	; 0x54
 800776a:	81a3      	strhlt	r3, [r4, #12]
 800776c:	bd10      	pop	{r4, pc}

0800776e <__swrite>:
 800776e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007772:	461f      	mov	r7, r3
 8007774:	898b      	ldrh	r3, [r1, #12]
 8007776:	05db      	lsls	r3, r3, #23
 8007778:	4605      	mov	r5, r0
 800777a:	460c      	mov	r4, r1
 800777c:	4616      	mov	r6, r2
 800777e:	d505      	bpl.n	800778c <__swrite+0x1e>
 8007780:	2302      	movs	r3, #2
 8007782:	2200      	movs	r2, #0
 8007784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007788:	f000 f868 	bl	800785c <_lseek_r>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a2:	f000 b817 	b.w	80077d4 <_write_r>

080077a6 <__sseek>:
 80077a6:	b510      	push	{r4, lr}
 80077a8:	460c      	mov	r4, r1
 80077aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ae:	f000 f855 	bl	800785c <_lseek_r>
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	bf15      	itete	ne
 80077b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077c2:	81a3      	strheq	r3, [r4, #12]
 80077c4:	bf18      	it	ne
 80077c6:	81a3      	strhne	r3, [r4, #12]
 80077c8:	bd10      	pop	{r4, pc}

080077ca <__sclose>:
 80077ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ce:	f000 b813 	b.w	80077f8 <_close_r>
	...

080077d4 <_write_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4c07      	ldr	r4, [pc, #28]	; (80077f4 <_write_r+0x20>)
 80077d8:	4605      	mov	r5, r0
 80077da:	4608      	mov	r0, r1
 80077dc:	4611      	mov	r1, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	6022      	str	r2, [r4, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7fd f89a 	bl	800491c <_write>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_write_r+0x1e>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_write_r+0x1e>
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200004b0 	.word	0x200004b0

080077f8 <_close_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4c06      	ldr	r4, [pc, #24]	; (8007814 <_close_r+0x1c>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4605      	mov	r5, r0
 8007800:	4608      	mov	r0, r1
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	f7fd f8b2 	bl	800496c <_close>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_close_r+0x1a>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	b103      	cbz	r3, 8007812 <_close_r+0x1a>
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	200004b0 	.word	0x200004b0

08007818 <_fstat_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4c07      	ldr	r4, [pc, #28]	; (8007838 <_fstat_r+0x20>)
 800781c:	2300      	movs	r3, #0
 800781e:	4605      	mov	r5, r0
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	f7fd f8a4 	bl	8004972 <_fstat>
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	d102      	bne.n	8007834 <_fstat_r+0x1c>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	b103      	cbz	r3, 8007834 <_fstat_r+0x1c>
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	bf00      	nop
 8007838:	200004b0 	.word	0x200004b0

0800783c <_isatty_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4c06      	ldr	r4, [pc, #24]	; (8007858 <_isatty_r+0x1c>)
 8007840:	2300      	movs	r3, #0
 8007842:	4605      	mov	r5, r0
 8007844:	4608      	mov	r0, r1
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	f7fd f898 	bl	800497c <_isatty>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d102      	bne.n	8007856 <_isatty_r+0x1a>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	b103      	cbz	r3, 8007856 <_isatty_r+0x1a>
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	200004b0 	.word	0x200004b0

0800785c <_lseek_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4c07      	ldr	r4, [pc, #28]	; (800787c <_lseek_r+0x20>)
 8007860:	4605      	mov	r5, r0
 8007862:	4608      	mov	r0, r1
 8007864:	4611      	mov	r1, r2
 8007866:	2200      	movs	r2, #0
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	f7fd f888 	bl	8004980 <_lseek>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_lseek_r+0x1e>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	b103      	cbz	r3, 800787a <_lseek_r+0x1e>
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	200004b0 	.word	0x200004b0

08007880 <__ascii_mbtowc>:
 8007880:	b082      	sub	sp, #8
 8007882:	b901      	cbnz	r1, 8007886 <__ascii_mbtowc+0x6>
 8007884:	a901      	add	r1, sp, #4
 8007886:	b142      	cbz	r2, 800789a <__ascii_mbtowc+0x1a>
 8007888:	b14b      	cbz	r3, 800789e <__ascii_mbtowc+0x1e>
 800788a:	7813      	ldrb	r3, [r2, #0]
 800788c:	600b      	str	r3, [r1, #0]
 800788e:	7812      	ldrb	r2, [r2, #0]
 8007890:	1c10      	adds	r0, r2, #0
 8007892:	bf18      	it	ne
 8007894:	2001      	movne	r0, #1
 8007896:	b002      	add	sp, #8
 8007898:	4770      	bx	lr
 800789a:	4610      	mov	r0, r2
 800789c:	e7fb      	b.n	8007896 <__ascii_mbtowc+0x16>
 800789e:	f06f 0001 	mvn.w	r0, #1
 80078a2:	e7f8      	b.n	8007896 <__ascii_mbtowc+0x16>

080078a4 <__malloc_lock>:
 80078a4:	4770      	bx	lr

080078a6 <__malloc_unlock>:
 80078a6:	4770      	bx	lr

080078a8 <_read_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4c07      	ldr	r4, [pc, #28]	; (80078c8 <_read_r+0x20>)
 80078ac:	4605      	mov	r5, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7fd f822 	bl	8004900 <_read>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_read_r+0x1e>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_read_r+0x1e>
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	200004b0 	.word	0x200004b0

080078cc <__ascii_wctomb>:
 80078cc:	b149      	cbz	r1, 80078e2 <__ascii_wctomb+0x16>
 80078ce:	2aff      	cmp	r2, #255	; 0xff
 80078d0:	bf85      	ittet	hi
 80078d2:	238a      	movhi	r3, #138	; 0x8a
 80078d4:	6003      	strhi	r3, [r0, #0]
 80078d6:	700a      	strbls	r2, [r1, #0]
 80078d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80078dc:	bf98      	it	ls
 80078de:	2001      	movls	r0, #1
 80078e0:	4770      	bx	lr
 80078e2:	4608      	mov	r0, r1
 80078e4:	4770      	bx	lr
	...

080078e8 <asin>:
 80078e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ea:	ed2d 8b02 	vpush	{d8}
 80078ee:	4e26      	ldr	r6, [pc, #152]	; (8007988 <asin+0xa0>)
 80078f0:	b08b      	sub	sp, #44	; 0x2c
 80078f2:	ec55 4b10 	vmov	r4, r5, d0
 80078f6:	f000 f8ab 	bl	8007a50 <__ieee754_asin>
 80078fa:	f996 3000 	ldrsb.w	r3, [r6]
 80078fe:	eeb0 8a40 	vmov.f32	s16, s0
 8007902:	eef0 8a60 	vmov.f32	s17, s1
 8007906:	3301      	adds	r3, #1
 8007908:	d036      	beq.n	8007978 <asin+0x90>
 800790a:	4622      	mov	r2, r4
 800790c:	462b      	mov	r3, r5
 800790e:	4620      	mov	r0, r4
 8007910:	4629      	mov	r1, r5
 8007912:	f7f9 f907 	bl	8000b24 <__aeabi_dcmpun>
 8007916:	4607      	mov	r7, r0
 8007918:	bb70      	cbnz	r0, 8007978 <asin+0x90>
 800791a:	ec45 4b10 	vmov	d0, r4, r5
 800791e:	f000 fdd7 	bl	80084d0 <fabs>
 8007922:	2200      	movs	r2, #0
 8007924:	4b19      	ldr	r3, [pc, #100]	; (800798c <asin+0xa4>)
 8007926:	ec51 0b10 	vmov	r0, r1, d0
 800792a:	f7f9 f8f1 	bl	8000b10 <__aeabi_dcmpgt>
 800792e:	b318      	cbz	r0, 8007978 <asin+0x90>
 8007930:	2301      	movs	r3, #1
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	4816      	ldr	r0, [pc, #88]	; (8007990 <asin+0xa8>)
 8007936:	4b17      	ldr	r3, [pc, #92]	; (8007994 <asin+0xac>)
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	9708      	str	r7, [sp, #32]
 800793c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007940:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007944:	f000 fdd0 	bl	80084e8 <nan>
 8007948:	f996 3000 	ldrsb.w	r3, [r6]
 800794c:	2b02      	cmp	r3, #2
 800794e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007952:	d104      	bne.n	800795e <asin+0x76>
 8007954:	f7fd fbe8 	bl	8005128 <__errno>
 8007958:	2321      	movs	r3, #33	; 0x21
 800795a:	6003      	str	r3, [r0, #0]
 800795c:	e004      	b.n	8007968 <asin+0x80>
 800795e:	4668      	mov	r0, sp
 8007960:	f000 fdbd 	bl	80084de <matherr>
 8007964:	2800      	cmp	r0, #0
 8007966:	d0f5      	beq.n	8007954 <asin+0x6c>
 8007968:	9b08      	ldr	r3, [sp, #32]
 800796a:	b11b      	cbz	r3, 8007974 <asin+0x8c>
 800796c:	f7fd fbdc 	bl	8005128 <__errno>
 8007970:	9b08      	ldr	r3, [sp, #32]
 8007972:	6003      	str	r3, [r0, #0]
 8007974:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007978:	eeb0 0a48 	vmov.f32	s0, s16
 800797c:	eef0 0a68 	vmov.f32	s1, s17
 8007980:	b00b      	add	sp, #44	; 0x2c
 8007982:	ecbd 8b02 	vpop	{d8}
 8007986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007988:	200001dc 	.word	0x200001dc
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	08008547 	.word	0x08008547
 8007994:	08008820 	.word	0x08008820

08007998 <atan2>:
 8007998:	f000 ba66 	b.w	8007e68 <__ieee754_atan2>

0800799c <sqrt>:
 800799c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079a0:	ed2d 8b02 	vpush	{d8}
 80079a4:	b08b      	sub	sp, #44	; 0x2c
 80079a6:	ec55 4b10 	vmov	r4, r5, d0
 80079aa:	f000 fb37 	bl	800801c <__ieee754_sqrt>
 80079ae:	4b26      	ldr	r3, [pc, #152]	; (8007a48 <sqrt+0xac>)
 80079b0:	eeb0 8a40 	vmov.f32	s16, s0
 80079b4:	eef0 8a60 	vmov.f32	s17, s1
 80079b8:	f993 6000 	ldrsb.w	r6, [r3]
 80079bc:	1c73      	adds	r3, r6, #1
 80079be:	d02a      	beq.n	8007a16 <sqrt+0x7a>
 80079c0:	4622      	mov	r2, r4
 80079c2:	462b      	mov	r3, r5
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f9 f8ac 	bl	8000b24 <__aeabi_dcmpun>
 80079cc:	4607      	mov	r7, r0
 80079ce:	bb10      	cbnz	r0, 8007a16 <sqrt+0x7a>
 80079d0:	f04f 0800 	mov.w	r8, #0
 80079d4:	f04f 0900 	mov.w	r9, #0
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f9 f878 	bl	8000ad4 <__aeabi_dcmplt>
 80079e4:	b1b8      	cbz	r0, 8007a16 <sqrt+0x7a>
 80079e6:	2301      	movs	r3, #1
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4b18      	ldr	r3, [pc, #96]	; (8007a4c <sqrt+0xb0>)
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	9708      	str	r7, [sp, #32]
 80079f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80079f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80079f8:	b9b6      	cbnz	r6, 8007a28 <sqrt+0x8c>
 80079fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80079fe:	4668      	mov	r0, sp
 8007a00:	f000 fd6d 	bl	80084de <matherr>
 8007a04:	b1d0      	cbz	r0, 8007a3c <sqrt+0xa0>
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	b11b      	cbz	r3, 8007a12 <sqrt+0x76>
 8007a0a:	f7fd fb8d 	bl	8005128 <__errno>
 8007a0e:	9b08      	ldr	r3, [sp, #32]
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007a16:	eeb0 0a48 	vmov.f32	s0, s16
 8007a1a:	eef0 0a68 	vmov.f32	s1, s17
 8007a1e:	b00b      	add	sp, #44	; 0x2c
 8007a20:	ecbd 8b02 	vpop	{d8}
 8007a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a28:	4642      	mov	r2, r8
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	f7f8 ff08 	bl	8000844 <__aeabi_ddiv>
 8007a34:	2e02      	cmp	r6, #2
 8007a36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a3a:	d1e0      	bne.n	80079fe <sqrt+0x62>
 8007a3c:	f7fd fb74 	bl	8005128 <__errno>
 8007a40:	2321      	movs	r3, #33	; 0x21
 8007a42:	6003      	str	r3, [r0, #0]
 8007a44:	e7df      	b.n	8007a06 <sqrt+0x6a>
 8007a46:	bf00      	nop
 8007a48:	200001dc 	.word	0x200001dc
 8007a4c:	08008825 	.word	0x08008825

08007a50 <__ieee754_asin>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	ec55 4b10 	vmov	r4, r5, d0
 8007a58:	4bcb      	ldr	r3, [pc, #812]	; (8007d88 <__ieee754_asin+0x338>)
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 8007a60:	459b      	cmp	fp, r3
 8007a62:	9501      	str	r5, [sp, #4]
 8007a64:	dd32      	ble.n	8007acc <__ieee754_asin+0x7c>
 8007a66:	ee10 3a10 	vmov	r3, s0
 8007a6a:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 8007a6e:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 8007a72:	ea5b 0303 	orrs.w	r3, fp, r3
 8007a76:	d117      	bne.n	8007aa8 <__ieee754_asin+0x58>
 8007a78:	a3a9      	add	r3, pc, #676	; (adr r3, 8007d20 <__ieee754_asin+0x2d0>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	ee10 0a10 	vmov	r0, s0
 8007a82:	4629      	mov	r1, r5
 8007a84:	f7f8 fdb4 	bl	80005f0 <__aeabi_dmul>
 8007a88:	a3a7      	add	r3, pc, #668	; (adr r3, 8007d28 <__ieee754_asin+0x2d8>)
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	4620      	mov	r0, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	f7f8 fdab 	bl	80005f0 <__aeabi_dmul>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	f7f8 fbf3 	bl	800028c <__adddf3>
 8007aa6:	e00a      	b.n	8007abe <__ieee754_asin+0x6e>
 8007aa8:	ee10 2a10 	vmov	r2, s0
 8007aac:	462b      	mov	r3, r5
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f7f8 fbe9 	bl	8000288 <__aeabi_dsub>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	f7f8 fec3 	bl	8000844 <__aeabi_ddiv>
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	ec45 4b10 	vmov	d0, r4, r5
 8007ac6:	b005      	add	sp, #20
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	4baf      	ldr	r3, [pc, #700]	; (8007d8c <__ieee754_asin+0x33c>)
 8007ace:	459b      	cmp	fp, r3
 8007ad0:	dc11      	bgt.n	8007af6 <__ieee754_asin+0xa6>
 8007ad2:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 8007ad6:	f280 80b0 	bge.w	8007c3a <__ieee754_asin+0x1ea>
 8007ada:	a395      	add	r3, pc, #596	; (adr r3, 8007d30 <__ieee754_asin+0x2e0>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	ee10 0a10 	vmov	r0, s0
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 fbd1 	bl	800028c <__adddf3>
 8007aea:	2200      	movs	r2, #0
 8007aec:	4ba8      	ldr	r3, [pc, #672]	; (8007d90 <__ieee754_asin+0x340>)
 8007aee:	f7f9 f80f 	bl	8000b10 <__aeabi_dcmpgt>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d1e5      	bne.n	8007ac2 <__ieee754_asin+0x72>
 8007af6:	ec45 4b10 	vmov	d0, r4, r5
 8007afa:	f000 fce9 	bl	80084d0 <fabs>
 8007afe:	2000      	movs	r0, #0
 8007b00:	ec53 2b10 	vmov	r2, r3, d0
 8007b04:	49a2      	ldr	r1, [pc, #648]	; (8007d90 <__ieee754_asin+0x340>)
 8007b06:	f7f8 fbbf 	bl	8000288 <__aeabi_dsub>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4ba1      	ldr	r3, [pc, #644]	; (8007d94 <__ieee754_asin+0x344>)
 8007b0e:	f7f8 fd6f 	bl	80005f0 <__aeabi_dmul>
 8007b12:	a389      	add	r3, pc, #548	; (adr r3, 8007d38 <__ieee754_asin+0x2e8>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	f7f8 fd68 	bl	80005f0 <__aeabi_dmul>
 8007b20:	a387      	add	r3, pc, #540	; (adr r3, 8007d40 <__ieee754_asin+0x2f0>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fbb1 	bl	800028c <__adddf3>
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	f7f8 fd5f 	bl	80005f0 <__aeabi_dmul>
 8007b32:	a385      	add	r3, pc, #532	; (adr r3, 8007d48 <__ieee754_asin+0x2f8>)
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f7f8 fba6 	bl	8000288 <__aeabi_dsub>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	462b      	mov	r3, r5
 8007b40:	f7f8 fd56 	bl	80005f0 <__aeabi_dmul>
 8007b44:	a382      	add	r3, pc, #520	; (adr r3, 8007d50 <__ieee754_asin+0x300>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fb9f 	bl	800028c <__adddf3>
 8007b4e:	4622      	mov	r2, r4
 8007b50:	462b      	mov	r3, r5
 8007b52:	f7f8 fd4d 	bl	80005f0 <__aeabi_dmul>
 8007b56:	a380      	add	r3, pc, #512	; (adr r3, 8007d58 <__ieee754_asin+0x308>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 fb94 	bl	8000288 <__aeabi_dsub>
 8007b60:	4622      	mov	r2, r4
 8007b62:	462b      	mov	r3, r5
 8007b64:	f7f8 fd44 	bl	80005f0 <__aeabi_dmul>
 8007b68:	a37d      	add	r3, pc, #500	; (adr r3, 8007d60 <__ieee754_asin+0x310>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fb8d 	bl	800028c <__adddf3>
 8007b72:	4622      	mov	r2, r4
 8007b74:	462b      	mov	r3, r5
 8007b76:	f7f8 fd3b 	bl	80005f0 <__aeabi_dmul>
 8007b7a:	a37b      	add	r3, pc, #492	; (adr r3, 8007d68 <__ieee754_asin+0x318>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	4680      	mov	r8, r0
 8007b82:	4689      	mov	r9, r1
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 fd32 	bl	80005f0 <__aeabi_dmul>
 8007b8c:	a378      	add	r3, pc, #480	; (adr r3, 8007d70 <__ieee754_asin+0x320>)
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	f7f8 fb79 	bl	8000288 <__aeabi_dsub>
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f7f8 fd29 	bl	80005f0 <__aeabi_dmul>
 8007b9e:	a376      	add	r3, pc, #472	; (adr r3, 8007d78 <__ieee754_asin+0x328>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fb72 	bl	800028c <__adddf3>
 8007ba8:	4622      	mov	r2, r4
 8007baa:	462b      	mov	r3, r5
 8007bac:	f7f8 fd20 	bl	80005f0 <__aeabi_dmul>
 8007bb0:	a373      	add	r3, pc, #460	; (adr r3, 8007d80 <__ieee754_asin+0x330>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 fb67 	bl	8000288 <__aeabi_dsub>
 8007bba:	4622      	mov	r2, r4
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	f7f8 fd17 	bl	80005f0 <__aeabi_dmul>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4b72      	ldr	r3, [pc, #456]	; (8007d90 <__ieee754_asin+0x340>)
 8007bc6:	f7f8 fb61 	bl	800028c <__adddf3>
 8007bca:	ec45 4b10 	vmov	d0, r4, r5
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bd6:	f000 fa21 	bl	800801c <__ieee754_sqrt>
 8007bda:	496f      	ldr	r1, [pc, #444]	; (8007d98 <__ieee754_asin+0x348>)
 8007bdc:	458b      	cmp	fp, r1
 8007bde:	ec57 6b10 	vmov	r6, r7, d0
 8007be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007be6:	f340 80d9 	ble.w	8007d9c <__ieee754_asin+0x34c>
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 fe29 	bl	8000844 <__aeabi_ddiv>
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	f7f8 fcfb 	bl	80005f0 <__aeabi_dmul>
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	f7f8 fb45 	bl	800028c <__adddf3>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	f7f8 fb41 	bl	800028c <__adddf3>
 8007c0a:	a347      	add	r3, pc, #284	; (adr r3, 8007d28 <__ieee754_asin+0x2d8>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fb3a 	bl	8000288 <__aeabi_dsub>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	a141      	add	r1, pc, #260	; (adr r1, 8007d20 <__ieee754_asin+0x2d0>)
 8007c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c1e:	f7f8 fb33 	bl	8000288 <__aeabi_dsub>
 8007c22:	9b01      	ldr	r3, [sp, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bfdc      	itt	le
 8007c28:	4602      	movle	r2, r0
 8007c2a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007c2e:	4604      	mov	r4, r0
 8007c30:	460d      	mov	r5, r1
 8007c32:	bfdc      	itt	le
 8007c34:	4614      	movle	r4, r2
 8007c36:	461d      	movle	r5, r3
 8007c38:	e743      	b.n	8007ac2 <__ieee754_asin+0x72>
 8007c3a:	ee10 2a10 	vmov	r2, s0
 8007c3e:	ee10 0a10 	vmov	r0, s0
 8007c42:	462b      	mov	r3, r5
 8007c44:	4629      	mov	r1, r5
 8007c46:	f7f8 fcd3 	bl	80005f0 <__aeabi_dmul>
 8007c4a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d38 <__ieee754_asin+0x2e8>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	4606      	mov	r6, r0
 8007c52:	460f      	mov	r7, r1
 8007c54:	f7f8 fccc 	bl	80005f0 <__aeabi_dmul>
 8007c58:	a339      	add	r3, pc, #228	; (adr r3, 8007d40 <__ieee754_asin+0x2f0>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fb15 	bl	800028c <__adddf3>
 8007c62:	4632      	mov	r2, r6
 8007c64:	463b      	mov	r3, r7
 8007c66:	f7f8 fcc3 	bl	80005f0 <__aeabi_dmul>
 8007c6a:	a337      	add	r3, pc, #220	; (adr r3, 8007d48 <__ieee754_asin+0x2f8>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f7f8 fb0a 	bl	8000288 <__aeabi_dsub>
 8007c74:	4632      	mov	r2, r6
 8007c76:	463b      	mov	r3, r7
 8007c78:	f7f8 fcba 	bl	80005f0 <__aeabi_dmul>
 8007c7c:	a334      	add	r3, pc, #208	; (adr r3, 8007d50 <__ieee754_asin+0x300>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fb03 	bl	800028c <__adddf3>
 8007c86:	4632      	mov	r2, r6
 8007c88:	463b      	mov	r3, r7
 8007c8a:	f7f8 fcb1 	bl	80005f0 <__aeabi_dmul>
 8007c8e:	a332      	add	r3, pc, #200	; (adr r3, 8007d58 <__ieee754_asin+0x308>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 faf8 	bl	8000288 <__aeabi_dsub>
 8007c98:	4632      	mov	r2, r6
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	f7f8 fca8 	bl	80005f0 <__aeabi_dmul>
 8007ca0:	a32f      	add	r3, pc, #188	; (adr r3, 8007d60 <__ieee754_asin+0x310>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 faf1 	bl	800028c <__adddf3>
 8007caa:	4632      	mov	r2, r6
 8007cac:	463b      	mov	r3, r7
 8007cae:	f7f8 fc9f 	bl	80005f0 <__aeabi_dmul>
 8007cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8007d68 <__ieee754_asin+0x318>)
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	4680      	mov	r8, r0
 8007cba:	4689      	mov	r9, r1
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f8 fc96 	bl	80005f0 <__aeabi_dmul>
 8007cc4:	a32a      	add	r3, pc, #168	; (adr r3, 8007d70 <__ieee754_asin+0x320>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f7f8 fadd 	bl	8000288 <__aeabi_dsub>
 8007cce:	4632      	mov	r2, r6
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	f7f8 fc8d 	bl	80005f0 <__aeabi_dmul>
 8007cd6:	a328      	add	r3, pc, #160	; (adr r3, 8007d78 <__ieee754_asin+0x328>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 fad6 	bl	800028c <__adddf3>
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	f7f8 fc84 	bl	80005f0 <__aeabi_dmul>
 8007ce8:	a325      	add	r3, pc, #148	; (adr r3, 8007d80 <__ieee754_asin+0x330>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 facb 	bl	8000288 <__aeabi_dsub>
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	f7f8 fc7b 	bl	80005f0 <__aeabi_dmul>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <__ieee754_asin+0x340>)
 8007cfe:	f7f8 fac5 	bl	800028c <__adddf3>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 fd9b 	bl	8000844 <__aeabi_ddiv>
 8007d0e:	4622      	mov	r2, r4
 8007d10:	462b      	mov	r3, r5
 8007d12:	f7f8 fc6d 	bl	80005f0 <__aeabi_dmul>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	e6c0      	b.n	8007aa2 <__ieee754_asin+0x52>
 8007d20:	54442d18 	.word	0x54442d18
 8007d24:	3ff921fb 	.word	0x3ff921fb
 8007d28:	33145c07 	.word	0x33145c07
 8007d2c:	3c91a626 	.word	0x3c91a626
 8007d30:	8800759c 	.word	0x8800759c
 8007d34:	7e37e43c 	.word	0x7e37e43c
 8007d38:	0dfdf709 	.word	0x0dfdf709
 8007d3c:	3f023de1 	.word	0x3f023de1
 8007d40:	7501b288 	.word	0x7501b288
 8007d44:	3f49efe0 	.word	0x3f49efe0
 8007d48:	b5688f3b 	.word	0xb5688f3b
 8007d4c:	3fa48228 	.word	0x3fa48228
 8007d50:	0e884455 	.word	0x0e884455
 8007d54:	3fc9c155 	.word	0x3fc9c155
 8007d58:	03eb6f7d 	.word	0x03eb6f7d
 8007d5c:	3fd4d612 	.word	0x3fd4d612
 8007d60:	55555555 	.word	0x55555555
 8007d64:	3fc55555 	.word	0x3fc55555
 8007d68:	b12e9282 	.word	0xb12e9282
 8007d6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007d70:	1b8d0159 	.word	0x1b8d0159
 8007d74:	3fe6066c 	.word	0x3fe6066c
 8007d78:	9c598ac8 	.word	0x9c598ac8
 8007d7c:	40002ae5 	.word	0x40002ae5
 8007d80:	1c8a2d4b 	.word	0x1c8a2d4b
 8007d84:	40033a27 	.word	0x40033a27
 8007d88:	3fefffff 	.word	0x3fefffff
 8007d8c:	3fdfffff 	.word	0x3fdfffff
 8007d90:	3ff00000 	.word	0x3ff00000
 8007d94:	3fe00000 	.word	0x3fe00000
 8007d98:	3fef3332 	.word	0x3fef3332
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	4649      	mov	r1, r9
 8007da0:	f7f8 fd50 	bl	8000844 <__aeabi_ddiv>
 8007da4:	4632      	mov	r2, r6
 8007da6:	4680      	mov	r8, r0
 8007da8:	4689      	mov	r9, r1
 8007daa:	463b      	mov	r3, r7
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 fa6c 	bl	800028c <__adddf3>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fc18 	bl	80005f0 <__aeabi_dmul>
 8007dc0:	f04f 0a00 	mov.w	sl, #0
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	4689      	mov	r9, r1
 8007dc8:	4652      	mov	r2, sl
 8007dca:	463b      	mov	r3, r7
 8007dcc:	4650      	mov	r0, sl
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f7f8 fc0e 	bl	80005f0 <__aeabi_dmul>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4620      	mov	r0, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7f8 fa54 	bl	8000288 <__aeabi_dsub>
 8007de0:	4652      	mov	r2, sl
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	463b      	mov	r3, r7
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fa4e 	bl	800028c <__adddf3>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 fd24 	bl	8000844 <__aeabi_ddiv>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	f7f8 fa44 	bl	800028c <__adddf3>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	a113      	add	r1, pc, #76	; (adr r1, 8007e58 <__ieee754_asin+0x408>)
 8007e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e0e:	f7f8 fa3b 	bl	8000288 <__aeabi_dsub>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4640      	mov	r0, r8
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7f8 fa35 	bl	8000288 <__aeabi_dsub>
 8007e1e:	4652      	mov	r2, sl
 8007e20:	4604      	mov	r4, r0
 8007e22:	460d      	mov	r5, r1
 8007e24:	463b      	mov	r3, r7
 8007e26:	4650      	mov	r0, sl
 8007e28:	4639      	mov	r1, r7
 8007e2a:	f7f8 fa2f 	bl	800028c <__adddf3>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	a10b      	add	r1, pc, #44	; (adr r1, 8007e60 <__ieee754_asin+0x410>)
 8007e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e38:	f7f8 fa26 	bl	8000288 <__aeabi_dsub>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4620      	mov	r0, r4
 8007e42:	4629      	mov	r1, r5
 8007e44:	f7f8 fa20 	bl	8000288 <__aeabi_dsub>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	a104      	add	r1, pc, #16	; (adr r1, 8007e60 <__ieee754_asin+0x410>)
 8007e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e52:	e6e4      	b.n	8007c1e <__ieee754_asin+0x1ce>
 8007e54:	f3af 8000 	nop.w
 8007e58:	33145c07 	.word	0x33145c07
 8007e5c:	3c91a626 	.word	0x3c91a626
 8007e60:	54442d18 	.word	0x54442d18
 8007e64:	3fe921fb 	.word	0x3fe921fb

08007e68 <__ieee754_atan2>:
 8007e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e6c:	ec57 6b11 	vmov	r6, r7, d1
 8007e70:	4273      	negs	r3, r6
 8007e72:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007e76:	4333      	orrs	r3, r6
 8007e78:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8008018 <__ieee754_atan2+0x1b0>
 8007e7c:	ec51 0b10 	vmov	r0, r1, d0
 8007e80:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007e84:	4563      	cmp	r3, ip
 8007e86:	ee11 8a10 	vmov	r8, s2
 8007e8a:	ee10 9a10 	vmov	r9, s0
 8007e8e:	468e      	mov	lr, r1
 8007e90:	d807      	bhi.n	8007ea2 <__ieee754_atan2+0x3a>
 8007e92:	4244      	negs	r4, r0
 8007e94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e98:	4304      	orrs	r4, r0
 8007e9a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007e9e:	4564      	cmp	r4, ip
 8007ea0:	d907      	bls.n	8007eb2 <__ieee754_atan2+0x4a>
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	f7f8 f9f1 	bl	800028c <__adddf3>
 8007eaa:	ec41 0b10 	vmov	d0, r0, r1
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007eb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007eba:	4334      	orrs	r4, r6
 8007ebc:	d103      	bne.n	8007ec6 <__ieee754_atan2+0x5e>
 8007ebe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec2:	f000 b95d 	b.w	8008180 <atan>
 8007ec6:	17bc      	asrs	r4, r7, #30
 8007ec8:	f004 0402 	and.w	r4, r4, #2
 8007ecc:	ea59 0903 	orrs.w	r9, r9, r3
 8007ed0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007ed4:	d107      	bne.n	8007ee6 <__ieee754_atan2+0x7e>
 8007ed6:	2c02      	cmp	r4, #2
 8007ed8:	d030      	beq.n	8007f3c <__ieee754_atan2+0xd4>
 8007eda:	2c03      	cmp	r4, #3
 8007edc:	d1e5      	bne.n	8007eaa <__ieee754_atan2+0x42>
 8007ede:	a13c      	add	r1, pc, #240	; (adr r1, 8007fd0 <__ieee754_atan2+0x168>)
 8007ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ee4:	e7e1      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007ee6:	ea58 0802 	orrs.w	r8, r8, r2
 8007eea:	d106      	bne.n	8007efa <__ieee754_atan2+0x92>
 8007eec:	f1be 0f00 	cmp.w	lr, #0
 8007ef0:	da6a      	bge.n	8007fc8 <__ieee754_atan2+0x160>
 8007ef2:	a139      	add	r1, pc, #228	; (adr r1, 8007fd8 <__ieee754_atan2+0x170>)
 8007ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef8:	e7d7      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007efa:	4562      	cmp	r2, ip
 8007efc:	d122      	bne.n	8007f44 <__ieee754_atan2+0xdc>
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d111      	bne.n	8007f26 <__ieee754_atan2+0xbe>
 8007f02:	2c02      	cmp	r4, #2
 8007f04:	d007      	beq.n	8007f16 <__ieee754_atan2+0xae>
 8007f06:	2c03      	cmp	r4, #3
 8007f08:	d009      	beq.n	8007f1e <__ieee754_atan2+0xb6>
 8007f0a:	2c01      	cmp	r4, #1
 8007f0c:	d156      	bne.n	8007fbc <__ieee754_atan2+0x154>
 8007f0e:	a134      	add	r1, pc, #208	; (adr r1, 8007fe0 <__ieee754_atan2+0x178>)
 8007f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f14:	e7c9      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007f16:	a134      	add	r1, pc, #208	; (adr r1, 8007fe8 <__ieee754_atan2+0x180>)
 8007f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f1c:	e7c5      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007f1e:	a134      	add	r1, pc, #208	; (adr r1, 8007ff0 <__ieee754_atan2+0x188>)
 8007f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f24:	e7c1      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007f26:	2c02      	cmp	r4, #2
 8007f28:	d008      	beq.n	8007f3c <__ieee754_atan2+0xd4>
 8007f2a:	2c03      	cmp	r4, #3
 8007f2c:	d0d7      	beq.n	8007ede <__ieee754_atan2+0x76>
 8007f2e:	2c01      	cmp	r4, #1
 8007f30:	f04f 0000 	mov.w	r0, #0
 8007f34:	d146      	bne.n	8007fc4 <__ieee754_atan2+0x15c>
 8007f36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007f3a:	e7b6      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007f3c:	a12e      	add	r1, pc, #184	; (adr r1, 8007ff8 <__ieee754_atan2+0x190>)
 8007f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f42:	e7b2      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007f44:	4563      	cmp	r3, ip
 8007f46:	d0d1      	beq.n	8007eec <__ieee754_atan2+0x84>
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	151b      	asrs	r3, r3, #20
 8007f4c:	2b3c      	cmp	r3, #60	; 0x3c
 8007f4e:	dc1e      	bgt.n	8007f8e <__ieee754_atan2+0x126>
 8007f50:	2f00      	cmp	r7, #0
 8007f52:	da01      	bge.n	8007f58 <__ieee754_atan2+0xf0>
 8007f54:	333c      	adds	r3, #60	; 0x3c
 8007f56:	db1e      	blt.n	8007f96 <__ieee754_atan2+0x12e>
 8007f58:	4632      	mov	r2, r6
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	f7f8 fc72 	bl	8000844 <__aeabi_ddiv>
 8007f60:	ec41 0b10 	vmov	d0, r0, r1
 8007f64:	f000 fab4 	bl	80084d0 <fabs>
 8007f68:	f000 f90a 	bl	8008180 <atan>
 8007f6c:	ec51 0b10 	vmov	r0, r1, d0
 8007f70:	2c01      	cmp	r4, #1
 8007f72:	d013      	beq.n	8007f9c <__ieee754_atan2+0x134>
 8007f74:	2c02      	cmp	r4, #2
 8007f76:	d014      	beq.n	8007fa2 <__ieee754_atan2+0x13a>
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	d096      	beq.n	8007eaa <__ieee754_atan2+0x42>
 8007f7c:	a320      	add	r3, pc, #128	; (adr r3, 8008000 <__ieee754_atan2+0x198>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f981 	bl	8000288 <__aeabi_dsub>
 8007f86:	a31c      	add	r3, pc, #112	; (adr r3, 8007ff8 <__ieee754_atan2+0x190>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	e013      	b.n	8007fb6 <__ieee754_atan2+0x14e>
 8007f8e:	a11e      	add	r1, pc, #120	; (adr r1, 8008008 <__ieee754_atan2+0x1a0>)
 8007f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f94:	e7ec      	b.n	8007f70 <__ieee754_atan2+0x108>
 8007f96:	2000      	movs	r0, #0
 8007f98:	2100      	movs	r1, #0
 8007f9a:	e7e9      	b.n	8007f70 <__ieee754_atan2+0x108>
 8007f9c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007fa0:	e783      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007fa2:	a317      	add	r3, pc, #92	; (adr r3, 8008000 <__ieee754_atan2+0x198>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 f96e 	bl	8000288 <__aeabi_dsub>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	a111      	add	r1, pc, #68	; (adr r1, 8007ff8 <__ieee754_atan2+0x190>)
 8007fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb6:	f7f8 f967 	bl	8000288 <__aeabi_dsub>
 8007fba:	e776      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007fbc:	a114      	add	r1, pc, #80	; (adr r1, 8008010 <__ieee754_atan2+0x1a8>)
 8007fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc2:	e772      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	e770      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007fc8:	a10f      	add	r1, pc, #60	; (adr r1, 8008008 <__ieee754_atan2+0x1a0>)
 8007fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fce:	e76c      	b.n	8007eaa <__ieee754_atan2+0x42>
 8007fd0:	54442d18 	.word	0x54442d18
 8007fd4:	c00921fb 	.word	0xc00921fb
 8007fd8:	54442d18 	.word	0x54442d18
 8007fdc:	bff921fb 	.word	0xbff921fb
 8007fe0:	54442d18 	.word	0x54442d18
 8007fe4:	bfe921fb 	.word	0xbfe921fb
 8007fe8:	7f3321d2 	.word	0x7f3321d2
 8007fec:	4002d97c 	.word	0x4002d97c
 8007ff0:	7f3321d2 	.word	0x7f3321d2
 8007ff4:	c002d97c 	.word	0xc002d97c
 8007ff8:	54442d18 	.word	0x54442d18
 8007ffc:	400921fb 	.word	0x400921fb
 8008000:	33145c07 	.word	0x33145c07
 8008004:	3ca1a626 	.word	0x3ca1a626
 8008008:	54442d18 	.word	0x54442d18
 800800c:	3ff921fb 	.word	0x3ff921fb
 8008010:	54442d18 	.word	0x54442d18
 8008014:	3fe921fb 	.word	0x3fe921fb
 8008018:	7ff00000 	.word	0x7ff00000

0800801c <__ieee754_sqrt>:
 800801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	ec55 4b10 	vmov	r4, r5, d0
 8008024:	4e54      	ldr	r6, [pc, #336]	; (8008178 <__ieee754_sqrt+0x15c>)
 8008026:	43ae      	bics	r6, r5
 8008028:	ee10 0a10 	vmov	r0, s0
 800802c:	462b      	mov	r3, r5
 800802e:	462a      	mov	r2, r5
 8008030:	4621      	mov	r1, r4
 8008032:	d113      	bne.n	800805c <__ieee754_sqrt+0x40>
 8008034:	ee10 2a10 	vmov	r2, s0
 8008038:	462b      	mov	r3, r5
 800803a:	ee10 0a10 	vmov	r0, s0
 800803e:	4629      	mov	r1, r5
 8008040:	f7f8 fad6 	bl	80005f0 <__aeabi_dmul>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4620      	mov	r0, r4
 800804a:	4629      	mov	r1, r5
 800804c:	f7f8 f91e 	bl	800028c <__adddf3>
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	ec45 4b10 	vmov	d0, r4, r5
 8008058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805c:	2d00      	cmp	r5, #0
 800805e:	dc10      	bgt.n	8008082 <__ieee754_sqrt+0x66>
 8008060:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008064:	4330      	orrs	r0, r6
 8008066:	d0f5      	beq.n	8008054 <__ieee754_sqrt+0x38>
 8008068:	b15d      	cbz	r5, 8008082 <__ieee754_sqrt+0x66>
 800806a:	ee10 2a10 	vmov	r2, s0
 800806e:	462b      	mov	r3, r5
 8008070:	4620      	mov	r0, r4
 8008072:	4629      	mov	r1, r5
 8008074:	f7f8 f908 	bl	8000288 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	f7f8 fbe2 	bl	8000844 <__aeabi_ddiv>
 8008080:	e7e6      	b.n	8008050 <__ieee754_sqrt+0x34>
 8008082:	151b      	asrs	r3, r3, #20
 8008084:	d10c      	bne.n	80080a0 <__ieee754_sqrt+0x84>
 8008086:	2a00      	cmp	r2, #0
 8008088:	d06d      	beq.n	8008166 <__ieee754_sqrt+0x14a>
 800808a:	2000      	movs	r0, #0
 800808c:	02d6      	lsls	r6, r2, #11
 800808e:	d56e      	bpl.n	800816e <__ieee754_sqrt+0x152>
 8008090:	1e44      	subs	r4, r0, #1
 8008092:	1b1b      	subs	r3, r3, r4
 8008094:	f1c0 0420 	rsb	r4, r0, #32
 8008098:	fa21 f404 	lsr.w	r4, r1, r4
 800809c:	4322      	orrs	r2, r4
 800809e:	4081      	lsls	r1, r0
 80080a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080a4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80080a8:	07dd      	lsls	r5, r3, #31
 80080aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80080ae:	bf42      	ittt	mi
 80080b0:	0052      	lslmi	r2, r2, #1
 80080b2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80080b6:	0049      	lslmi	r1, r1, #1
 80080b8:	1058      	asrs	r0, r3, #1
 80080ba:	2500      	movs	r5, #0
 80080bc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80080c0:	441a      	add	r2, r3
 80080c2:	0049      	lsls	r1, r1, #1
 80080c4:	2316      	movs	r3, #22
 80080c6:	462c      	mov	r4, r5
 80080c8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80080cc:	19a7      	adds	r7, r4, r6
 80080ce:	4297      	cmp	r7, r2
 80080d0:	bfde      	ittt	le
 80080d2:	1bd2      	suble	r2, r2, r7
 80080d4:	19bc      	addle	r4, r7, r6
 80080d6:	19ad      	addle	r5, r5, r6
 80080d8:	0052      	lsls	r2, r2, #1
 80080da:	3b01      	subs	r3, #1
 80080dc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80080e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80080e8:	d1f0      	bne.n	80080cc <__ieee754_sqrt+0xb0>
 80080ea:	f04f 0e20 	mov.w	lr, #32
 80080ee:	469c      	mov	ip, r3
 80080f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80080f4:	42a2      	cmp	r2, r4
 80080f6:	eb06 070c 	add.w	r7, r6, ip
 80080fa:	dc02      	bgt.n	8008102 <__ieee754_sqrt+0xe6>
 80080fc:	d112      	bne.n	8008124 <__ieee754_sqrt+0x108>
 80080fe:	428f      	cmp	r7, r1
 8008100:	d810      	bhi.n	8008124 <__ieee754_sqrt+0x108>
 8008102:	2f00      	cmp	r7, #0
 8008104:	eb07 0c06 	add.w	ip, r7, r6
 8008108:	da34      	bge.n	8008174 <__ieee754_sqrt+0x158>
 800810a:	f1bc 0f00 	cmp.w	ip, #0
 800810e:	db31      	blt.n	8008174 <__ieee754_sqrt+0x158>
 8008110:	f104 0801 	add.w	r8, r4, #1
 8008114:	1b12      	subs	r2, r2, r4
 8008116:	428f      	cmp	r7, r1
 8008118:	bf88      	it	hi
 800811a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800811e:	1bc9      	subs	r1, r1, r7
 8008120:	4433      	add	r3, r6
 8008122:	4644      	mov	r4, r8
 8008124:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8008128:	f1be 0e01 	subs.w	lr, lr, #1
 800812c:	443a      	add	r2, r7
 800812e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008132:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008136:	d1dd      	bne.n	80080f4 <__ieee754_sqrt+0xd8>
 8008138:	430a      	orrs	r2, r1
 800813a:	d006      	beq.n	800814a <__ieee754_sqrt+0x12e>
 800813c:	1c5c      	adds	r4, r3, #1
 800813e:	bf13      	iteet	ne
 8008140:	3301      	addne	r3, #1
 8008142:	3501      	addeq	r5, #1
 8008144:	4673      	moveq	r3, lr
 8008146:	f023 0301 	bicne.w	r3, r3, #1
 800814a:	106a      	asrs	r2, r5, #1
 800814c:	085b      	lsrs	r3, r3, #1
 800814e:	07e9      	lsls	r1, r5, #31
 8008150:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008154:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008158:	bf48      	it	mi
 800815a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800815e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008162:	461c      	mov	r4, r3
 8008164:	e776      	b.n	8008054 <__ieee754_sqrt+0x38>
 8008166:	0aca      	lsrs	r2, r1, #11
 8008168:	3b15      	subs	r3, #21
 800816a:	0549      	lsls	r1, r1, #21
 800816c:	e78b      	b.n	8008086 <__ieee754_sqrt+0x6a>
 800816e:	0052      	lsls	r2, r2, #1
 8008170:	3001      	adds	r0, #1
 8008172:	e78b      	b.n	800808c <__ieee754_sqrt+0x70>
 8008174:	46a0      	mov	r8, r4
 8008176:	e7cd      	b.n	8008114 <__ieee754_sqrt+0xf8>
 8008178:	7ff00000 	.word	0x7ff00000
 800817c:	00000000 	.word	0x00000000

08008180 <atan>:
 8008180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	ec55 4b10 	vmov	r4, r5, d0
 8008188:	4bc7      	ldr	r3, [pc, #796]	; (80084a8 <atan+0x328>)
 800818a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800818e:	429e      	cmp	r6, r3
 8008190:	46ab      	mov	fp, r5
 8008192:	dd18      	ble.n	80081c6 <atan+0x46>
 8008194:	4ac5      	ldr	r2, [pc, #788]	; (80084ac <atan+0x32c>)
 8008196:	4296      	cmp	r6, r2
 8008198:	dc01      	bgt.n	800819e <atan+0x1e>
 800819a:	d109      	bne.n	80081b0 <atan+0x30>
 800819c:	b144      	cbz	r4, 80081b0 <atan+0x30>
 800819e:	4622      	mov	r2, r4
 80081a0:	462b      	mov	r3, r5
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	f7f8 f871 	bl	800028c <__adddf3>
 80081aa:	4604      	mov	r4, r0
 80081ac:	460d      	mov	r5, r1
 80081ae:	e006      	b.n	80081be <atan+0x3e>
 80081b0:	f1bb 0f00 	cmp.w	fp, #0
 80081b4:	f300 813a 	bgt.w	800842c <atan+0x2ac>
 80081b8:	a59f      	add	r5, pc, #636	; (adr r5, 8008438 <atan+0x2b8>)
 80081ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081be:	ec45 4b10 	vmov	d0, r4, r5
 80081c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	4bba      	ldr	r3, [pc, #744]	; (80084b0 <atan+0x330>)
 80081c8:	429e      	cmp	r6, r3
 80081ca:	dc14      	bgt.n	80081f6 <atan+0x76>
 80081cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80081d0:	429e      	cmp	r6, r3
 80081d2:	dc0d      	bgt.n	80081f0 <atan+0x70>
 80081d4:	a39a      	add	r3, pc, #616	; (adr r3, 8008440 <atan+0x2c0>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	ee10 0a10 	vmov	r0, s0
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 f854 	bl	800028c <__adddf3>
 80081e4:	2200      	movs	r2, #0
 80081e6:	4bb3      	ldr	r3, [pc, #716]	; (80084b4 <atan+0x334>)
 80081e8:	f7f8 fc92 	bl	8000b10 <__aeabi_dcmpgt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d1e6      	bne.n	80081be <atan+0x3e>
 80081f0:	f04f 3aff 	mov.w	sl, #4294967295
 80081f4:	e02b      	b.n	800824e <atan+0xce>
 80081f6:	f000 f96b 	bl	80084d0 <fabs>
 80081fa:	4baf      	ldr	r3, [pc, #700]	; (80084b8 <atan+0x338>)
 80081fc:	429e      	cmp	r6, r3
 80081fe:	ec55 4b10 	vmov	r4, r5, d0
 8008202:	f300 80bf 	bgt.w	8008384 <atan+0x204>
 8008206:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800820a:	429e      	cmp	r6, r3
 800820c:	f300 80a0 	bgt.w	8008350 <atan+0x1d0>
 8008210:	ee10 2a10 	vmov	r2, s0
 8008214:	ee10 0a10 	vmov	r0, s0
 8008218:	462b      	mov	r3, r5
 800821a:	4629      	mov	r1, r5
 800821c:	f7f8 f836 	bl	800028c <__adddf3>
 8008220:	2200      	movs	r2, #0
 8008222:	4ba4      	ldr	r3, [pc, #656]	; (80084b4 <atan+0x334>)
 8008224:	f7f8 f830 	bl	8000288 <__aeabi_dsub>
 8008228:	2200      	movs	r2, #0
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008232:	4620      	mov	r0, r4
 8008234:	4629      	mov	r1, r5
 8008236:	f7f8 f829 	bl	800028c <__adddf3>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4630      	mov	r0, r6
 8008240:	4639      	mov	r1, r7
 8008242:	f7f8 faff 	bl	8000844 <__aeabi_ddiv>
 8008246:	f04f 0a00 	mov.w	sl, #0
 800824a:	4604      	mov	r4, r0
 800824c:	460d      	mov	r5, r1
 800824e:	4622      	mov	r2, r4
 8008250:	462b      	mov	r3, r5
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 f9cb 	bl	80005f0 <__aeabi_dmul>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4680      	mov	r8, r0
 8008260:	4689      	mov	r9, r1
 8008262:	f7f8 f9c5 	bl	80005f0 <__aeabi_dmul>
 8008266:	a378      	add	r3, pc, #480	; (adr r3, 8008448 <atan+0x2c8>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	4606      	mov	r6, r0
 800826e:	460f      	mov	r7, r1
 8008270:	f7f8 f9be 	bl	80005f0 <__aeabi_dmul>
 8008274:	a376      	add	r3, pc, #472	; (adr r3, 8008450 <atan+0x2d0>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f8 f807 	bl	800028c <__adddf3>
 800827e:	4632      	mov	r2, r6
 8008280:	463b      	mov	r3, r7
 8008282:	f7f8 f9b5 	bl	80005f0 <__aeabi_dmul>
 8008286:	a374      	add	r3, pc, #464	; (adr r3, 8008458 <atan+0x2d8>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f7f7 fffe 	bl	800028c <__adddf3>
 8008290:	4632      	mov	r2, r6
 8008292:	463b      	mov	r3, r7
 8008294:	f7f8 f9ac 	bl	80005f0 <__aeabi_dmul>
 8008298:	a371      	add	r3, pc, #452	; (adr r3, 8008460 <atan+0x2e0>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	f7f7 fff5 	bl	800028c <__adddf3>
 80082a2:	4632      	mov	r2, r6
 80082a4:	463b      	mov	r3, r7
 80082a6:	f7f8 f9a3 	bl	80005f0 <__aeabi_dmul>
 80082aa:	a36f      	add	r3, pc, #444	; (adr r3, 8008468 <atan+0x2e8>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f7f7 ffec 	bl	800028c <__adddf3>
 80082b4:	4632      	mov	r2, r6
 80082b6:	463b      	mov	r3, r7
 80082b8:	f7f8 f99a 	bl	80005f0 <__aeabi_dmul>
 80082bc:	a36c      	add	r3, pc, #432	; (adr r3, 8008470 <atan+0x2f0>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 ffe3 	bl	800028c <__adddf3>
 80082c6:	4642      	mov	r2, r8
 80082c8:	464b      	mov	r3, r9
 80082ca:	f7f8 f991 	bl	80005f0 <__aeabi_dmul>
 80082ce:	a36a      	add	r3, pc, #424	; (adr r3, 8008478 <atan+0x2f8>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	4680      	mov	r8, r0
 80082d6:	4689      	mov	r9, r1
 80082d8:	4630      	mov	r0, r6
 80082da:	4639      	mov	r1, r7
 80082dc:	f7f8 f988 	bl	80005f0 <__aeabi_dmul>
 80082e0:	a367      	add	r3, pc, #412	; (adr r3, 8008480 <atan+0x300>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ffcf 	bl	8000288 <__aeabi_dsub>
 80082ea:	4632      	mov	r2, r6
 80082ec:	463b      	mov	r3, r7
 80082ee:	f7f8 f97f 	bl	80005f0 <__aeabi_dmul>
 80082f2:	a365      	add	r3, pc, #404	; (adr r3, 8008488 <atan+0x308>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ffc6 	bl	8000288 <__aeabi_dsub>
 80082fc:	4632      	mov	r2, r6
 80082fe:	463b      	mov	r3, r7
 8008300:	f7f8 f976 	bl	80005f0 <__aeabi_dmul>
 8008304:	a362      	add	r3, pc, #392	; (adr r3, 8008490 <atan+0x310>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ffbd 	bl	8000288 <__aeabi_dsub>
 800830e:	4632      	mov	r2, r6
 8008310:	463b      	mov	r3, r7
 8008312:	f7f8 f96d 	bl	80005f0 <__aeabi_dmul>
 8008316:	a360      	add	r3, pc, #384	; (adr r3, 8008498 <atan+0x318>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f7 ffb4 	bl	8000288 <__aeabi_dsub>
 8008320:	4632      	mov	r2, r6
 8008322:	463b      	mov	r3, r7
 8008324:	f7f8 f964 	bl	80005f0 <__aeabi_dmul>
 8008328:	f1ba 3fff 	cmp.w	sl, #4294967295
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	d155      	bne.n	80083de <atan+0x25e>
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffa9 	bl	800028c <__adddf3>
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	f7f8 f957 	bl	80005f0 <__aeabi_dmul>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f7 ff9d 	bl	8000288 <__aeabi_dsub>
 800834e:	e72c      	b.n	80081aa <atan+0x2a>
 8008350:	ee10 0a10 	vmov	r0, s0
 8008354:	2200      	movs	r2, #0
 8008356:	4b57      	ldr	r3, [pc, #348]	; (80084b4 <atan+0x334>)
 8008358:	4629      	mov	r1, r5
 800835a:	f7f7 ff95 	bl	8000288 <__aeabi_dsub>
 800835e:	2200      	movs	r2, #0
 8008360:	4606      	mov	r6, r0
 8008362:	460f      	mov	r7, r1
 8008364:	4b53      	ldr	r3, [pc, #332]	; (80084b4 <atan+0x334>)
 8008366:	4620      	mov	r0, r4
 8008368:	4629      	mov	r1, r5
 800836a:	f7f7 ff8f 	bl	800028c <__adddf3>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4630      	mov	r0, r6
 8008374:	4639      	mov	r1, r7
 8008376:	f7f8 fa65 	bl	8000844 <__aeabi_ddiv>
 800837a:	f04f 0a01 	mov.w	sl, #1
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	e764      	b.n	800824e <atan+0xce>
 8008384:	4b4d      	ldr	r3, [pc, #308]	; (80084bc <atan+0x33c>)
 8008386:	429e      	cmp	r6, r3
 8008388:	dc1d      	bgt.n	80083c6 <atan+0x246>
 800838a:	ee10 0a10 	vmov	r0, s0
 800838e:	2200      	movs	r2, #0
 8008390:	4b4b      	ldr	r3, [pc, #300]	; (80084c0 <atan+0x340>)
 8008392:	4629      	mov	r1, r5
 8008394:	f7f7 ff78 	bl	8000288 <__aeabi_dsub>
 8008398:	2200      	movs	r2, #0
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	4b48      	ldr	r3, [pc, #288]	; (80084c0 <atan+0x340>)
 80083a0:	4620      	mov	r0, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	f7f8 f924 	bl	80005f0 <__aeabi_dmul>
 80083a8:	2200      	movs	r2, #0
 80083aa:	4b42      	ldr	r3, [pc, #264]	; (80084b4 <atan+0x334>)
 80083ac:	f7f7 ff6e 	bl	800028c <__adddf3>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4630      	mov	r0, r6
 80083b6:	4639      	mov	r1, r7
 80083b8:	f7f8 fa44 	bl	8000844 <__aeabi_ddiv>
 80083bc:	f04f 0a02 	mov.w	sl, #2
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	e743      	b.n	800824e <atan+0xce>
 80083c6:	462b      	mov	r3, r5
 80083c8:	ee10 2a10 	vmov	r2, s0
 80083cc:	2000      	movs	r0, #0
 80083ce:	493d      	ldr	r1, [pc, #244]	; (80084c4 <atan+0x344>)
 80083d0:	f7f8 fa38 	bl	8000844 <__aeabi_ddiv>
 80083d4:	f04f 0a03 	mov.w	sl, #3
 80083d8:	4604      	mov	r4, r0
 80083da:	460d      	mov	r5, r1
 80083dc:	e737      	b.n	800824e <atan+0xce>
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f7 ff53 	bl	800028c <__adddf3>
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	f7f8 f901 	bl	80005f0 <__aeabi_dmul>
 80083ee:	4e36      	ldr	r6, [pc, #216]	; (80084c8 <atan+0x348>)
 80083f0:	4b36      	ldr	r3, [pc, #216]	; (80084cc <atan+0x34c>)
 80083f2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80083f6:	4456      	add	r6, sl
 80083f8:	449a      	add	sl, r3
 80083fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80083fe:	f7f7 ff43 	bl	8000288 <__aeabi_dsub>
 8008402:	4622      	mov	r2, r4
 8008404:	462b      	mov	r3, r5
 8008406:	f7f7 ff3f 	bl	8000288 <__aeabi_dsub>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008412:	f7f7 ff39 	bl	8000288 <__aeabi_dsub>
 8008416:	f1bb 0f00 	cmp.w	fp, #0
 800841a:	4604      	mov	r4, r0
 800841c:	460d      	mov	r5, r1
 800841e:	f6bf aece 	bge.w	80081be <atan+0x3e>
 8008422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008426:	4604      	mov	r4, r0
 8008428:	461d      	mov	r5, r3
 800842a:	e6c8      	b.n	80081be <atan+0x3e>
 800842c:	a51c      	add	r5, pc, #112	; (adr r5, 80084a0 <atan+0x320>)
 800842e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008432:	e6c4      	b.n	80081be <atan+0x3e>
 8008434:	f3af 8000 	nop.w
 8008438:	54442d18 	.word	0x54442d18
 800843c:	bff921fb 	.word	0xbff921fb
 8008440:	8800759c 	.word	0x8800759c
 8008444:	7e37e43c 	.word	0x7e37e43c
 8008448:	e322da11 	.word	0xe322da11
 800844c:	3f90ad3a 	.word	0x3f90ad3a
 8008450:	24760deb 	.word	0x24760deb
 8008454:	3fa97b4b 	.word	0x3fa97b4b
 8008458:	a0d03d51 	.word	0xa0d03d51
 800845c:	3fb10d66 	.word	0x3fb10d66
 8008460:	c54c206e 	.word	0xc54c206e
 8008464:	3fb745cd 	.word	0x3fb745cd
 8008468:	920083ff 	.word	0x920083ff
 800846c:	3fc24924 	.word	0x3fc24924
 8008470:	5555550d 	.word	0x5555550d
 8008474:	3fd55555 	.word	0x3fd55555
 8008478:	2c6a6c2f 	.word	0x2c6a6c2f
 800847c:	bfa2b444 	.word	0xbfa2b444
 8008480:	52defd9a 	.word	0x52defd9a
 8008484:	3fadde2d 	.word	0x3fadde2d
 8008488:	af749a6d 	.word	0xaf749a6d
 800848c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008490:	fe231671 	.word	0xfe231671
 8008494:	3fbc71c6 	.word	0x3fbc71c6
 8008498:	9998ebc4 	.word	0x9998ebc4
 800849c:	3fc99999 	.word	0x3fc99999
 80084a0:	54442d18 	.word	0x54442d18
 80084a4:	3ff921fb 	.word	0x3ff921fb
 80084a8:	440fffff 	.word	0x440fffff
 80084ac:	7ff00000 	.word	0x7ff00000
 80084b0:	3fdbffff 	.word	0x3fdbffff
 80084b4:	3ff00000 	.word	0x3ff00000
 80084b8:	3ff2ffff 	.word	0x3ff2ffff
 80084bc:	40037fff 	.word	0x40037fff
 80084c0:	3ff80000 	.word	0x3ff80000
 80084c4:	bff00000 	.word	0xbff00000
 80084c8:	08008830 	.word	0x08008830
 80084cc:	08008850 	.word	0x08008850

080084d0 <fabs>:
 80084d0:	ec53 2b10 	vmov	r2, r3, d0
 80084d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d8:	ec43 2b10 	vmov	d0, r2, r3
 80084dc:	4770      	bx	lr

080084de <matherr>:
 80084de:	2000      	movs	r0, #0
 80084e0:	4770      	bx	lr
 80084e2:	0000      	movs	r0, r0
 80084e4:	0000      	movs	r0, r0
	...

080084e8 <nan>:
 80084e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80084f0 <nan+0x8>
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	00000000 	.word	0x00000000
 80084f4:	7ff80000 	.word	0x7ff80000

080084f8 <_init>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	bf00      	nop
 80084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fe:	bc08      	pop	{r3}
 8008500:	469e      	mov	lr, r3
 8008502:	4770      	bx	lr

08008504 <_fini>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr
